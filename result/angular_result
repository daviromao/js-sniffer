Test:  should display proper breadcrumb structure based on navigation state
Has  Magic Number Test

======================================

Test:  should display breadcrumb links when navigation item has got path
Has  Magic Number Test

======================================

Test:  should call clipboard service when clicked on copy source code
Has  Magic Number Test

======================================

Test:  should not copy lines marked as deleted when code snippet contains diff
Has  Magic Number Test

======================================

Test:  should display provided navigation structure
Has  Magic Number Test

======================================

Test:  should emit linkClicked when user clicked on link
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should display items to provided level
Has  Magic Number Test

======================================

Test:  should navigate to active item when user pressed Enter
Has  Magic Number Test

======================================

Test:  should display list of the search results when results exist
Has  Magic Number Test

======================================

Test:  should render items when tableOfContentItems has value
Has  Magic Number Test

======================================

Test:  should append level class to element
Has  Magic Number Test

======================================

Test:  should display example viewer in multi file mode when user clicks expand
Has  Magic Number Test

======================================

Test:  should render Icon component when content has <docs-icon> element
Has  Magic Number Test

======================================

Test:  should render Breadcrumb component when content has <docs-breadcrumb> element
Has  Magic Number Test

======================================

Test:  should render ToC
Has  Magic Number Test

======================================

Test:  should set file extensions as tab names when all files have different extension
Has  Magic Number Test

======================================

Test:  should generate correct code content for multi file mode when it is expanded
Has  Magic Number Test

======================================

Test:  should set file names as tab names when there is at least one duplication
Has  Magic Number Test

======================================

Test:  should call clipboard service when clicked on copy example link
Has  Magic Number Test

======================================

Test:  should docsClickOutside be emitted when user click outside `content` element
Has  Magic Number Test

======================================

Test:  should render description correctly
Has  Redundant Print

======================================

Test:  should transform links
Has  Magic Number Test

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  creates card containers containing multiple cards
Has  Magic Number Test

======================================

Test:  properly shows the diff of two provided file paths
Has  Magic Number Test

======================================

Test:  should create a nav container with all of the docs pills inside
Has  Magic Number Test

======================================

Test:  should create a list item for each step
Has  Magic Number Test

======================================

Test:  should create an iframe in a container
Has  Magic Number Test

======================================

Test:  create an ordered list container around the docs-steps
Has  Magic Number Test

======================================

Test:  should make the docs anchors unreachable by tab
Has  Conditional Test Logic

======================================

Test:  increments when multiple duplicate header names are found
Has  Conditional Test Logic

======================================

Test:  should be able to parse heading with a valid tag in a code block
Has  Magic Number Test

======================================

Test:  should wrap lists in custom classes
Has  Magic Number Test

======================================

Test:  should create an svg for each mermaid code block
Has  Magic Number Test

======================================

Test:  should create table of content list with h2 and h3 when h2 and h3 headings exists
Has  Magic Number Test

======================================

Test:  should not display in ToC h2,h3 without ids
Has  Magic Number Test

======================================

Test:  should not display in ToC h2,h3 which are childrens of docs-example-viewer
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should call scrollToPosition([0, 0]) once scrollToTop was invoked
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should subscribe to window uncaught errors and report them
Has  Magic Number Test

======================================

Test:  should report errors to analytics by dispatching `gtag` and `ga` events
Has  Magic Number Test

======================================

Test:  should cope with the super handler throwing an error
Has  Magic Number Test

======================================

Test:  should augment an error object with version info
Has  Conditional Test Logic

======================================

Test:  should send a non-object, non-string error stringified to analytics
Has  Magic Number Test

======================================

Test:  should render tabs based on filenames order
Has  Conditional Test Logic

======================================

Test:  should change file content when clicking on an unselected tab
Has  Magic Number Test

======================================

Test:  should not change file content when clicking on a selected tab
Has  Magic Number Test

======================================

Test:  should change file content when clicking on unselected tab while creating a new file
Has  Magic Number Test

======================================

Test:  start creating a new file, select an existing tab, should not change file content when return back on a new file tab
Has  Magic Number Test

======================================

Test:  should not allow to delete a required file
Has  Conditional Test Logic

======================================

Test:  should keep openFiles order
Has  Conditional Test Logic

======================================

Test:  should not have hiddenFiles in openFiles on reveal and reset answer
Has  Conditional Test Logic

======================================

Test:  should not have duplicate files in openFiles on reveal and reset answer
Has  Magic Number Test

======================================

Test:  should keep openFiles order on reveal and reset answer
Has  Conditional Test Logic

======================================

Test:  should fetch tutorial source code and config and set signals
Has  Magic Number Test

======================================

Test:  should throw an error if the tutorial files cannot be fetched
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should not set shouldReinstallDependencies if project did not change
Has  Magic Number Test

======================================

Test:  should trigger shouldReInstallDependencies if new metadata has different dependencies
Has  Magic Number Test

======================================

Test:  should trigger shouldReInstallDependencies if new metadata has dependencies and previous dependencies were empty
Has  Magic Number Test

======================================

Test:  should not trigger shouldReInstallDependencies if new metadata has same dependencies
Has  Magic Number Test

======================================

Test:  should set files to delete on project change if previous project has unused files
Has  Magic Number Test

======================================

Test:  should set no files to delete on project change if previous project has same files as new project
Has  Magic Number Test

======================================

Test:  should not set files to delete if project did not change
Has  Magic Number Test

======================================

Test:  should set error message when install dependencies resolve exitCode not equal to 0
Has  Magic Number Test

======================================

Test:  should delete files on project change
Has  Conditional Test Logic

======================================

Test:  should set iframe src on init
Has  Magic Number Test

======================================

Test:  should render the correct loading element based on loadingStep
Has  Conditional Test Logic

======================================

Test:  should return true when user try to execute allowed commands
Has  Conditional Test Logic

======================================

Test:  should call resizeToFitParent on window resize
Has  Magic Number Test

======================================

Test:  should read files from directory when a glob pattern is found
Has  Magic Number Test

======================================

Test:  should only contain type definitions files
Has  Conditional Test Logic

======================================

Test:  should skip library if its package.json can not be found
Has  Conditional Test Logic

======================================

Test:  should render list of all APIs of provided group
Has  Magic Number Test

======================================

Test:  should display deprecated icon for deprecated API
Has  Magic Number Test

======================================

Test:  should display star icon for featured API
Has  Magic Number Test

======================================

Test:  should render tabs for all elements with tab attribute
Has  Magic Number Test

======================================

Test:  should display members cards when API tab is active
Has  Magic Number Test

======================================

Test:  should display both Deprecated and Non-deprecated APIs when includeDeprecated toggle is set to true
Has  Magic Number Test

======================================

Test:  should display both Non-deprecated APIs when includeDeprecated toggle is set to false
Has  Magic Number Test

======================================

Test:  should display only items which contains provided query when query is not empty
Has  Magic Number Test

======================================

Test:  should display only class items when user selects Class in the Type select
Has  Magic Number Test

======================================

Test:  should reset the reveal answer
Has  Conditional Test Logic

======================================

Test:  should reveal the answer on button click
Has  Conditional Test Logic

======================================

Test:  should not reveal the answer when button is disabled
Has  Conditional Test Logic

======================================

Test:  should verify paths
Has  Magic Number Test

======================================

Test:  should hide/show content
Has  Magic Number Test

======================================

Test:  should hide/show content
Has  Magic Number Test

======================================

Test:  should hide/show content
Has  Magic Number Test

======================================

Test:  should hide/show content
Has  Magic Number Test

======================================

Test:  should resolve and display promise
Has  Magic Number Test

======================================

Test:  should work properly
Has  Magic Number Test

======================================

Test:  should work properly
Has  Magic Number Test

======================================

Test:  should work properly
Has  Magic Number Test

======================================

Test:  should work properly
Has  Magic Number Test

======================================

Test:  should work properly
Has  Magic Number Test

======================================

Test:  should work properly
Has  Magic Number Test

======================================

Test:  should list out the current collection of items
Has  Magic Number Test

======================================

Test:  works
Has  Magic Number Test

======================================

Test:  times out with a list of tasks
Has  Exception Handling

======================================

Test:  should work with ngOnChanges
Has  Magic Number Test

======================================

Test:  should populate the UI with initial values
Has  Magic Number Test

======================================

Test:  should update the validation status
Has  Magic Number Test

======================================

Test:  should populate the UI with initial values
Has  Magic Number Test

======================================

Test:  should add inputs programmatically
Has  Magic Number Test

======================================

Test:  should set the value programmatically
Has  Magic Number Test

======================================

Test:  should populate the UI with initial values
Has  Magic Number Test

======================================

Test:  should show the error when name is invalid
Has  Magic Number Test

======================================

Test:  should set the value when changing the domain model
Has  Magic Number Test

======================================

Test:  should populate the UI with initial values
Has  Magic Number Test

======================================

Test:  update model and other buttons as the UI value changes
Has  Magic Number Test

======================================

Test:  should populate the UI with initial values
Has  Magic Number Test

======================================

Test:  update model and other buttons as the UI value changes
Has  Magic Number Test

======================================

Test:  should populate the initial selection
Has  Magic Number Test

======================================

Test:  should update the model when the value changes in the UI
Has  Magic Number Test

======================================

Test:  should initially select the placeholder option
Has  Magic Number Test

======================================

Test:  should update the model when the value changes in the UI
Has  Magic Number Test

======================================

Test:  should update the domain model as you type
Has  Magic Number Test

======================================

Test:  should report the validity correctly
Has  Magic Number Test

======================================

Test:  should update the domain model as you type
Has  Magic Number Test

======================================

Test:  should report the validity correctly
Has  Magic Number Test

======================================

Test:  testing a guard
Has  Conditional Test Logic

======================================

Test:  does something
Has  EmptyTest
Has  Unknown Test

======================================

Test:  has a test
Has  EmptyTest
Has  Unknown Test

======================================

Test:  also has a test
Has  Unknown Test

======================================

Test:  has a test
Has  Unknown Test

======================================

Test:  also has a test
Has  EmptyTest
Has  Unknown Test

======================================

Test:  has another test
Has  Unknown Test

======================================

Test:  has another test
Has  EmptyTest
Has  Unknown Test

======================================

Test:  uses the db
Has  EmptyTest
Has  Unknown Test

======================================

Test:  uses the db
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should render the `ng2-heroes` component
Has  Magic Number Test

======================================

Test:  should render 3 ng1-hero components
Has  Magic Number Test

======================================

Test:  should remove a hero when the "Remove" button is pressed
Has  Magic Number Test

======================================

Test:  should initially not render the heroes
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should toggle the heroes when clicking the "show/hide" button
Has  Unknown Test

======================================

Test:  should add a new hero when clicking the "add" button
Has  Magic Number Test

======================================

Test:  should remove a hero when clicking its "remove" button
Has  Magic Number Test

======================================

Test:  should correctly bootstrap multiple downgraded modules
Has  Magic Number Test

======================================

Test:  should be open
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should be closed
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should log animation events
Has  Magic Number Test

======================================

Test:  should be inactive with a blue background
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should be active with an orange background
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should remove the hero from the list when clicked
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should remove the hero from the list when clicked
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should filter down the list when a search is performed
Has  Magic Number Test

======================================

Test:  should remove the hero from the list when clicked
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should display an Aria button
Has  Magic Number Test

======================================

Test:  should be able to select green highlight
Has  Magic Number Test

======================================

Test:  should have 10 lists each containing the string Teapot
Has  Magic Number Test

======================================

Test:  should have button
Has  Magic Number Test

======================================

Test:  unauthorized user should have multiple unauthorized heroes
Has  Magic Number Test

======================================

Test:  unauthorized user should have no secret heroes
Has  Magic Number Test

======================================

Test:  unauthorized user should have no authorized heroes listed
Has  Magic Number Test

======================================

Test:  authorized user should have multiple authorized heroes 
Has  Magic Number Test

======================================

Test:  authorized user should have multiple authorized heroes with tree-shakeable HeroesService
Has  Magic Number Test

======================================

Test:  authorized user should have secret heroes
Has  Magic Number Test

======================================

Test:  authorized user should have no unauthorized heroes listed
Has  Magic Number Test

======================================

Test:  should submit form
Has  Magic Number Test

======================================

Test:  should hide the item img
Has  Magic Number Test

======================================

Test:  should have form buttons
Has  Magic Number Test

======================================

Test:  should have error at start
Has  Unknown Test

======================================

Test:  should have disabled submit button
Has  Magic Number Test

======================================

Test:  should produce "required" error after clearing name
Has  Magic Number Test

======================================

Test:  should produce "at least 4 characters" error when name="x"
Has  Magic Number Test

======================================

Test:  resetting name to valid name again should clear errors
Has  Unknown Test

======================================

Test:  should hide form after submit
Has  Magic Number Test

======================================

Test:  should produce "no bob" error after setting name to "Bobby"
Has  Magic Number Test

======================================

Test:  should be ok again with valid name
Has  Unknown Test

======================================

Test:  should display correct title
Has  Magic Number Test

======================================

Test:  should display the ICU plural expression
Has  Magic Number Test

======================================

Test:  should display the ICU select expression
Has  Magic Number Test

======================================

Test:  should display the nested expression
Has  Magic Number Test

======================================

Test:  should add 123 to the parent list
Has  Magic Number Test

======================================

Test:  should delete item
Has  Unknown Test

======================================

Test:  should log buy the item
Has  Unknown Test

======================================

Test:  should save item for later
Has  Unknown Test

======================================

Test:  should display Current customer: Maria
Has  Magic Number Test

======================================

Test:  should display The sum of 1 + 1 is not 4.
Has  Magic Number Test

======================================

Test:  should display Expression Context
Has  Magic Number Test

======================================

Test:  should display a list of customers
Has  Magic Number Test

======================================

Test:  should open correctly
Has  Magic Number Test

======================================

Test:  should show 4 heroes
Has  Magic Number Test

======================================

Test:  should be able to chain and compose pipes
Has  Magic Number Test

======================================

Test:  should support flying heroes (pure) 
Has  Magic Number Test

======================================

Test:  should support flying heroes (impure) 
Has  Magic Number Test

======================================

Test:  should show an async hero message
Has  Magic Number Test

======================================

Test:  should display four phone pictures
Has  Magic Number Test

======================================

Test:  should display Disabled button
Has  Magic Number Test

======================================

Test:  should display Binding to a property of a directive
Has  Magic Number Test

======================================

Test:  should display blue
Has  Magic Number Test

======================================

Test:  should display Your item is: lamp
Has  Magic Number Test

======================================

Test:  should display Your item is: parentItem
Has  Magic Number Test

======================================

Test:  should display a ul
Has  Magic Number Test

======================================

Test:  should display a ul containing phone
Has  Magic Number Test

======================================

Test:  should display Malicious content
Has  Magic Number Test

======================================

Test:  should add an alias field when the Add Alias button is clicked
Has  Magic Number Test

======================================

Test:  should update the displayed form value when form inputs are updated
Has  Magic Number Test

======================================

Test:  shows basic flower emoji
Has  Magic Number Test

======================================

Test:  shows basic leaf emoji
Has  Magic Number Test

======================================

Test:  shows tulip in host child
Has  Magic Number Test

======================================

Test:  saves changed crisis details
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  saves changed hero details
Has  Magic Number Test

======================================

Test:  sees preloaded modules
Has  Magic Number Test

======================================

Test:  sees the secondary route
Has  Magic Number Test

======================================

Test:  should display Crisis Center button
Has  Magic Number Test

======================================

Test:  should display Heroes button
Has  Magic Number Test

======================================

Test:  should show a list of links
Has  Magic Number Test

======================================

Test:  should create component
Has  EmptyTest

======================================

Test:  undefined
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  has top heroes
Has  Magic Number Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  can switch to Heroes view
Has  Magic Number Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  displays correctly styled buttons
Has  Conditional Test Logic

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  first div should show hero name with *ngIf
Has  Magic Number Test

======================================

Test:  first li should show hero name with *ngFor
Has  Magic Number Test

======================================

Test:  ngSwitch have two <happy-hero> instances
Has  Magic Number Test

======================================

Test:  should toggle *ngIf="hero" with a button
Has  Magic Number Test

======================================

Test:  appUnless should show 3 paragraph (A)s and (B)s at the start
Has  Magic Number Test

======================================

Test:  appUnless should show 1 paragraph (B) after toggling condition
Has  Magic Number Test

======================================

Test:  should log a Calling 123 ... message
Has  Unknown Test

======================================

Test:  should submit form
Has  Magic Number Test

======================================

Test:  should be able to use interpolation with a calculation
Has  Magic Number Test

======================================

Test:  should two-way bind to sizer
Has  Magic Number Test

======================================

Test:  should navigate to "Dashboard" immediately
Has  Unknown Test

======================================

Test:  should navigate to "About" on click
Has  Unknown Test

======================================

Test:  should navigate to "About" w/ browser location URL change
Has  Unknown Test

======================================

Test:  should navigate to "Heroes" on click
Has  Unknown Test

======================================

Test:  can navigate to "Heroes" w/ browser location URL change
Has  Unknown Test

======================================

Test:  can get RouterLinks from template
Has  Magic Number Test

======================================

Test:  can click Heroes link in template
Has  Magic Number Test

======================================

Test:  should NOT have heroes before calling OnInit
Has  Magic Number Test

======================================

Test:  should NOT have heroes immediately after OnInit
Has  Magic Number Test

======================================

Test:  should HAVE heroes after HeroService gets them
Has  Magic Number Test

======================================

Test:  should HAVE heroes
Has  Magic Number Test

======================================

Test:  should DISPLAY heroes
Has  Magic Number Test

======================================

Test:  should run normal test
Has  Unknown Test

======================================

Test:  should run normal async test
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should run async test with task
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should run async test with task
Has  Unknown Test

======================================

Test:  should run async test with successful promise
Has  Exception Handling
Has  Unknown Test

======================================

Test:  should run async test with failed promise
Has  Exception Handling
Has  Unknown Test

======================================

Test:  should run async test with successful delayed Observable
Has  Unknown Test

======================================

Test:  should run async test with successful delayed Observable
Has  Unknown Test

======================================

Test:  should run async test with successful delayed Observable
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should run timeout callback with delay after call tick with millis
Has  Magic Number Test

======================================

Test:  should run new macro task callback with delay after call tick with millis
Has  Magic Number Test

======================================

Test:  should not run new macro task callback with delay after call tick with millis
Has  Magic Number Test

======================================

Test:  should get Date diff correctly in fakeAsync
Has  Magic Number Test

======================================

Test:  should get Date diff correctly in fakeAsync with rxjs scheduler
Has  Magic Number Test

======================================

Test:  should auto enter fakeAsync
Has  Magic Number Test

======================================

Test:  should wait until promise.then is called
Has  Exception Handling

======================================

Test:  #getPromiseValue should return value from a promise
Has  Exception Handling

======================================

Test:  #getValue should return stubbed value from a spy
Has  Magic Number Test

======================================

Test:  #getValue should return stubbed value from a spy
Has  Magic Number Test

======================================

Test:  test should wait for ValueService.getPromiseValue
Has  Exception Handling

======================================

Test:  should allow the use of fakeAsync
Has  Exception Handling

======================================

Test:  #getValue should return stubbed value from a spy
Has  Magic Number Test

======================================

Test:  should create a nested component bound to inputs/outputs
Has  Magic Number Test

======================================

Test:  should support entering text in input box (ngModel)
Has  Exception Handling

======================================

Test:  can examine attached directives and listeners
Has  Magic Number Test

======================================

Test:  can access template local variables as references
Has  Magic Number Test

======================================

Test:  child component called OnChanges once
Has  Magic Number Test

======================================

Test:  changed parent value flows to child
Has  Magic Number Test

======================================

Test:  changed child value flows to parent
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should have called `getHero`
Has  Magic Number Test

======================================

Test:  should save stub hero change
Has  Magic Number Test

======================================

Test:  should display 1st hero's name
Has  Exception Handling

======================================

Test:  should display 1st hero's name
Has  Exception Handling

======================================

Test:  should display heroes
Has  Magic Number Test

======================================

Test:  should navigate to selected hero detail on click
Has  Magic Number Test

======================================

Test:  should return expected heroes (HttpClient called once)
Has  Magic Number Test

======================================

Test:  should be OK returning no heroes
Has  Magic Number Test

======================================

Test:  should turn 404 into a user-friendly error
Has  Magic Number Test

======================================

Test:  should return expected heroes (called multiple times)
Has  Magic Number Test

======================================

Test:  should turn 404 error into user-facing error
Has  Magic Number Test

======================================

Test:  can test multiple requests
Has  Magic Number Test

======================================

Test:  can test for 404 error
Has  Magic Number Test

======================================

Test:  should be able to generate blob data from canvas
Has  Magic Number Test

======================================

Test:  should have three highlighted elements
Has  Magic Number Test

======================================

Test:  should have `HighlightDirective` in 1st <h2> providerTokens
Has  Magic Number Test

======================================

Test:  should change font size texts
Has  Magic Number Test

======================================

Test:  emits inspector event
Has  Magic Number Test

======================================

Test:  should emit a selectedFrame when emitSelectedFrame is called
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should emit getLatestComponentExplorerView event on refresh with view query no properties
Has  Magic Number Test

======================================

Test:  should not call application operations view source if no frames are detected
Has  Magic Number Test

======================================

Test:  should not call application operations view source if a frame is selected that does not have a unique url on the page
Has  Magic Number Test

======================================

Test:  should call application operations view source if a frame is selected that has a unique url on the page
Has  Magic Number Test

======================================

Test:  should not call application operations select dom element if no frames are detected
Has  Magic Number Test

======================================

Test:  should not call application operations select dom element if a frame is selected that does not have a unique url on the page
Has  Magic Number Test

======================================

Test:  should call application operations select dom element if a frame is selected that has a unique url on the page
Has  Magic Number Test

======================================

Test:  should not call application operations inspect if no frames are detected
Has  Magic Number Test

======================================

Test:  should not call application operations inspect if a frame is selected that does not have a unique url on the page
Has  Magic Number Test

======================================

Test:  should call application operations inspect if a frame is selected that has a unique url on the page
Has  Magic Number Test

======================================

Test:  should return new and old items
Has  Magic Number Test

======================================

Test:  should not return comment nodes when not requested
Has  Magic Number Test

======================================

Test:  should not break nesting with nested comment nodes
Has  Magic Number Test

======================================

Test:  should index a forest
Has  Magic Number Test

======================================

Test:  should register directive inputs, outputs, and state
Has  Magic Number Test

======================================

Test:  should detect changes in the collection
Has  Magic Number Test

======================================

Test:  should return empty filter if the query is invalid
Has  Magic Number Test

======================================

Test:  should return proper result with duration
Has  Magic Number Test

======================================

Test:  should return proper result with source
Has  Magic Number Test

======================================

Test:  should return proper result with composite filters
Has  Magic Number Test

======================================

Test:  should ignore invalid operators
Has  Magic Number Test

======================================

Test:  should consider decimal values in durations queries with a ms suffix
Has  Magic Number Test

======================================

Test:  should consider negation
Has  Magic Number Test

======================================

Test:  should filter results with a source query
Has  Magic Number Test

======================================

Test:  should filter results with a duration query
Has  Magic Number Test

======================================

Test:  should work with composite selectors
Has  Magic Number Test

======================================

Test:  should work with invalid arguments
Has  Magic Number Test

======================================

Test:  should work with negation
Has  Magic Number Test

======================================

Test:  should work with negation and composite expressions
Has  Magic Number Test

======================================

Test:  add frame for simple case
Has  Magic Number Test

======================================

Test:  add frame for deeply nested records
Has  Magic Number Test

======================================

Test:  should merge frames when nesting matches
Has  Magic Number Test

======================================

Test:  should merge frames when nesting does not match
Has  Magic Number Test

======================================

Test:  calculates value with  no lifecycle hooks
Has  Magic Number Test

======================================

Test:  calculates value with 0 change detection and existing lifecycle hooks
Has  Magic Number Test

======================================

Test:  calculates value with non 0 change detection and one lifecycle hook
Has  Magic Number Test

======================================

Test:  calculates value with non 0 change detection and multiple lifecycle hooks
Has  Magic Number Test

======================================

Test:  has only components
Has  Magic Number Test

======================================

Test:  has only directives
Has  Magic Number Test

======================================

Test:  has a component and a directive
Has  Magic Number Test

======================================

Test:  has a component and multiple directives
Has  Magic Number Test

======================================

Test:  calculates value with  no lifecycle hooks
Has  Magic Number Test

======================================

Test:  calculates value with 0 change detection and existing lifecycle hooks
Has  Magic Number Test

======================================

Test:  calculates value with non 0 change detection and one lifecycle hook
Has  Magic Number Test

======================================

Test:  calculates value with non 0 change detection and multiple lifecycle hooks
Has  Magic Number Test

======================================

Test:  should calculate the framerate from passed duration
Has  Magic Number Test

======================================

Test:  should add frame when contentScriptConnected event is emitted
Has  Magic Number Test

======================================

Test:  should remove frame when contentScriptDisconnected event is emitted
Has  Magic Number Test

======================================

Test:  should add event listeners to window on start inspecting
Has  Magic Number Test

======================================

Test:  should remove event listeners from window on stop inspecting
Has  Magic Number Test

======================================

Test:  should cancel events from mouse after start inspecting
Has  Magic Number Test

======================================

Test:  should extract trees without structural directives
Has  Magic Number Test

======================================

Test:  should skip nodes without directives
Has  Magic Number Test

======================================

Test:  should go all the way to the root element to look up for nodes
Has  Magic Number Test

======================================

Test:  should show hydration overlay with svg
Has  Magic Number Test

======================================

Test:  should show hydration overlay without svg (too small)
Has  Magic Number Test

======================================

Test:  should show hydration overlay and selected component overlay at the same time 
Has  Magic Number Test

======================================

Test:  should show overlay
Has  Magic Number Test

======================================

Test:  should work with empty queries
Has  Magic Number Test

======================================

Test:  should collect not specified but existing props below level
Has  Magic Number Test

======================================

Test:  both getters and setters should be readonly
Has  Magic Number Test

======================================

Test:  should return the precise path requested
Has  Magic Number Test

======================================

Test:  both setter and getter would get a (...) as preview
Has  Magic Number Test

======================================

Test:  should recognize Ivy apps
Has  Magic Number Test

======================================

Test:  should return true for empty arrays
Has  Unknown Test

======================================

Test:  should return true for arrays with equal value numbers
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should return true for arrays with equal value strings
Has  Unknown Test

======================================

Test:  should return true for arrays with equal value booleans
Has  Unknown Test

======================================

Test:  should return false for arrays of different numbers
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should return false for arrays of different strings
Has  Unknown Test

======================================

Test:  should return false for arrays of different booleans
Has  Unknown Test

======================================

Test:  should return false for arrays with different values
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should return false for arrays with different lengths
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should setup tab object in the tab manager
Has  Conditional Test Logic

======================================

Test:  should set frame connection as enabled when an enableFrameConnection message is recieved
Has  Conditional Test Logic

======================================

Test:  should pipe messages from the content script and devtools script to each other when the content script frame is enabled
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  should not pipe messages from the content script and devtools script to each other when the content script frame is disabled
Has  Conditional Test Logic

======================================

Test:  should set backendReady when the contentPort recieves the backendReady message
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  should set tab.devtools to null when the devtoolsPort disconnects
Has  Conditional Test Logic

======================================

Test:  should setup tab object in the tab manager
Has  Conditional Test Logic

======================================

Test:  should setup message and disconnect listeners on devtools and content script ports
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should set the correct frame connection as enabled when an enableFrameConnection message is recieved
Has  Conditional Test Logic

======================================

Test:  should pipe messages from the correct content script and devtools script when that content script frame is enabled
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  should properly query for greet components
Has  Magic Number Test

======================================

Test:  should emit an event for the click output
Has  Magic Number Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should display "Hello Foo!" via name attribute
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should display "Hello Foo!" via name attribute
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should display "Hello Foo!" via name attribute
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should work for update
Has  Unknown Test

======================================

Test:  should work for update
Has  Unknown Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should work for create
Has  Unknown Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should work for ng2
Has  Magic Number Test

======================================

Test:  should run for ng2
Has  Unknown Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should run for ng2
Has  Unknown Test

======================================

Test:  should render and interact to update and detect changes
Has  Magic Number Test

======================================

Test:  should render and run noop change detection
Has  Magic Number Test

======================================

Test:  should run create benchmark
Has  Unknown Test

======================================

Test:  should run update benchmark
Has  Unknown Test

======================================

Test:  should run detect changes benchmark
Has  Unknown Test

======================================

Test:  should work for createOnly
Has  Unknown Test

======================================

Test:  should work for destroy
Has  Unknown Test

======================================

Test:  should work for createDestroy
Has  Unknown Test

======================================

Test:  should work for update
Has  Unknown Test

======================================

Test:  should work for detectChanges
Has  Unknown Test

======================================

Test:  should wait via frameworkStabilizer
Has  Exception Handling

======================================

Test:  should work
Has  Unknown Test

======================================

Test:  should work
Has  Unknown Test

======================================

Test:  should load in the templateUrl relative to the my-cmp component
Has  Magic Number Test

======================================

Test:  should load in the styleUrls relative to the my-cmp component
Has  Magic Number Test

======================================

Test:  should list out the current collection of items
Has  Magic Number Test

======================================

Test:  should map sources
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should build the AST without any errors and warnings
Has  Magic Number Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should throw an error if not all offsets are between 0 and 1
Has  Magic Number Test

======================================

Test:  should produce a balanced series of keyframes given a sequence of animate steps
Has  Magic Number Test

======================================

Test:  should fill in missing starting steps when a starting `style()` value is not used
Has  Magic Number Test

======================================

Test:  should merge successive style() calls together before an animate() call
Has  Magic Number Test

======================================

Test:  should not merge in successive style() calls to the previous animate() keyframe
Has  Magic Number Test

======================================

Test:  should not produce extra timelines when multiple sequences are used within each other
Has  Magic Number Test

======================================

Test:  should create a new timeline after a sequence if group() or keyframe() commands are used within
Has  Magic Number Test

======================================

Test:  should push the start of a sequence if a delay option is provided
Has  Magic Number Test

======================================

Test:  should allow a float-based delay value to be used
Has  Magic Number Test

======================================

Test:  should allow params to be substituted even if they are not defaulted in a reusable animation
Has  Magic Number Test

======================================

Test:  should substitute in timing values
Has  Magic Number Test

======================================

Test:  should allow multiple substitutions to occur within the same style value
Has  Magic Number Test

======================================

Test:  should substitute in values that are defined as parameters for inner areas of a sequence
Has  Magic Number Test

======================================

Test:  should substitute in values that are defined as parameters for reusable animations
Has  Magic Number Test

======================================

Test:  should produce a sub timeline when `keyframes()` is used within a sequence
Has  Magic Number Test

======================================

Test:  should propagate inner keyframe style data to the parent timeline if used afterwards
Has  Magic Number Test

======================================

Test:  should feed in starting data into inner keyframes if used in an style step beforehand
Has  Magic Number Test

======================================

Test:  should combine the starting time + the given delay as the delay value for the animated keyframes
Has  Magic Number Test

======================================

Test:  should not leak in additional styles used later on after keyframe styles have already been declared
Has  Magic Number Test

======================================

Test:  should respect offsets if provided directly within the style data
Has  Magic Number Test

======================================

Test:  should respect offsets if provided directly within the style metadata type
Has  Magic Number Test

======================================

Test:  should properly tally style data within a group() for use in a follow-up animate() step
Has  Magic Number Test

======================================

Test:  should support groups with nested sequences
Has  Magic Number Test

======================================

Test:  should respect delays after group entries
Has  Magic Number Test

======================================

Test:  should respect delays after multiple calls to group()
Has  Magic Number Test

======================================

Test:  should push the start of a group if a delay option is provided
Has  Magic Number Test

======================================

Test:  should delay the query operation if a delay option is provided
Has  Magic Number Test

======================================

Test:  should delay the query operation if a delay option is provided
Has  Magic Number Test

======================================

Test:  should properly combine an easing value with a delay into a set of three keyframes
Has  Magic Number Test

======================================

Test:  should allow easing values to exist for each animate() step
Has  Magic Number Test

======================================

Test:  should produce a top-level timeline only for the duration that is set as before a group kicks in
Has  Magic Number Test

======================================

Test:  should offset group() and keyframe() timelines with a delay which is the current time of the previous player when called
Has  Magic Number Test

======================================

Test:  should create an empty animation if there are zero animation steps
Has  Magic Number Test

======================================

Test:  should produce an animation from start to end between the to and from styles if there are animate steps in between
Has  Magic Number Test

======================================

Test:  should produce an animation from start to end between the to and from styles if there are animate steps in between with an easing value
Has  Magic Number Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should group errors together for an animation trigger
Has  Magic Number Test

======================================

Test:  should throw an error when a transition within a trigger contains an invalid expression
Has  Magic Number Test

======================================

Test:  should throw an error if an animation alias is used that is not yet supported
Has  Magic Number Test

======================================

Test:  should construct a trigger based on the states and transition data
Has  Magic Number Test

======================================

Test:  should allow multiple state values to use the same styles
Has  Magic Number Test

======================================

Test:  should find the first transition that matches
Has  Magic Number Test

======================================

Test:  should find a transition with a `*` value
Has  Magic Number Test

======================================

Test:  should support bi-directional transition expressions
Has  Magic Number Test

======================================

Test:  should support multiple transition statements in one string
Has  Magic Number Test

======================================

Test:  should support transition-level animation variable params
Has  Magic Number Test

======================================

Test:  should substitute variable params provided directly within the transition match
Has  Magic Number Test

======================================

Test:  should match `true` and `false` given boolean values
Has  Magic Number Test

======================================

Test:  should match `1` and `0` given boolean values
Has  Magic Number Test

======================================

Test:  should match `true` and `false` state styles on a `1 <=> 0` boolean transition given boolean values
Has  Magic Number Test

======================================

Test:  should match `1` and `0` state styles on a `true <=> false` boolean transition given boolean values
Has  Magic Number Test

======================================

Test:  should alias the :enter transition as void => *
Has  Magic Number Test

======================================

Test:  should alias the :leave transition as * => void
Has  Magic Number Test

======================================

Test:  should normalize number-based dimensional properties to use a `px` suffix if missing
Has  Magic Number Test

======================================

Test:  should not normalize non-dimensional properties with `px` values, but only convert them to string
Has  Magic Number Test

======================================

Test:  should allow `perspective` to be a numerical property
Has  Magic Number Test

======================================

Test:  should animate a timeline
Has  Magic Number Test

======================================

Test:  should normalize the style values that are animateTransitioned within an a timeline animation
Has  Magic Number Test

======================================

Test:  should normalize `*` values
Has  Magic Number Test

======================================

Test:  should invoke a transition based on a property change
Has  Magic Number Test

======================================

Test:  should not queue an animation if the property value has not changed at all
Has  Magic Number Test

======================================

Test:  should cleanup all inner state that's tied to an element once removed
Has  Magic Number Test

======================================

Test:  should create and recreate a namespace for a host element with the same component source
Has  Magic Number Test

======================================

Test:  should clear child node data when a parent node with leave transition is removed
Has  Magic Number Test

======================================

Test:  should listen to the onStart operation for the animation
Has  Magic Number Test

======================================

Test:  should listen to the onDone operation for the animation
Has  Magic Number Test

======================================

Test:  should retain event listeners and call them for successive animation state changes
Has  Magic Number Test

======================================

Test:  should only fire event listener changes for when the corresponding trigger changes state
Has  Magic Number Test

======================================

Test:  should allow a listener to be deregistered, but only after a flush occurs
Has  Magic Number Test

======================================

Test:  should trigger a listener callback with an AnimationEvent argument
Has  Magic Number Test

======================================

Test:  should persist the styles on the element as actual styles once the animation is complete
Has  Magic Number Test

======================================

Test:  should allow two animation transitions with different triggers to animate in parallel
Has  Magic Number Test

======================================

Test:  should cancel a previously running animation when a follow-up transition kicks off on the same trigger
Has  Magic Number Test

======================================

Test:  should pass in the previously running players into the follow-up transition player when cancelled
Has  Magic Number Test

======================================

Test:  should cancel all existing players if a removal animation is set to occur
Has  Magic Number Test

======================================

Test:  should default to using styling from the `*` state if a matching state is not found
Has  Magic Number Test

======================================

Test:  should treat `void` as `void`
Has  Magic Number Test

======================================

Test:  should normalize the style values that are animateTransitioned within an a transition animation
Has  Magic Number Test

======================================

Test:  should throw an error when normalization fails within a transition animation
Has  Exception Handling

======================================

Test:  should still apply state-styling to an element even if it is not yet inserted into the DOM
Has  Magic Number Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should allow setting position before animation is started
Has  Magic Number Test

======================================

Test:  should continue playing animations from setPosition
Has  Magic Number Test

======================================

Test:  should getPosition of an empty group
Has  Magic Number Test

======================================

Test:  should getPosition of a single player in a group
Has  Magic Number Test

======================================

Test:  should getPosition based on the longest player in the group
Has  Magic Number Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should listen on start and done on the animation builder's player after it has been reset
Has  Magic Number Test

======================================

Test:  should be able to build
Has  Unknown Test

======================================

Test:  should schedule a microtask and not call an async timeout
Has  Magic Number Test

======================================

Test:  undefined
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  should merge descriptions
Has  Exception Handling

======================================

Test:  should merge all beginMeasure calls
Has  Exception Handling

======================================

Test:  undefined
Has  Exception Handling

======================================

Test:  should not force gc and mark the timeline
Has  Exception Handling

======================================

Test:  should force gc and mark the timeline
Has  Exception Handling

======================================

Test:  should mark and aggregate events in between the marks
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should mark and aggregate events since navigationStart
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should ignore navigationStart if ignoreNavigation is set
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should restart timing
Has  Exception Handling

======================================

Test:  should loop and aggregate until the end mark is present
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should store events after the end mark for the next call
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should measure forced gc
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should restart after the forced gc if needed
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should calculate mean frame time
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should throw if no start event
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should throw if no end event
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should throw if trying to capture twice
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should throw if trying to capture when frame capture is disabled
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should throw if frame capture is enabled, but nothing is captured
Has  Exception Handling

======================================

Test:  should calculate best and worst frame time
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should calculate percentage of smoothness to be good
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should calculate percentage of smoothness to be bad
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report a single interval
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should sum up multiple intervals
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should ignore not started intervals
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should ignore not ended intervals
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should ignore nested intervals
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should ignore events from different processed as the start mark
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should mark a run as invalid if the start and end marks are different
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should support scriptTime metric
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should support renderTime metric
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should support renderTimeInScript metric
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should support gcTime/gcAmount metric
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should support majorGcTime metric
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should support gcTimeInScript metric
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should support pureScriptTime = scriptTime-gcTime-renderTime
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report received data since last navigationStart
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report count of requests sent since last navigationStart
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report micro metrics
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should ignore micro metrics that were not specified
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report micro metric averages
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should stop measuring when all properties have numeric values
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should print the sample id, description and table header
Has  Magic Number Test

======================================

Test:  should print a table row
Has  Magic Number Test

======================================

Test:  should print the table footer and stats when there is a valid sample
Has  Magic Number Test

======================================

Test:  should print the coefficient of variation only when it is meaningful
Has  Magic Number Test

======================================

Test:  should write all data into a file
Has  Magic Number Test

======================================

Test:  should reportMeasureValues to all
Has  Exception Handling

======================================

Test:  should reportSample to call
Has  Exception Handling

======================================

Test:  should set SampleDescription.id
Has  Exception Handling

======================================

Test:  should merge SampleDescription.description
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should fill SampleDescription.metrics from the Metric
Has  Exception Handling

======================================

Test:  should provide Options.EXECUTE
Has  Exception Handling

======================================

Test:  should provide Options.PREPARE
Has  Exception Handling

======================================

Test:  should provide Options.MICRO_METRICS
Has  Exception Handling

======================================

Test:  should overwrite providers per sample call
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should call the prepare and execute callbacks using WebDriverAdapter.waitFor
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should call prepare, beginMeasure, execute, endMeasure for every iteration
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should call execute, endMeasure for every iteration if there is no prepare callback
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should only collect metrics for execute and ignore metrics from prepare
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should call the validator for every execution and store the valid sample
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report the metric values
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should calculate the mean
Has  Magic Number Test

======================================

Test:  should calculate the standard deviation
Has  Magic Number Test

======================================

Test:  should calculate the coefficient of variation
Has  Magic Number Test

======================================

Test:  should calculate the regression slope
Has  Magic Number Test

======================================

Test:  should return sampleSize and metric as description
Has  Magic Number Test

======================================

Test:  should return null while the completeSample is smaller than the given size
Has  Magic Number Test

======================================

Test:  should return null while the regression slope is < 0
Has  Magic Number Test

======================================

Test:  should return the last sampleSize runs when the regression slope is ==0
Has  Magic Number Test

======================================

Test:  should return the last sampleSize runs when the regression slope is >0
Has  Magic Number Test

======================================

Test:  should return sampleSize as description
Has  Magic Number Test

======================================

Test:  should return null while the completeSample is smaller than the given size
Has  Magic Number Test

======================================

Test:  should return the last sampleSize runs when it has at least the given size
Has  Magic Number Test

======================================

Test:  should provide the extension that matches the capabilities
Has  Exception Handling

======================================

Test:  should throw if there is no match
Has  Exception Handling

======================================

Test:  should force gc via window.gc()
Has  Exception Handling

======================================

Test:  should clear the perf logs and mark the timeline via performance.mark() on the first call
Has  Exception Handling

======================================

Test:  should mark the timeline via performance.mark() on the second call
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should mark the timeline via performance.mark()
Has  Exception Handling

======================================

Test:  should mark the timeline via performance.mark() with start and end of a test
Has  Exception Handling

======================================

Test:  should normalize times to ms and forward ph and pid event properties
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should normalize "tdur" to "dur"
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report FunctionCall events as "script"
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report EvaluateScript events as "script"
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report minor gc
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report minor gc with GC amount
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report major gc
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report major gc with GC amount
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  undefined
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  undefined
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should ignore FunctionCalls from webdriver
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should ignore FunctionCalls with empty scriptName
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report navigationStart
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report receivedData
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report sendRequest
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should execute a dummy script before reading them
Has  Exception Handling

======================================

Test:  undefined
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report ImplThreadRenderingStats as frame event
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should not report ImplThreadRenderingStats with zero frames
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should throw when ImplThreadRenderingStats contains more than one frame
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report begin timestamps
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report end timestamps
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should throw an error on buffer overflow
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should mark the timeline via console.time()
Has  Exception Handling

======================================

Test:  should mark the timeline via console.timeEnd()
Has  Exception Handling

======================================

Test:  should mark the timeline via console.time() and console.timeEnd()
Has  Exception Handling

======================================

Test:  should execute a dummy script before reading them
Has  Exception Handling

======================================

Test:  should report FunctionCall records as "script"
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should ignore FunctionCalls from webdriver
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report begin time
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report end timestamps
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  undefined
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should walk children
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  with string params
Has  Unknown Test

======================================

Test:  with an array of string params
Has  Unknown Test

======================================

Test:  with number params
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  with an array of number params
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  with boolean params
Has  Unknown Test

======================================

Test:  with an array of boolean params
Has  Unknown Test

======================================

Test:  with an array of params of different types
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  that returns a stream of events
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  with a json body of 0
Has  Magic Number Test

======================================

Test:  with body
Has  Magic Number Test

======================================

Test:  without body
Has  Magic Number Test

======================================

Test:  with properly set method and callback
Has  Unknown Test

======================================

Test:  emits status immediately
Has  Magic Number Test

======================================

Test:  should be able to retry
Has  Magic Number Test

======================================

Test:  handles a text response
Has  Magic Number Test

======================================

Test:  handles a json response
Has  Magic Number Test

======================================

Test:  handles a blank json response
Has  Magic Number Test

======================================

Test:  handles a json error response
Has  Magic Number Test

======================================

Test:  handles a json error response with XSSI prefix
Has  Magic Number Test

======================================

Test:  handles a json string response
Has  Magic Number Test

======================================

Test:  handles a json response with an XSSI prefix
Has  Magic Number Test

======================================

Test:  handles a blob with a mime type
Has  Magic Number Test

======================================

Test:  emits real errors via the error path
Has  Magic Number Test

======================================

Test:  are emitted for download progress
Has  Magic Number Test

======================================

Test:  include ResponseHeader with headers and status
Has  Magic Number Test

======================================

Test:  from the response URL
Has  Magic Number Test

======================================

Test:  from X-Request-URL header if the response URL is not present
Has  Magic Number Test

======================================

Test:  falls back on Request.url if neither are available
Has  Magic Number Test

======================================

Test:  by normalizing 0 status to 200 if a body is present
Has  Magic Number Test

======================================

Test:  by leaving 0 status as 0 if a body is not present
Has  Magic Number Test

======================================

Test:  handles a request with callback call wrapped in promise
Has  Unknown Test

======================================

Test:  handles an error response properly
Has  Magic Number Test

======================================

Test:  prevents the script from executing when the request is cancelled
Has  Magic Number Test

======================================

Test:  when request method is not JSONP
Has  EmptyTest

======================================

Test:  when response type is not json
Has  EmptyTest

======================================

Test:  when headers are set in request
Has  EmptyTest

======================================

Test:  when callback is never called
Has  Magic Number Test

======================================

Test:  allows interceptors to inject HttpClient
Has  Unknown Test

======================================

Test:  should configure HttpClient
Has  Unknown Test

======================================

Test:  should not be enabled by default
Has  Unknown Test

======================================

Test:  should be enabled when using withJsonpSupport()
Has  Unknown Test

======================================

Test:  should have independent HTTP setups if not explicitly specified
Has  Unknown Test

======================================

Test:  should connect child to parent configuration if specified
Has  Unknown Test

======================================

Test:  withFetch
Has  Magic Number Test

======================================

Test:  should not warn if fetch is not configured when running in a browser
Has  Magic Number Test

======================================

Test:  should warn during SSR if fetch is not configured
Has  Magic Number Test

======================================

Test:  handles numbers as json
Has  Magic Number Test

======================================

Test:  accepts a falsy body
Has  Magic Number Test

======================================

Test:  should stop storing HTTP calls in `TransferState` after application becomes stable
Has  Magic Number Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should skip cache when specified
Has  Unknown Test

======================================

Test:  should not cache headers
Has  Magic Number Test

======================================

Test:  should cache with headers
Has  Magic Number Test

======================================

Test:  should not cache POST by default
Has  Unknown Test

======================================

Test:  should cache POST with the transferCache option
Has  Unknown Test

======================================

Test:  should not cache request that requires authorization by default
Has  Unknown Test

======================================

Test:  should not cache request that requires proxy authorization by default
Has  Unknown Test

======================================

Test:  should cache POST with the differing body in string form
Has  Unknown Test

======================================

Test:  should cache POST with the differing body in object form
Has  Unknown Test

======================================

Test:  should cache POST with the differing body in URLSearchParams form
Has  Unknown Test

======================================

Test:  should skip storing in transfer cache when platform is browser
Has  Unknown Test

======================================

Test:  should cache because of global filter
Has  Unknown Test

======================================

Test:  should not cache because of global filter
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should cache with headers
Has  Magic Number Test

======================================

Test:  should cache without headers because overridden
Has  Magic Number Test

======================================

Test:  should cache normally when there is no mapping defined for the origin
Has  Unknown Test

======================================

Test:  emits status immediately
Has  Magic Number Test

======================================

Test:  handles a text response
Has  Magic Number Test

======================================

Test:  handles a json response
Has  Magic Number Test

======================================

Test:  handles a blank json response
Has  Magic Number Test

======================================

Test:  handles a json error response
Has  Magic Number Test

======================================

Test:  handles a json error response with XSSI prefix
Has  Magic Number Test

======================================

Test:  handles a json string response
Has  Magic Number Test

======================================

Test:  handles a json response with an XSSI prefix
Has  Magic Number Test

======================================

Test:  avoids abort a request when fetch operation is completed
Has  Exception Handling

======================================

Test:  are emitted for download progress
Has  Magic Number Test

======================================

Test:  are emitted for upload progress
Has  Magic Number Test

======================================

Test:  are emitted when both upload and download progress are available
Has  Magic Number Test

======================================

Test:  are emitted even if length is not computable
Has  Magic Number Test

======================================

Test:  include ResponseHeader with headers and status
Has  Magic Number Test

======================================

Test:  do not cause headers to be re-parsed on main response
Has  Magic Number Test

======================================

Test:  from XHR.responsesURL
Has  Magic Number Test

======================================

Test:  from X-Request-URL header if XHR.responseURL is not present
Has  Magic Number Test

======================================

Test:  falls back on Request.url if neither are available
Has  Magic Number Test

======================================

Test:  by normalizing 0 status to 200 if a body is present
Has  Magic Number Test

======================================

Test:  by leaving 0 status as 0 if a body is not present
Has  Magic Number Test

======================================

Test:  does not re-parse if document.cookie has not changed
Has  Magic Number Test

======================================

Test:  re-parses if document.cookie changes
Has  Magic Number Test

======================================

Test:  throws if no request matches
Has  Exception Handling

======================================

Test:  throws if no request matches the exact parameters
Has  Exception Handling

======================================

Test:  throws if no request matches with several requests received
Has  Exception Handling

======================================

Test:  throws if there are open requests when verify is called
Has  Exception Handling

======================================

Test:  should clean up when the directive is destroyed
Has  Unknown Test

======================================

Test:  should add classes specified in an object literal
Has  Unknown Test

======================================

Test:  should add classes specified in an object literal without change in class names
Has  Unknown Test

======================================

Test:  should add and remove classes based on changes in object literal values
Has  Unknown Test

======================================

Test:  should add and remove classes based on changes to the expression object
Has  Unknown Test

======================================

Test:  should add and remove classes based on reference changes to the expression object
Has  Unknown Test

======================================

Test:  should remove active classes when expression evaluates to null
Has  Unknown Test

======================================

Test:  should remove active classes when expression evaluates to undefined
Has  Unknown Test

======================================

Test:  should allow multiple classes per expression
Has  Unknown Test

======================================

Test:  should split by one or more spaces between classes
Has  Unknown Test

======================================

Test:  should add classes specified in a list literal
Has  Unknown Test

======================================

Test:  should add and remove classes based on changes to the expression
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should add and remove classes when a reference changes
Has  Unknown Test

======================================

Test:  should take initial classes into account when a reference changes
Has  Unknown Test

======================================

Test:  should ignore empty or blank class names
Has  Unknown Test

======================================

Test:  should trim blanks from class names
Has  Unknown Test

======================================

Test:  should allow multiple classes per item in arrays
Has  Unknown Test

======================================

Test:  should add and remove classes if the set instance changed
Has  Unknown Test

======================================

Test:  should add classes specified in a string literal
Has  Unknown Test

======================================

Test:  should add and remove classes based on changes to the expression
Has  Unknown Test

======================================

Test:  should remove active classes when switching from string to null
Has  Unknown Test

======================================

Test:  should remove active classes when switching from string to undefined
Has  Unknown Test

======================================

Test:  should take initial classes into account when switching from string to null
Has  Unknown Test

======================================

Test:  should take initial classes into account when switching from string to undefined
Has  Unknown Test

======================================

Test:  should ignore empty and blank strings
Has  Unknown Test

======================================

Test:  should co-operate with the class attribute
Has  Unknown Test

======================================

Test:  should co-operate with the interpolated class attribute
Has  Unknown Test

======================================

Test:  should co-operate with the interpolated class attribute when interpolation changes
Has  Unknown Test

======================================

Test:  should co-operate with the class attribute and binding to it
Has  Unknown Test

======================================

Test:  should co-operate with the class attribute and class.name binding
Has  Unknown Test

======================================

Test:  should co-operate with initial class and class attribute binding when binding changes
Has  Unknown Test

======================================

Test:  should not write to the native node unless the bound expression has changed
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should not write to the native node when values are the same (obj reference change)
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should not write to the native node when values are the same (array reference change)
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should not add css class when bound initial class is removed by ngClass binding
Has  Unknown Test

======================================

Test:  should not add css class when static initial class is removed by ngClass binding
Has  Unknown Test

======================================

Test:  should mix class and ngClass bindings with the same value
Has  Magic Number Test

======================================

Test:  should reflect initial elements
Has  Unknown Test

======================================

Test:  should reflect added elements
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should reflect removed elements
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should reflect moved elements
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should reflect a mix of all changes (additions/removals/moves)
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should iterate over an array of objects
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should gracefully handle nulls
Has  Unknown Test

======================================

Test:  should gracefully handle ref changing to null and back
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should works with duplicates
Has  Unknown Test

======================================

Test:  should repeat over nested arrays
Has  Unknown Test

======================================

Test:  should repeat over nested arrays with no intermediate element
Has  Unknown Test

======================================

Test:  should repeat over nested ngIf that are the last node in the ngFor template
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should allow of saving the collection
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should display indices correctly
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should display count correctly
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should display first item correctly
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should display last item correctly
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should display even items correctly
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should display odd items correctly
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should allow to use a custom template
Has  Unknown Test

======================================

Test:  should use a default template if a custom one is null
Has  Unknown Test

======================================

Test:  should use a custom template when both default and a custom one are present
Has  Unknown Test

======================================

Test:  should console.warn if trackBy is not a function
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should track by identity when trackBy is to `null` or `undefined`
Has  Unknown Test

======================================

Test:  should update implicit local variable on view
Has  Unknown Test

======================================

Test:  should move items around and keep them updated 
Has  Unknown Test

======================================

Test:  should handle added and removed items properly when tracking by index
Has  Unknown Test

======================================

Test:  should be available as a standalone directive
Has  Magic Number Test

======================================

Test:  should be available as a standalone directive using an `NgFor` alias
Has  Magic Number Test

======================================

Test:  should work in a template attribute
Has  Magic Number Test

======================================

Test:  should toggle node when condition changes
Has  Magic Number Test

======================================

Test:  should handle nested if correctly
Has  Magic Number Test

======================================

Test:  should update several nodes with if
Has  Magic Number Test

======================================

Test:  should not add the element twice if the condition goes from truthy to truthy
Has  Magic Number Test

======================================

Test:  should create `<link>` element when the image priority attr is true
Has  Conditional Test Logic

======================================

Test:  should not create a preload `<link>` element when src is already preloaded.
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should error when the number of preloaded images is larger than the limit
Has  Conditional Test Logic

======================================

Test:  should not hit max preload limit when not on the server
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should set `loading` and `fetchpriority` attributes before `src`
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should throw if `ngSrc` contains a `blob:` URL
Has  Conditional Test Logic

======================================

Test:  should throw for empty ngSrcSet
Has  Conditional Test Logic

======================================

Test:  should throw for invalid ngSrcSet
Has  Conditional Test Logic

======================================

Test:  should throw if ngSrcset exceeds the density cap
Has  Conditional Test Logic

======================================

Test:  should throw if ngSrcset exceeds the density cap with multiple digits
Has  Conditional Test Logic

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should log a warning if the priority attribute is used too often
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should warn if a large inline placeholder is supplied
Has  Magic Number Test

======================================

Test:  should throw if the placeholder height exceeds the threshold
Has  Magic Number Test

======================================

Test:  should throw if the placeholder width exceeds the threshold
Has  Magic Number Test

======================================

Test:  should log a warning if there is no preconnect link for a priority image
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not log a warning if there is no preconnect link, but the image is not set as a priority
Has  Magic Number Test

======================================

Test:  should log a warning if there is a preconnect, but it doesn't match the priority image
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should log a warning if there is no matching preconnect link for a priority image, but there is a preload tag
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not log a warning if there is a matching preconnect link for a priority image (with an extra `/` at the end)
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should warn if there is no image loader but using Imgix URL
Has  Magic Number Test

======================================

Test:  should warn if there is no image loader but using ImageKit URL
Has  Magic Number Test

======================================

Test:  should warn if there is no image loader but using Cloudinary URL
Has  Magic Number Test

======================================

Test:  should warn if there is no image loader but using Netlify URL
Has  Magic Number Test

======================================

Test:  should NOT warn if there is a custom loader but using CDN URL
Has  Magic Number Test

======================================

Test:  should warn if there is no image loader but `ngSrcset` is present
Has  Magic Number Test

======================================

Test:  should warn if there is no image loader but `loaderParams` is present
Has  Magic Number Test

======================================

Test:  should set `src` using the image loader provided via the `IMAGE_LOADER` token to compose src URL
Has  Magic Number Test

======================================

Test:  should use the image loader to update `src` if `ngSrc` updated
Has  Magic Number Test

======================================

Test:  should use the image loader to update `srcset` if `ngSrc` updated
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should pass absolute URLs defined in the `ngSrc` to custom image loaders provided via the `IMAGE_LOADER` token
Has  Magic Number Test

======================================

Test:  should pass data payload from loaderParams to custom image loaders
Has  Magic Number Test

======================================

Test:  should pass nested data payloads from loaderParams to custom image loaders
Has  Magic Number Test

======================================

Test:  should pass data payload from loaderParams to loader when generating srcsets
Has  Magic Number Test

======================================

Test:  should pass data payload from loaderParams to loader when generating responsive srcsets
Has  Magic Number Test

======================================

Test:  should set `src` to an image URL that does not include a default width parameter
Has  Conditional Test Logic

======================================

Test:  should display the template according to the exact value
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should display the template according to the exact numeric value
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should not throw when ngPluralCase contains expressions
Has  Magic Number Test

======================================

Test:  should be applicable to <ng-container> elements
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should display the template according to the category
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should default to other when no matches are found
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should prioritize value matches over category matches
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should be available as a standalone directive
Has  Magic Number Test

======================================

Test:  should add styles specified in an object literal
Has  Unknown Test

======================================

Test:  should add and change styles specified in an object expression
Has  Unknown Test

======================================

Test:  should remove styles with a null expression
Has  Unknown Test

======================================

Test:  should remove styles with an undefined expression
Has  Unknown Test

======================================

Test:  should add and remove styles specified using style.unit notation
Has  Unknown Test

======================================

Test:  should add and remove styles which names are not dash-cased
Has  Unknown Test

======================================

Test:  should update styles using style.unit notation when unit changes
Has  Unknown Test

======================================

Test:  should change styles specified in an object expression
Has  Unknown Test

======================================

Test:  should remove styles when deleting a key in an object expression
Has  Unknown Test

======================================

Test:  should co-operate with the style attribute
Has  Unknown Test

======================================

Test:  should co-operate with the style.[styleName]="expr" special-case in the compiler
Has  Unknown Test

======================================

Test:  should not write to the native node unless the bound expression has changed
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should correctly update style with units (.px) when the model is set to number
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should handle CSS variables
Has  Conditional Test Logic

======================================

Test:  should be available as a standalone directive
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should switch amongst when values
Has  Unknown Test

======================================

Test:  should switch amongst when values with fallback to default
Has  Unknown Test

======================================

Test:  should support multiple whens with the same value
Has  Unknown Test

======================================

Test:  should use === to match cases
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should switch amongst when values
Has  Unknown Test

======================================

Test:  should create the default case if there is no other case
Has  Unknown Test

======================================

Test:  should allow defaults before cases
Has  Unknown Test

======================================

Test:  should support nested NgSwitch on ng-container with ngTemplateOutlet
Has  Unknown Test

======================================

Test:  should accept the component as the context
Has  Unknown Test

======================================

Test:  should do nothing if templateRef is `null`
Has  Unknown Test

======================================

Test:  should insert content specified by TemplateRef
Has  Unknown Test

======================================

Test:  should clear content if TemplateRef becomes `null`
Has  Unknown Test

======================================

Test:  should swap content if TemplateRef changes
Has  Unknown Test

======================================

Test:  should display template if context is `null`
Has  Unknown Test

======================================

Test:  should reflect initial context and changes
Has  Unknown Test

======================================

Test:  should reflect user defined `$implicit` property in the context
Has  Unknown Test

======================================

Test:  should reflect context re-binding
Has  Unknown Test

======================================

Test:  should not try to update null / undefined context when context changes but template stays the same
Has  Unknown Test

======================================

Test:  should not try to update null / undefined context when template changes
Has  Unknown Test

======================================

Test:  should not try to update context on undefined view
Has  Unknown Test

======================================

Test:  should be able to specify an injector
Has  Unknown Test

======================================

Test:  should re-render if the injector changes
Has  Unknown Test

======================================

Test:  should override providers from parent component using custom injector
Has  Unknown Test

======================================

Test:  should support int
Has  Magic Number Test

======================================

Test:  should format each component correctly
Has  Unknown Test

======================================

Test:  should format common multi component patterns
Has  Unknown Test

======================================

Test:  should format invalid in IE ISO date
Has  EmptyTest

======================================

Test:  should format invalid in Safari ISO date
Has  EmptyTest

======================================

Test:  should format correctly with iso strings that contain time
Has  EmptyTest

======================================

Test:  should not assume UTC for iso strings in Safari if the timezone is not defined
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should remove bidi control characters
Has  EmptyTest
Has  Magic Number Test

======================================

Test:  should not round fractional seconds
Has  Magic Number Test

======================================

Test:  should return correct value for numbers
Has  Magic Number Test

======================================

Test:  should throw if minFractionDigits is explicitly higher than maxFractionDigits
Has  Magic Number Test

======================================

Test:  should return the correct format for es-US
Has  Magic Number Test

======================================

Test:  should support non-normalized locales
Has  Magic Number Test

======================================

Test:  should return correct value for numbers
Has  Magic Number Test

======================================

Test:  should support non-normalized locales
Has  Magic Number Test

======================================

Test:  should return correct value for numbers
Has  Magic Number Test

======================================

Test:  should support any currency code name
Has  Magic Number Test

======================================

Test:  should round to the default number of digits if no digitsInfo
Has  Magic Number Test

======================================

Test:  should support non-normalized locales
Has  Magic Number Test

======================================

Test:  should return the correct value
Has  Magic Number Test

======================================

Test:  should return the full short list of days after manipulations
Has  Magic Number Test

======================================

Test:  should return the full abbreviated list of month after manipulations
Has  Magic Number Test

======================================

Test:  should return plural cases for the provided locale
Has  Magic Number Test

======================================

Test:  should return plural cases for the provided locale
Has  Magic Number Test

======================================

Test:  should return the correct values for the "en" locale
Has  Magic Number Test

======================================

Test:  should return the correct values for the "ro" locale
Has  Magic Number Test

======================================

Test:  should return the correct values for the "sr" locale
Has  Magic Number Test

======================================

Test:  should return the default value for a locale with no rule
Has  Magic Number Test

======================================

Test:  should return plural category
Has  Magic Number Test

======================================

Test:  should return discrete cases
Has  Magic Number Test

======================================

Test:  should fallback to other when the case is not present
Has  Magic Number Test

======================================

Test:  should report an error when the "other" category is not present
Has  Magic Number Test

======================================

Test:  should construct an image loader with the given path
Has  Magic Number Test

======================================

Test:  should load a low quality image when a placeholder is requested
Has  Magic Number Test

======================================

Test:  should work after using location.historyGo()
Has  Magic Number Test

======================================

Test:  should add registered functions to urlChangeListeners
Has  Magic Number Test

======================================

Test:  should unregister a URL change listener and unsubscribe from URL changes when the root view is removed
Has  Magic Number Test

======================================

Test:  should only notify listeners once when multiple listeners are registered
Has  Magic Number Test

======================================

Test:  disposes
Has  Magic Number Test

======================================

Test:  push URL
Has  Magic Number Test

======================================

Test:  replace URL
Has  Magic Number Test

======================================

Test:  push URL with state
Has  Magic Number Test

======================================

Test:  replace URL with state
Has  Magic Number Test

======================================

Test:  push URL with hashchange
Has  Magic Number Test

======================================

Test:  replace URL with hashchange
Has  Magic Number Test

======================================

Test:  push URL with info
Has  Magic Number Test

======================================

Test:  replace URL with info
Has  Magic Number Test

======================================

Test:  push URL with handler
Has  Magic Number Test

======================================

Test:  replace URL with handler
Has  Magic Number Test

======================================

Test:  deferred commit
Has  Magic Number Test

======================================

Test:  deferred commit early resolve
Has  Magic Number Test

======================================

Test:  deferred commit during dispatch throws
Has  Magic Number Test

======================================

Test:  deferred commit with immediate throws
Has  Magic Number Test

======================================

Test:  deferred commit twice throws
Has  Magic Number Test

======================================

Test:  deferred commit resolves on finished
Has  Magic Number Test

======================================

Test:  push with interruption
Has  Magic Number Test

======================================

Test:  replace with interruption
Has  Magic Number Test

======================================

Test:  push with handler reject
Has  Magic Number Test

======================================

Test:  replace with reject
Has  Magic Number Test

======================================

Test:  traverses back
Has  Magic Number Test

======================================

Test:  traverses forward
Has  Magic Number Test

======================================

Test:  traverses back with hashchange
Has  Magic Number Test

======================================

Test:  traverses forward with hashchange
Has  Magic Number Test

======================================

Test:  traverses with info
Has  Magic Number Test

======================================

Test:  traverses with history state
Has  Magic Number Test

======================================

Test:  traverses with handler
Has  Magic Number Test

======================================

Test:  traverses with interruption
Has  Magic Number Test

======================================

Test:  traverses with reject
Has  Magic Number Test

======================================

Test:  traverses to non-existent
Has  Magic Number Test

======================================

Test:  back
Has  Magic Number Test

======================================

Test:  back with info
Has  Magic Number Test

======================================

Test:  back out of bounds
Has  Magic Number Test

======================================

Test:  forward
Has  Magic Number Test

======================================

Test:  forward with info
Has  Magic Number Test

======================================

Test:  forward out of bounds
Has  Magic Number Test

======================================

Test:  traversal current entry
Has  Magic Number Test

======================================

Test:  second traversal to same entry
Has  Magic Number Test

======================================

Test:  queues traverses
Has  Magic Number Test

======================================

Test:  queues traverses after navigate
Has  Magic Number Test

======================================

Test:  push URL
Has  Magic Number Test

======================================

Test:  replace URL
Has  Magic Number Test

======================================

Test:  push URL with history state
Has  Magic Number Test

======================================

Test:  replace URL with history state
Has  Magic Number Test

======================================

Test:  push URL with hashchange
Has  Magic Number Test

======================================

Test:  replace URL with hashchange
Has  Magic Number Test

======================================

Test:  push URL with handler
Has  Magic Number Test

======================================

Test:  replace URL with handler
Has  Magic Number Test

======================================

Test:  push with interruption
Has  Magic Number Test

======================================

Test:  replace with interruption
Has  Magic Number Test

======================================

Test:  push with handler reject
Has  Magic Number Test

======================================

Test:  replace with reject
Has  Magic Number Test

======================================

Test:  go back
Has  Magic Number Test

======================================

Test:  go forward
Has  Magic Number Test

======================================

Test:  go back with hashchange
Has  Magic Number Test

======================================

Test:  go back with history state
Has  Magic Number Test

======================================

Test:  go forward with hashchange
Has  Magic Number Test

======================================

Test:  go with handler
Has  Magic Number Test

======================================

Test:  go with interruption
Has  Magic Number Test

======================================

Test:  go with reject
Has  Magic Number Test

======================================

Test:  go synchronously
Has  Magic Number Test

======================================

Test:  go out of bounds
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  go queues
Has  Magic Number Test

======================================

Test:  go queues both directions
Has  Magic Number Test

======================================

Test:  go queues with back
Has  Magic Number Test

======================================

Test:  go queues with forward
Has  Magic Number Test

======================================

Test:  go after synchronous navigate
Has  Magic Number Test

======================================

Test:  should return the latest available value
Has  Magic Number Test

======================================

Test:  should return same value when nothing has changed since the last call
Has  Magic Number Test

======================================

Test:  should dispose of the existing subscription when subscribing to a new observable
Has  Magic Number Test

======================================

Test:  should request a change detection check upon receiving a new value
Has  Magic Number Test

======================================

Test:  should not track signal reads in subscriptions
Has  Magic Number Test

======================================

Test:  should dispose of the existing subscription
Has  Magic Number Test

======================================

Test:  should infer the type from the subscribable
Has  Unknown Test

======================================

Test:  should not support numbers
Has  Magic Number Test

======================================

Test:  should not support numbers
Has  Magic Number Test

======================================

Test:  should not support numbers
Has  Magic Number Test

======================================

Test:  should support int
Has  Magic Number Test

======================================

Test:  should support ISO string
Has  EmptyTest

======================================

Test:  should use "mediumDate" as the default format if no format is provided
Has  EmptyTest

======================================

Test:  should give precedence to the passed in format
Has  EmptyTest

======================================

Test:  should not support bad arguments
Has  Magic Number Test

======================================

Test:  should be available as a standalone pipe
Has  Magic Number Test

======================================

Test:  should return an empty text if value is null or undefined
Has  Magic Number Test

======================================

Test:  should work with mutable objects
Has  Magic Number Test

======================================

Test:  should be available as a standalone pipe
Has  Magic Number Test

======================================

Test:  should transform a basic dictionary
Has  Magic Number Test

======================================

Test:  should order by alpha
Has  Magic Number Test

======================================

Test:  should order by numerical
Has  Magic Number Test

======================================

Test:  should order by numerical and alpha
Has  Magic Number Test

======================================

Test:  should reorder when compareFn changes
Has  Magic Number Test

======================================

Test:  should transform a basic Map
Has  Magic Number Test

======================================

Test:  should order by alpha
Has  Magic Number Test

======================================

Test:  should order by numerical
Has  Magic Number Test

======================================

Test:  should order by numerical and alpha
Has  Magic Number Test

======================================

Test:  should order by complex types with compareFn
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should reorder when compareFn changes
Has  Magic Number Test

======================================

Test:  should be available as a standalone pipe
Has  Magic Number Test

======================================

Test:  should sort undefined keys to the end
Has  Magic Number Test

======================================

Test:  should sort null keys to the end
Has  Magic Number Test

======================================

Test:  should sort strings in alpha ascending
Has  Magic Number Test

======================================

Test:  should sort numbers in numerical ascending
Has  Magic Number Test

======================================

Test:  should sort boolean in false (0) -> true (1)
Has  Magic Number Test

======================================

Test:  should sort numbers as strings in numerical ascending
Has  Magic Number Test

======================================

Test:  should return correct value for numbers
Has  Magic Number Test

======================================

Test:  should be available as a standalone pipe
Has  Magic Number Test

======================================

Test:  should return correct value for numbers
Has  Magic Number Test

======================================

Test:  should be available as a standalone pipe
Has  Magic Number Test

======================================

Test:  should return correct value for numbers
Has  Magic Number Test

======================================

Test:  should use the injected default currency code if none is provided
Has  Magic Number Test

======================================

Test:  should support any currency code name
Has  Magic Number Test

======================================

Test:  should warn if you are using the v4 signature
Has  Magic Number Test

======================================

Test:  should be available as a standalone pipe
Has  Magic Number Test

======================================

Test:  should support strings
Has  Magic Number Test

======================================

Test:  should support lists
Has  Magic Number Test

======================================

Test:  should support readonly lists
Has  Magic Number Test

======================================

Test:  should not support other objects
Has  Magic Number Test

======================================

Test:  should return null if the value is null
Has  Magic Number Test

======================================

Test:  should return null if the value is undefined
Has  Magic Number Test

======================================

Test:  should return all items after START index when START is positive and END is omitted
Has  Magic Number Test

======================================

Test:  should return last START items when START is negative and END is omitted
Has  Magic Number Test

======================================

Test:  should return all items between START and END index when START and END are positive
Has  Magic Number Test

======================================

Test:  should return all items between START and END from the end when START and END are negative
Has  Magic Number Test

======================================

Test:  should return an empty value if START is greater than END
Has  Magic Number Test

======================================

Test:  should return an empty value if START greater than input length
Has  Magic Number Test

======================================

Test:  should return entire input if START is negative and greater than input length
Has  Magic Number Test

======================================

Test:  should not modify the input list
Has  Magic Number Test

======================================

Test:  should work with mutable arrays
Has  Magic Number Test

======================================

Test:  should still allow scrolling if scrollRestoration is not writable
Has  Magic Number Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should scroll when element with matching id is found
Has  Magic Number Test

======================================

Test:  should scroll when anchor with matching name is found
Has  Magic Number Test

======================================

Test:  should not scroll when no matching element is found
Has  Magic Number Test

======================================

Test:  should scroll when element with matching id is found inside the shadow DOM
Has  Magic Number Test

======================================

Test:  should scroll when anchor with matching name is found inside the shadow DOM
Has  Magic Number Test

======================================

Test:  should support state
Has  Magic Number Test

======================================

Test:  should provide common getters
Has  Magic Number Test

======================================

Test:  path() should not break on numeric values
Has  Magic Number Test

======================================

Test:  path() should allow using 0 as path
Has  Magic Number Test

======================================

Test:  search() should accept object
Has  Magic Number Test

======================================

Test:  search() should copy object
Has  Magic Number Test

======================================

Test:  search() should remove multiple parameters
Has  Magic Number Test

======================================

Test:  search() should accept numeric keys
Has  Magic Number Test

======================================

Test:  search() should handle single value
Has  Magic Number Test

======================================

Test:  hash() should accept numeric parameter
Has  Magic Number Test

======================================

Test:  hash() should allow using 0
Has  Magic Number Test

======================================

Test:  should set $$state and return itself
Has  Magic Number Test

======================================

Test:  should set state
Has  Magic Number Test

======================================

Test:  should allow to set both URL and state
Has  Magic Number Test

======================================

Test:  should allow to mix state and various URL functions
Has  Magic Number Test

======================================

Test:  should add registered functions to changeListeners
Has  Magic Number Test

======================================

Test:  should visit every node
Has  Magic Number Test

======================================

Test:  should tokenize a simple identifier
Has  Magic Number Test

======================================

Test:  should tokenize "this"
Has  Magic Number Test

======================================

Test:  should tokenize a dotted identifier
Has  Magic Number Test

======================================

Test:  should tokenize a private identifier
Has  Magic Number Test

======================================

Test:  should tokenize a property access with private identifier
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize an operator
Has  Magic Number Test

======================================

Test:  should tokenize an indexed operator
Has  Magic Number Test

======================================

Test:  should tokenize a safe indexed operator
Has  Magic Number Test

======================================

Test:  should tokenize numbers
Has  Magic Number Test

======================================

Test:  should tokenize numbers within index ops
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize simple quoted strings
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize quoted strings with escaped quotes
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize a string
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize undefined
Has  Magic Number Test

======================================

Test:  should ignore whitespace
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize quoted string
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize escaped quoted string
Has  Magic Number Test

======================================

Test:  should tokenize unicode
Has  Magic Number Test

======================================

Test:  should tokenize relation
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize statements
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize function invocation
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize simple method invocations
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize method invocation
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize safe function invocation
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize a safe method invocations
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize number
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize number with exponent
Has  Magic Number Test

======================================

Test:  should return exception for invalid exponent
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize number starting with a dot
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should throw error on invalid unicode
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize ?. as operator
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize ?? as operator
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize number with separator
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should tokenize number starting with an underscore as an identifier
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should throw error for invalid number separators
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should parse numbers
Has  Unknown Test

======================================

Test:  should parse strings
Has  Unknown Test

======================================

Test:  should parse null
Has  Unknown Test

======================================

Test:  should parse undefined
Has  Unknown Test

======================================

Test:  should parse unary - and + expressions
Has  Unknown Test

======================================

Test:  should parse unary ! expressions
Has  Unknown Test

======================================

Test:  should parse postfix ! expression
Has  Unknown Test

======================================

Test:  should parse multiplicative expressions
Has  Unknown Test

======================================

Test:  should parse additive expressions
Has  Unknown Test

======================================

Test:  should parse relational expressions
Has  Unknown Test

======================================

Test:  should parse equality expressions
Has  Unknown Test

======================================

Test:  should parse strict equality expressions
Has  Unknown Test

======================================

Test:  should parse expressions
Has  Unknown Test

======================================

Test:  should parse grouped expressions
Has  Unknown Test

======================================

Test:  should ignore comments in expressions
Has  Unknown Test

======================================

Test:  should retain // in string literals
Has  Unknown Test

======================================

Test:  should parse an empty string
Has  Unknown Test

======================================

Test:  should parse array
Has  Unknown Test

======================================

Test:  should parse map
Has  Unknown Test

======================================

Test:  should only allow identifier, string, or keyword as map key
Has  Unknown Test

======================================

Test:  should parse property shorthand declarations
Has  Unknown Test

======================================

Test:  should not allow property shorthand declaration on quoted properties
Has  Unknown Test

======================================

Test:  should not infer invalid identifiers as shorthand property declarations
Has  Unknown Test

======================================

Test:  should parse field access
Has  Unknown Test

======================================

Test:  should error for private identifiers with implicit receiver
Has  Unknown Test

======================================

Test:  should only allow identifier or keyword as member names
Has  Unknown Test

======================================

Test:  should parse safe field access
Has  Unknown Test

======================================

Test:  should parse incomplete safe field accesses
Has  Unknown Test

======================================

Test:  should parse property writes
Has  Unknown Test

======================================

Test:  should recover on empty rvalues
Has  Unknown Test

======================================

Test:  should recover on incomplete rvalues
Has  Unknown Test

======================================

Test:  should recover on missing properties
Has  Unknown Test

======================================

Test:  should error on writes after a property write
Has  Magic Number Test

======================================

Test:  should parse calls
Has  Unknown Test

======================================

Test:  should parse an EmptyExpr with a correct span for a trailing empty argument
Has  Magic Number Test

======================================

Test:  should parse safe calls
Has  Unknown Test

======================================

Test:  should parse keyed reads
Has  Unknown Test

======================================

Test:  should parse safe keyed reads
Has  Unknown Test

======================================

Test:  should recover on missing keys
Has  Unknown Test

======================================

Test:  should recover on incomplete expression keys
Has  Unknown Test

======================================

Test:  should recover on unterminated keys
Has  Unknown Test

======================================

Test:  should recover on incomplete and unterminated keys
Has  Unknown Test

======================================

Test:  should parse keyed writes
Has  Unknown Test

======================================

Test:  should report on safe keyed writes
Has  Unknown Test

======================================

Test:  should recover on empty rvalues
Has  Unknown Test

======================================

Test:  should recover on incomplete rvalues
Has  Unknown Test

======================================

Test:  should recover on missing keys
Has  Unknown Test

======================================

Test:  should recover on incomplete expression keys
Has  Unknown Test

======================================

Test:  should recover on unterminated keys
Has  Unknown Test

======================================

Test:  should recover on incomplete and unterminated keys
Has  Magic Number Test

======================================

Test:  should error on writes after a keyed write
Has  Magic Number Test

======================================

Test:  should recover on parenthesized empty rvalues
Has  Magic Number Test

======================================

Test:  should parse ternary/conditional expressions
Has  Unknown Test

======================================

Test:  should report incorrect ternary operator syntax
Has  Unknown Test

======================================

Test:  should support field assignments
Has  Unknown Test

======================================

Test:  should report on safe field assignments
Has  Unknown Test

======================================

Test:  should support array updates
Has  Unknown Test

======================================

Test:  should error when using pipes
Has  Unknown Test

======================================

Test:  should report when encountering interpolation
Has  Unknown Test

======================================

Test:  should report an unexpected token
Has  Unknown Test

======================================

Test:  should report reasonable error for unconsumed tokens
Has  Unknown Test

======================================

Test:  should report a missing expected token
Has  Unknown Test

======================================

Test:  should parse pipes
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should parse an incomplete pipe with a source span that includes trailing whitespace
Has  Magic Number Test

======================================

Test:  should only allow identifier or keyword as formatter names
Has  Unknown Test

======================================

Test:  should not crash when prefix part is not tokenizable
Has  Unknown Test

======================================

Test:  should report chain expressions
Has  Unknown Test

======================================

Test:  should report assignment
Has  Unknown Test

======================================

Test:  should report when encountering interpolation
Has  Unknown Test

======================================

Test:  should parse conditional expression
Has  Unknown Test

======================================

Test:  should ignore comments in bindings
Has  Unknown Test

======================================

Test:  should retain // in string literals
Has  Unknown Test

======================================

Test:  should expose object shorthand information in AST
Has  Magic Number Test

======================================

Test:  should parse key and value
Has  Conditional Test Logic

======================================

Test:  should store the templateUrl
Has  Magic Number Test

======================================

Test:  should report unexpected token when encountering interpolation
Has  Unknown Test

======================================

Test:  should not parse malformed interpolations as strings
Has  Magic Number Test

======================================

Test:  should parse no prefix/suffix interpolation
Has  Magic Number Test

======================================

Test:  should parse interpolation inside quotes
Has  Magic Number Test

======================================

Test:  should parse interpolation with interpolation characters inside quotes
Has  Unknown Test

======================================

Test:  should parse interpolation with escaped quotes
Has  Unknown Test

======================================

Test:  should parse interpolation with escaped backslashes
Has  Unknown Test

======================================

Test:  should report empty interpolation expressions
Has  Unknown Test

======================================

Test:  should produce an empty expression ast for empty interpolations
Has  Magic Number Test

======================================

Test:  should parse conditional expression
Has  Unknown Test

======================================

Test:  should parse expression with newline characters
Has  Unknown Test

======================================

Test:  should support custom interpolation
Has  Magic Number Test

======================================

Test:  should ignore comments in interpolation expressions
Has  Unknown Test

======================================

Test:  should retain // in single quote strings
Has  Unknown Test

======================================

Test:  should retain // in double quote strings
Has  Unknown Test

======================================

Test:  should ignore comments after string literals
Has  Unknown Test

======================================

Test:  should retain // in complex strings
Has  Unknown Test

======================================

Test:  should retain // in nested, unterminated strings
Has  Unknown Test

======================================

Test:  should ignore quotes inside a comment
Has  Unknown Test

======================================

Test:  should report when encountering pipes
Has  Unknown Test

======================================

Test:  should report when encountering interpolation
Has  Unknown Test

======================================

Test:  should report when encountering field write
Has  Unknown Test

======================================

Test:  should throw if a pipe is used inside a conditional
Has  Unknown Test

======================================

Test:  should throw if a pipe is used inside a call
Has  Unknown Test

======================================

Test:  should throw if a pipe is used inside a call to a property access
Has  Unknown Test

======================================

Test:  should throw if a pipe is used inside a call to a safe property access
Has  Unknown Test

======================================

Test:  should throw if a pipe is used inside a property access
Has  Unknown Test

======================================

Test:  should throw if a pipe is used inside a keyed read expression
Has  Unknown Test

======================================

Test:  should throw if a pipe is used inside a safe property read
Has  Unknown Test

======================================

Test:  should throw if a pipe is used inside a non-null assertion
Has  Unknown Test

======================================

Test:  should throw if a pipe is used inside a prefix not expression
Has  Unknown Test

======================================

Test:  should throw if a pipe is used inside a binary expression
Has  Unknown Test

======================================

Test:  should wrap a literal primitive
Has  Magic Number Test

======================================

Test:  should be able to recover from an extra paren
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should be able to recover from an extra bracket
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should be able to recover from a missing )
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should be able to recover from a missing ]
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should be able to recover from a missing selector
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should be able to recover from a missing selector in a array literal
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should retain the offsets of an interpolation
Has  Magic Number Test

======================================

Test:  should retain the offsets into the expression AST of interpolations
Has  Magic Number Test

======================================

Test:  should support arbitrary string size
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should work on well known inputs with meaning
Has  Magic Number Test

======================================

Test:  should support arbitrary string size
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should merge empty messages
Has  Magic Number Test

======================================

Test:  should console.warn if we use i18n comments
Has  Unknown Test

======================================

Test:  should merge empty attributes
Has  Magic Number Test

======================================

Test:  should parse the translations only once
Has  Magic Number Test

======================================

Test:  should translate templates
Has  Unknown Test

======================================

Test:  should translate templates (with CRLF line endings)
Has  Unknown Test

======================================

Test:  should translate templates
Has  Unknown Test

======================================

Test:  should translate templates (with CRLF line endings)
Has  Unknown Test

======================================

Test:  should translate templates
Has  Unknown Test

======================================

Test:  should translate templates (with CRLF line endings)
Has  Unknown Test

======================================

Test:  should visit all nodes
Has  Magic Number Test

======================================

Test:  should be able to parse non-angular xtb files without error
Has  Magic Number Test

======================================

Test:  should translate html-like plain text
Has  Magic Number Test

======================================

Test:  should translate a message with placeholder referencing messages
Has  Conditional Test Logic

======================================

Test:  should use the original message or throw when a translation is not found
Has  Magic Number Test

======================================

Test:  should report missing translation with MissingTranslationStrategy.Warning
Has  Magic Number Test

======================================

Test:  should report missing referenced message
Has  Conditional Test Logic

======================================

Test:  should work regardless the namespace
Has  Magic Number Test

======================================

Test:  should parse root level text nodes
Has  Magic Number Test

======================================

Test:  should parse text nodes inside regular elements
Has  Magic Number Test

======================================

Test:  should parse text nodes inside <ng-template> elements
Has  Magic Number Test

======================================

Test:  should parse CDATA
Has  Magic Number Test

======================================

Test:  should normalize line endings within CDATA
Has  Magic Number Test

======================================

Test:  should parse root level elements
Has  Magic Number Test

======================================

Test:  should parse elements inside of regular elements
Has  Magic Number Test

======================================

Test:  should parse elements inside  <ng-template> elements
Has  Magic Number Test

======================================

Test:  should support void elements
Has  Magic Number Test

======================================

Test:  should close void elements on text nodes
Has  Magic Number Test

======================================

Test:  should support optional end tags
Has  Magic Number Test

======================================

Test:  should support nested elements
Has  Magic Number Test

======================================

Test:  should not wraps elements in a required parent
Has  Magic Number Test

======================================

Test:  should support explicit namespace
Has  Magic Number Test

======================================

Test:  should support implicit namespace
Has  Magic Number Test

======================================

Test:  should propagate the namespace
Has  Magic Number Test

======================================

Test:  should match closing tags case sensitive
Has  Magic Number Test

======================================

Test:  should support self closing void elements
Has  Magic Number Test

======================================

Test:  should support self closing foreign elements
Has  Magic Number Test

======================================

Test:  should ignore LF immediately after textarea, pre and listing
Has  Magic Number Test

======================================

Test:  should normalize line endings in text
Has  Magic Number Test

======================================

Test:  should parse element with JavaScript keyword tag name
Has  Magic Number Test

======================================

Test:  should parse attributes on regular elements case sensitive
Has  Magic Number Test

======================================

Test:  should parse attributes containing interpolation
Has  Magic Number Test

======================================

Test:  should parse attributes containing unquoted interpolation
Has  Magic Number Test

======================================

Test:  should parse bound inputs with expressions containing newlines
Has  Magic Number Test

======================================

Test:  should parse attributes containing encoded entities
Has  Magic Number Test

======================================

Test:  should parse attributes containing unquoted interpolation
Has  Magic Number Test

======================================

Test:  should parse bound inputs with expressions containing newlines
Has  Magic Number Test

======================================

Test:  should decode HTML entities in interpolated attributes
Has  Magic Number Test

======================================

Test:  should normalize line endings within attribute values
Has  Magic Number Test

======================================

Test:  should parse attributes without values
Has  Magic Number Test

======================================

Test:  should parse attributes on svg elements case sensitive
Has  Magic Number Test

======================================

Test:  should parse attributes on <ng-template> elements
Has  Magic Number Test

======================================

Test:  should support namespace
Has  Magic Number Test

======================================

Test:  should support a prematurely terminated interpolation in attribute
Has  Magic Number Test

======================================

Test:  should preserve comments
Has  Magic Number Test

======================================

Test:  should normalize line endings within comments
Has  Magic Number Test

======================================

Test:  should parse out expansion forms
Has  Magic Number Test

======================================

Test:  should normalize line-endings in expansion forms in inline templates if `i18nNormalizeLineEndingsInICUs` is true
Has  Magic Number Test

======================================

Test:  should not normalize line-endings in ICU expressions in external templates when `i18nNormalizeLineEndingsInICUs` is not set
Has  Magic Number Test

======================================

Test:  should normalize line-endings in expansion forms in external templates if `i18nNormalizeLineEndingsInICUs` is true
Has  Magic Number Test

======================================

Test:  should not normalize line-endings in ICU expressions in external templates when `i18nNormalizeLineEndingsInICUs` is not set
Has  Magic Number Test

======================================

Test:  should parse out expansion forms
Has  Magic Number Test

======================================

Test:  should parse out nested expansion forms
Has  Magic Number Test

======================================

Test:  should normalize line endings in nested expansion forms for inline templates, when `i18nNormalizeLineEndingsInICUs` is true
Has  Magic Number Test

======================================

Test:  should not normalize line endings in nested expansion forms for inline templates, when `i18nNormalizeLineEndingsInICUs` is not defined
Has  Magic Number Test

======================================

Test:  should not normalize line endings in nested expansion forms for external templates, when `i18nNormalizeLineEndingsInICUs` is not set
Has  Magic Number Test

======================================

Test:  should support ICU expressions with cases that contain numbers
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should parse a block
Has  Magic Number Test

======================================

Test:  should parse a block with an HTML element
Has  Magic Number Test

======================================

Test:  should parse a block containing mixed plain text and HTML
Has  Magic Number Test

======================================

Test:  should parse nested blocks
Has  Magic Number Test

======================================

Test:  should infer namespace through block boundary
Has  Magic Number Test

======================================

Test:  should parse an empty block
Has  Magic Number Test

======================================

Test:  should parse a block with void elements
Has  Magic Number Test

======================================

Test:  should close void elements used right before a block
Has  Magic Number Test

======================================

Test:  should report an unclosed block
Has  Magic Number Test

======================================

Test:  should report an unexpected block close
Has  Magic Number Test

======================================

Test:  should report unclosed tags inside of a block
Has  Magic Number Test

======================================

Test:  should report an unexpected closing tag inside a block
Has  Magic Number Test

======================================

Test:  should store the source locations of blocks
Has  Magic Number Test

======================================

Test:  should parse an incomplete block with no parameters
Has  Magic Number Test

======================================

Test:  should parse an incomplete block with no parameters
Has  Magic Number Test

======================================

Test:  should parse a let declaration that is nested in a parent
Has  Magic Number Test

======================================

Test:  should store the location
Has  Magic Number Test

======================================

Test:  should set the start and end source spans
Has  Magic Number Test

======================================

Test:  should decode HTML entities in interpolations
Has  Magic Number Test

======================================

Test:  should support interpolations in text
Has  Magic Number Test

======================================

Test:  should not set the end source span for void elements
Has  Magic Number Test

======================================

Test:  should not set the end source span for multiple void elements
Has  Magic Number Test

======================================

Test:  should not set the end source span for standalone void elements
Has  Magic Number Test

======================================

Test:  should set the end source span for standalone self-closing elements
Has  Magic Number Test

======================================

Test:  should set the end source span for self-closing elements
Has  Magic Number Test

======================================

Test:  should not include leading trivia from the following node of an element in the end source
Has  Magic Number Test

======================================

Test:  should not set the end source span for elements that are implicitly closed
Has  Magic Number Test

======================================

Test:  should support expansion form
Has  Magic Number Test

======================================

Test:  should not report a value span for an attribute without a value
Has  Magic Number Test

======================================

Test:  should report a value span for an attribute with a value
Has  Magic Number Test

======================================

Test:  should report a value span for an unquoted attribute value
Has  Magic Number Test

======================================

Test:  should visit text nodes
Has  Magic Number Test

======================================

Test:  should visit element nodes
Has  Magic Number Test

======================================

Test:  should report unexpected closing tags
Has  Magic Number Test

======================================

Test:  gets correct close tag for parent when a child is not closed
Has  Magic Number Test

======================================

Test:  should parse and report incomplete tags after the tag name
Has  Magic Number Test

======================================

Test:  should parse and report incomplete tags after attribute
Has  Magic Number Test

======================================

Test:  should parse and report incomplete tags after quote
Has  Magic Number Test

======================================

Test:  should report subsequent open tags without proper close tag
Has  Magic Number Test

======================================

Test:  should report closing tag for void elements
Has  Magic Number Test

======================================

Test:  should report self closing html element
Has  Magic Number Test

======================================

Test:  should also report lexer errors
Has  Magic Number Test

======================================

Test:  should remove whitespaces (space, tab, new line) between elements
Has  Magic Number Test

======================================

Test:  should remove whitespaces from child text nodes
Has  Magic Number Test

======================================

Test:  should remove whitespaces from the beginning and end of a template
Has  Magic Number Test

======================================

Test:  should convert &ngsp; to a space and preserve it
Has  Magic Number Test

======================================

Test:  should replace multiple whitespaces with one space
Has  Magic Number Test

======================================

Test:  should remove whitespace inside of blocks
Has  Magic Number Test

======================================

Test:  should not replace &nbsp;
Has  Magic Number Test

======================================

Test:  should not replace sequences of &nbsp;
Has  Magic Number Test

======================================

Test:  should not replace single tab and newline with spaces
Has  Magic Number Test

======================================

Test:  should preserve single whitespaces between interpolations
Has  Magic Number Test

======================================

Test:  should preserve whitespaces around interpolations
Has  Magic Number Test

======================================

Test:  should preserve whitespaces around ICU expansions
Has  Magic Number Test

======================================

Test:  should preserve whitespaces inside <pre> elements
Has  Magic Number Test

======================================

Test:  should skip whitespace trimming in <textarea>
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should handle the plural expansion form
Has  Magic Number Test

======================================

Test:  should handle nested expansion forms
Has  Magic Number Test

======================================

Test:  should correctly set source code positions
Has  Magic Number Test

======================================

Test:  should handle other special forms
Has  Magic Number Test

======================================

Test:  should parse an expansion form as a tag single child
Has  Magic Number Test

======================================

Test:  should parse an expansion forms inside of blocks
Has  Magic Number Test

======================================

Test:  should only process the text within the range
Has  Magic Number Test

======================================

Test:  should take into account preceding (non-processed) lines and columns
Has  Magic Number Test

======================================

Test:  should not normalize line-endings in ICU expressions when `i18nNormalizeLineEndingsInICUs` is not defined
Has  Magic Number Test

======================================

Test:  should not normalize line endings in nested expansion forms when `i18nNormalizeLineEndingsInICUs` is not defined
Has  Magic Number Test

======================================

Test:  should not normalize line-endings in ICU expressions when `i18nNormalizeLineEndingsInICUs` is not defined
Has  Magic Number Test

======================================

Test:  should not normalize line endings in nested expansion forms when `i18nNormalizeLineEndingsInICUs` is not defined
Has  Magic Number Test

======================================

Test:  should not normalize line-endings in ICU expressions when `i18nNormalizeLineEndingsInICUs` is not defined
Has  Magic Number Test

======================================

Test:  should not normalize line endings in nested expansion forms when `i18nNormalizeLineEndingsInICUs` is not defined
Has  Magic Number Test

======================================

Test:  should not normalize line-endings in ICU expressions when `i18nNormalizeLineEndingsInICUs` is not defined
Has  Magic Number Test

======================================

Test:  should not normalize line endings in nested expansion forms when `i18nNormalizeLineEndingsInICUs` is not defined
Has  Magic Number Test

======================================

Test:  should add source files to the source map
Has  Magic Number Test

======================================

Test:  should generate a valid mapping
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should be able to shift the content
Has  Magic Number Test

======================================

Test:  should use the default source file for the first character
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should use an explicit mapping for the first character
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should map leading segment without span
Has  Magic Number Test

======================================

Test:  should handle indent
Has  Magic Number Test

======================================

Test:  should coalesce identical span
Has  Magic Number Test

======================================

Test:  should generate unique argument names
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not add more than one strict mode statement if there is already one present
Has  Magic Number Test

======================================

Test:  should throw when mappings are added out of order
Has  Magic Number Test

======================================

Test:  should throw when adding segments before any line is created
Has  Magic Number Test

======================================

Test:  should throw when adding segments referencing unknown sources
Has  Magic Number Test

======================================

Test:  should throw when adding segments with a source url but no position
Has  Magic Number Test

======================================

Test:  should handle comment in interpolation
Has  Magic Number Test

======================================

Test:  should handle whitespace in interpolation
Has  Magic Number Test

======================================

Test:  should handle whitespace and comment in interpolation
Has  Magic Number Test

======================================

Test:  should handle comment in an action binding
Has  Magic Number Test

======================================

Test:  should provide absolute offsets with arbitrary whitespace
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of an expression in a bound text
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of an expression in a bound event
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of an expression in a bound attribute
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of an expression in a template attribute
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a binary expression
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in a binary expression
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a conditional
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in a conditional
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a chain
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in a chain
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a function call
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in a function call
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of an implicit receiver
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of an interpolation
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in an interpolation
Has  Magic Number Test

======================================

Test:  should handle HTML entity before interpolation
Has  Magic Number Test

======================================

Test:  should handle many HTML entities and many interpolations
Has  Magic Number Test

======================================

Test:  should handle interpolation in attribute
Has  Magic Number Test

======================================

Test:  should handle interpolation preceded by HTML entity in attribute
Has  Magic Number Test

======================================

Test:  should handle many interpolation with HTML entities in attribute
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a keyed read
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in a keyed read
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a keyed write
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in a keyed write
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a literal primitive
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a literal array
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in a literal array
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a literal map
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in a literal map
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a method call
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in a method call
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a non-null assert
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in a non-null assert
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a pipe
Has  Magic Number Test

======================================

Test:  should provide absolute offsets expressions in a pipe
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a property read
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in a property read
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a property write
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of an accessed property write
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in a property write
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a "not" prefix
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in a "not" prefix
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a safe method call
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in safe method call
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of a safe property read
Has  Magic Number Test

======================================

Test:  should provide absolute offsets of expressions in safe property read
Has  Magic Number Test

======================================

Test:  should work for simple cases
Has  Magic Number Test

======================================

Test:  should work with multiple bindings
Has  Magic Number Test

======================================

Test:  is correct for variables and placeholders
Has  Magic Number Test

======================================

Test:  is correct for variables and placeholders
Has  Magic Number Test

======================================

Test:  is correct for object literals with shorthand property declarations
Has  Magic Number Test

======================================

Test:  is correct for text nodes
Has  Unknown Test

======================================

Test:  is correct for elements with attributes
Has  Unknown Test

======================================

Test:  is correct for elements with attributes without value
Has  Unknown Test

======================================

Test:  is correct for self-closing elements with trailing whitespace
Has  Unknown Test

======================================

Test:  is correct for bound text nodes
Has  Unknown Test

======================================

Test:  is correct for bound properties
Has  Unknown Test

======================================

Test:  is correct for bound properties without value
Has  Unknown Test

======================================

Test:  is correct for bound properties via bind- 
Has  Unknown Test

======================================

Test:  is correct for bound properties via {{...}}
Has  Unknown Test

======================================

Test:  is correct for bound properties via data-
Has  Unknown Test

======================================

Test:  is correct for bound properties via @
Has  Unknown Test

======================================

Test:  is correct for bound properties via animation-
Has  Unknown Test

======================================

Test:  is correct for bound properties via @ without value
Has  Unknown Test

======================================

Test:  is correct for * directives
Has  Unknown Test

======================================

Test:  is correct for <ng-template>
Has  Unknown Test

======================================

Test:  is correct for reference via #...
Has  Unknown Test

======================================

Test:  is correct for reference with name
Has  Unknown Test

======================================

Test:  is correct for reference via ref-...
Has  Unknown Test

======================================

Test:  is correct for reference via data-ref-...
Has  Unknown Test

======================================

Test:  is correct for variables via let-...
Has  Unknown Test

======================================

Test:  is correct for variables via data-let-...
Has  Unknown Test

======================================

Test:  is correct for attributes
Has  Unknown Test

======================================

Test:  is correct for bound attributes
Has  Unknown Test

======================================

Test:  is correct for attribute and bound attributes
Has  Unknown Test

======================================

Test:  is correct for variables via let ...
Has  Unknown Test

======================================

Test:  is correct for variables via as ...
Has  Unknown Test

======================================

Test:  is correct for event names case sensitive
Has  Unknown Test

======================================

Test:  is correct for bound events via on-
Has  Unknown Test

======================================

Test:  is correct for bound events via data-on-
Has  Unknown Test

======================================

Test:  is correct for bound events and properties via [(...)]
Has  Unknown Test

======================================

Test:  is correct for bound events and properties via bindon-
Has  Unknown Test

======================================

Test:  is correct for bound events and properties via data-bindon-
Has  Unknown Test

======================================

Test:  is correct for bound events via @
Has  Unknown Test

======================================

Test:  is correct for references via #...
Has  Unknown Test

======================================

Test:  is correct for references with name
Has  Unknown Test

======================================

Test:  is correct for references via ref-
Has  Unknown Test

======================================

Test:  is correct for references via data-ref-
Has  Unknown Test

======================================

Test:  is correct for variables and placeholders
Has  Unknown Test

======================================

Test:  is correct for nested ICUs
Has  Unknown Test

======================================

Test:  is correct for deferred blocks
Has  Unknown Test

======================================

Test:  is correct for switch blocks
Has  Unknown Test

======================================

Test:  is correct for loop blocks
Has  Unknown Test

======================================

Test:  is correct for if blocks
Has  Unknown Test

======================================

Test:  is correct for a let declaration
Has  Unknown Test

======================================

Test:  should create valid text span on Element with adjacent start and end tags
Has  Unknown Test

======================================

Test:  should parse incomplete tags terminated by EOF
Has  Unknown Test

======================================

Test:  should parse incomplete tags terminated by another tag
Has  Unknown Test

======================================

Test:  should parse text nodes
Has  Unknown Test

======================================

Test:  should parse elements with attributes
Has  Unknown Test

======================================

Test:  should parse ngContent
Has  Unknown Test

======================================

Test:  should parse ngContent when it contains WS only
Has  Unknown Test

======================================

Test:  should parse ngContent regardless the namespace
Has  Unknown Test

======================================

Test:  should parse bound text nodes
Has  Unknown Test

======================================

Test:  should parse mixed case bound properties
Has  Unknown Test

======================================

Test:  should parse bound properties via bind- 
Has  Unknown Test

======================================

Test:  should parse bound properties via {{...}}
Has  Unknown Test

======================================

Test:  should parse dash case bound properties
Has  Unknown Test

======================================

Test:  should parse dotted name bound properties
Has  Unknown Test

======================================

Test:  should not normalize property names via the element schema
Has  Unknown Test

======================================

Test:  should parse mixed case bound attributes
Has  Unknown Test

======================================

Test:  should parse and dash case bound classes
Has  Unknown Test

======================================

Test:  should parse mixed case bound classes
Has  Unknown Test

======================================

Test:  should parse mixed case bound styles
Has  Unknown Test

======================================

Test:  should support * directives
Has  Unknown Test

======================================

Test:  should support <ng-template>
Has  Unknown Test

======================================

Test:  should support <ng-template> regardless the namespace
Has  Unknown Test

======================================

Test:  should support <ng-template> with structural directive
Has  Magic Number Test

======================================

Test:  should support reference via #...
Has  Unknown Test

======================================

Test:  should support reference via ref-...
Has  Unknown Test

======================================

Test:  should parse variables via let-...
Has  Unknown Test

======================================

Test:  should parse attributes
Has  Unknown Test

======================================

Test:  should parse bound attributes
Has  Unknown Test

======================================

Test:  should support attribute and bound attributes
Has  Unknown Test

======================================

Test:  should parse variables via let ...
Has  Unknown Test

======================================

Test:  should parse variables via as ...
Has  Unknown Test

======================================

Test:  should parse bound events with a target
Has  Unknown Test

======================================

Test:  should parse event names case sensitive
Has  Unknown Test

======================================

Test:  should parse bound events via on-
Has  Unknown Test

======================================

Test:  should parse bound events and properties via [(...)]
Has  Unknown Test

======================================

Test:  should parse bound events and properties via bindon-
Has  Unknown Test

======================================

Test:  should parse bound events and properties via [(...)] with non-null operator
Has  Unknown Test

======================================

Test:  should parse property reads bound via [(...)]
Has  Unknown Test

======================================

Test:  should parse keyed reads bound via [(...)]
Has  Unknown Test

======================================

Test:  should report unsupported expressions in two-way bindings
Has  Conditional Test Logic

======================================

Test:  should parse references via #...
Has  Unknown Test

======================================

Test:  should parse references via ref-
Has  Unknown Test

======================================

Test:  should parse camel case references
Has  Unknown Test

======================================

Test:  should parse ngContent without selector
Has  Unknown Test

======================================

Test:  should parse ngContent with a specific selector
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should parse ngContent with a selector
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should parse ngProjectAs as an attribute
Has  Unknown Test

======================================

Test:  should parse ngContent with children
Has  Unknown Test

======================================

Test:  should ignore <script> elements
Has  Unknown Test

======================================

Test:  should ignore <style> elements
Has  Unknown Test

======================================

Test:  should keep <link rel="stylesheet"> elements if they have an absolute url
Has  Unknown Test

======================================

Test:  should keep <link rel="stylesheet"> elements if they have no uri
Has  Unknown Test

======================================

Test:  should ignore <link rel="stylesheet"> elements if they have a relative uri
Has  Unknown Test

======================================

Test:  should ignore bindings on children of elements with ngNonBindable
Has  Unknown Test

======================================

Test:  should keep nested children of elements with ngNonBindable
Has  Unknown Test

======================================

Test:  should ignore <script> elements inside of elements with ngNonBindable
Has  Unknown Test

======================================

Test:  should ignore <style> elements inside of elements with ngNonBindable
Has  Unknown Test

======================================

Test:  should ignore <link rel="stylesheet"> elements inside of elements with ngNonBindable
Has  Unknown Test

======================================

Test:  should parse a simple deferred block
Has  Unknown Test

======================================

Test:  should parse a deferred block with a `when` trigger
Has  Unknown Test

======================================

Test:  should parse a deferred block with a single `on` trigger
Has  Unknown Test

======================================

Test:  should parse a deferred block with multiple `on` triggers
Has  Unknown Test

======================================

Test:  should parse a deferred block with a non-parenthesized trigger at the end
Has  Unknown Test

======================================

Test:  should parse a deferred block with `when` and `on` triggers
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should allow new line after trigger name
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should parse a deferred block with a timer set in seconds
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should parse a deferred block with a timer with a decimal point
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should parse a deferred block with a timer that has no units
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should parse a deferred block with a hover trigger
Has  Unknown Test

======================================

Test:  should parse a deferred block with an interaction trigger
Has  Unknown Test

======================================

Test:  should parse a deferred block with connected blocks
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should parse a deferred block with comments between the connected blocks
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  undefined
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should parse a loading block with parameters
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should parse a placeholder block with parameters
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should parse a deferred block with prefetch triggers
Has  Unknown Test

======================================

Test:  should allow arbitrary number of spaces after the `prefetch` keyword
Has  Unknown Test

======================================

Test:  should parse a complete example
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should treat blocks as plain text inside ngNonBindable
Has  Unknown Test

======================================

Test:  should parse triggers with implied target elements
Has  Unknown Test

======================================

Test:  should parse a switch block
Has  Unknown Test

======================================

Test:  should parse a switch block when preserveWhitespaces is enabled
Has  Unknown Test

======================================

Test:  should parse a switch block with optional parentheses
Has  Unknown Test

======================================

Test:  should parse a nested switch block
Has  Unknown Test

======================================

Test:  should parse a switch block containing comments
Has  Unknown Test

======================================

Test:  should parse a for loop block
Has  Unknown Test

======================================

Test:  should parse a for loop block with optional parentheses
Has  Unknown Test

======================================

Test:  should parse a for loop block with let parameters
Has  Unknown Test

======================================

Test:  should parse a for loop block with newlines in its let parameters
Has  Unknown Test

======================================

Test:  should parse nested for loop blocks
Has  Unknown Test

======================================

Test:  should parse a for loop block with a function call in the `track` expression
Has  Unknown Test

======================================

Test:  should parse a for loop block with newlines in its expression
Has  Unknown Test

======================================

Test:  should parse for loop block expression containing new lines
Has  Unknown Test

======================================

Test:  should parse an if block
Has  Unknown Test

======================================

Test:  should parse an if block with optional parentheses
Has  Unknown Test

======================================

Test:  should parse nested if blocks
Has  Unknown Test

======================================

Test:  should parse an else if block with multiple spaces
Has  Unknown Test

======================================

Test:  should parse an else if block with a tab between `else` and `if`
Has  Unknown Test

======================================

Test:  should parse an if block containing comments between the branches
Has  Unknown Test

======================================

Test:  should parse unknown blocks
Has  Unknown Test

======================================

Test:  should parse a let declaration
Has  Unknown Test

======================================

Test:  should produce a text node when @let is used inside ngNonBindable
Has  Unknown Test

======================================

Test:  should bind a simple template
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should match directives when binding a simple template
Has  Magic Number Test

======================================

Test:  should match directives on namespaced elements
Has  Magic Number Test

======================================

Test:  should not match directives intended for an element on a microsyntax template
Has  Magic Number Test

======================================

Test:  should extract top-level defer blocks
Has  Magic Number Test

======================================

Test:  should extract nested defer blocks and associated pipes
Has  Magic Number Test

======================================

Test:  should extract nested defer blocks and associated directives
Has  Magic Number Test

======================================

Test:  serializeI18nPlaceholderBlock()
Has  Magic Number Test

======================================

Test:  generates with description
Has  Magic Number Test

======================================

Test:  generates with no description suppressed
Has  Magic Number Test

======================================

Test:  should compute source-spans when serializing text with interpolation for `$localize()`
Has  Magic Number Test

======================================

Test:  should compute source-spans when serializing content with HTML tags for `$localize()`
Has  Magic Number Test

======================================

Test:  should create the correct source-spans when there are two placeholders next to each other
Has  Magic Number Test

======================================

Test:  should create the correct placeholder source-spans when there is skipped leading whitespace
Has  Magic Number Test

======================================

Test:  should include an array of HTML comment nodes on the returned R3 AST
Has  Magic Number Test

======================================

Test:  generate a new schema
Has  Unknown Test

======================================

Test:  should normalize the given dimensional CSS style value to contain a PX value when numeric
Has  Magic Number Test

======================================

Test:  should not normalize any values that are of zero
Has  Magic Number Test

======================================

Test:  should stringify all non dimensional numeric style values
Has  Magic Number Test

======================================

Test:  should have no overlap between `IFRAME_SECURITY_SENSITIVE_ATTRS` and `SECURITY_SCHEMA`
Has  Conditional Test Logic

======================================

Test:  should select by element name case sensitive
Has  Magic Number Test

======================================

Test:  should select by class name case insensitive
Has  Magic Number Test

======================================

Test:  should select by attr name case sensitive independent of the value
Has  Magic Number Test

======================================

Test:  should support "." in attribute names
Has  Magic Number Test

======================================

Test:  should support "$" in attribute names
Has  Magic Number Test

======================================

Test:  should select by attr name only once if the value is from the DOM
Has  Magic Number Test

======================================

Test:  should select by attr name case sensitive and value case insensitive
Has  Magic Number Test

======================================

Test:  should select by element name, class name and attribute name with value
Has  Magic Number Test

======================================

Test:  should select by many attributes and independent of the value
Has  Magic Number Test

======================================

Test:  should select independent of the order in the css selector
Has  Magic Number Test

======================================

Test:  should not select with a matching :not selector
Has  Magic Number Test

======================================

Test:  should select with a non matching :not selector
Has  Magic Number Test

======================================

Test:  should match * with :not selector
Has  Magic Number Test

======================================

Test:  should match with multiple :not selectors
Has  Magic Number Test

======================================

Test:  should select with one match in a list
Has  Magic Number Test

======================================

Test:  should not select twice with two matches in a list
Has  Magic Number Test

======================================

Test:  should detect attr names with escaped $
Has  Magic Number Test

======================================

Test:  should detect :not
Has  Magic Number Test

======================================

Test:  should throw when nested :not
Has  Magic Number Test

======================================

Test:  should detect lists of selectors
Has  Magic Number Test

======================================

Test:  should detect lists of selectors with :not
Has  Magic Number Test

======================================

Test:  should handle (scope or not) animation definition containing some names which do not have a preceding space
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should handle (scope or not) animation definitions preceded by an erroneous comma
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should do nothing if `multiples` is 0
Has  Magic Number Test

======================================

Test:  should do nothing if `multiples` is 1
Has  Magic Number Test

======================================

Test:  should add clones of the original groups if `multiples` is greater than 1
Has  Magic Number Test

======================================

Test:  should handle arrays with primitive type values
Has  Magic Number Test

======================================

Test:  should handle arrays of objects
Has  Magic Number Test

======================================

Test:  works in AOT
Has  Exception Handling

======================================

Test:  @Self() works in component hierarchies
Has  Exception Handling

======================================

Test:  @Optional() Self() resolves to @Injectable() scoped service
Has  Exception Handling

======================================

Test:  InjectionToken ngInjectableDef works
Has  Exception Handling

======================================

Test:  APP_ROOT_SCOPE works
Has  Exception Handling

======================================

Test:  can inject dependencies
Has  Exception Handling

======================================

Test:  string tokens work
Has  Exception Handling

======================================

Test:  works
Has  Unknown Test

======================================

Test:  should attach the `sourceMapRange` to the given `node`
Has  Magic Number Test

======================================

Test:  should use undefined if the url is the same as the one passed to the constructor
Has  Magic Number Test

======================================

Test:  should extract the number value
Has  Magic Number Test

======================================

Test:  should extract the range from the expression
Has  Magic Number Test

======================================

Test:  should return the number value of the property
Has  Magic Number Test

======================================

Test:  should return an array of AstValue instances of parsed from the value of the property
Has  Magic Number Test

======================================

Test:  should return the original expression value of the property
Has  Magic Number Test

======================================

Test:  should return the expression value of the property wrapped in an `AstValue`
Has  Magic Number Test

======================================

Test:  should return true if the value is a number
Has  Magic Number Test

======================================

Test:  should return the number value of the AstValue
Has  Magic Number Test

======================================

Test:  should return false if the value is not a string
Has  Magic Number Test

======================================

Test:  should throw an error if the property is not a string
Has  Magic Number Test

======================================

Test:  should return false if the value is not a boolean
Has  Magic Number Test

======================================

Test:  should throw an error if the property is not a boolean
Has  Magic Number Test

======================================

Test:  should return false if the value is not an object literal
Has  Magic Number Test

======================================

Test:  should throw an error if the property is not an object literal
Has  Magic Number Test

======================================

Test:  should return false if the value is not an object literal
Has  Magic Number Test

======================================

Test:  should return an array of AstValue objects from the AstValue
Has  Magic Number Test

======================================

Test:  should throw an error if the property is not an array
Has  Magic Number Test

======================================

Test:  should return false if the value is not a function expression
Has  Magic Number Test

======================================

Test:  should return the "return value" of the function expression
Has  Magic Number Test

======================================

Test:  should throw an error if the property is not a function expression
Has  Magic Number Test

======================================

Test:  should throw an error if the property is not a function declaration
Has  Magic Number Test

======================================

Test:  should throw an error if the value is not a call expression
Has  Magic Number Test

======================================

Test:  should return the arguments as an array of values
Has  Magic Number Test

======================================

Test:  should throw an error if the value is not a call expression
Has  Magic Number Test

======================================

Test:  should return the value wrapped in a `WrappedNodeExpr`
Has  Magic Number Test

======================================

Test:  should return the source range of the AST node
Has  Magic Number Test

======================================

Test:  should extract the number value
Has  Magic Number Test

======================================

Test:  should extract the range from the expression
Has  Magic Number Test

======================================

Test:  should call `linkPartialDeclaration()` on the appropriate partial compiler
Has  Magic Number Test

======================================

Test:  should enable block syntax if compiled with version 17 or above
Has  Conditional Test Logic

======================================

Test:  should capture shared constant values
Has  Magic Number Test

======================================

Test:  should be no shared constant statements to capture when they are emitted into the replacement IIFE
Has  Magic Number Test

======================================

Test:  should include a trace for dynamic values
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should include a pointer for a reference to a named declaration
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should include a pointer for a reference to an anonymous declaration
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should include a representation of the value's type
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should produce a diagnostic when @Component has non-literal argument
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should keep track of inline template
Has  Conditional Test Logic

======================================

Test:  should keep track of external template
Has  Conditional Test Logic

======================================

Test:  should keep track of internal and external styles
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should use an empty source map URL for an indirect template
Has  Conditional Test Logic

======================================

Test:  does not emit a program with template parse errors
Has  Conditional Test Logic

======================================

Test:  should replace inline style content with transformed content
Has  Conditional Test Logic

======================================

Test:  should replace template style element content for inline template with transformed content
Has  Conditional Test Logic

======================================

Test:  should replace template style element content for external template with transformed content
Has  Conditional Test Logic

======================================

Test:  should error if canPreprocess is true and async analyze is not used
Has  Conditional Test Logic

======================================

Test:  should not error if component has no inline styles and canPreprocess is true
Has  Conditional Test Logic

======================================

Test:  should evaluate the name of animations
Has  Conditional Test Logic

======================================

Test:  should tell if the animations include a dynamic value
Has  Conditional Test Logic

======================================

Test:  should treat complex animations expressions as dynamic
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not produce diagnostic for cross-file imports in standalone component
Has  Conditional Test Logic

======================================

Test:  should produce diagnostic for imports in non-standalone component
Has  Conditional Test Logic

======================================

Test:  should not produce diagnostic for cross-file schemas in standalone component
Has  Conditional Test Logic

======================================

Test:  should produce diagnostic for schemas in non-standalone component
Has  Conditional Test Logic

======================================

Test:  should produce a diagnostic when injectable already has a static ɵprov property (with errorOnDuplicateProv true)
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should also return template diagnostics when asked for component diagnostics
Has  Magic Number Test

======================================

Test:  should return the component resources
Has  Magic Number Test

======================================

Test:  does not return component style resources if not an array of strings
Has  Magic Number Test

======================================

Test:  should return resource dependencies of a component source file
Has  Magic Number Test

======================================

Test:  should reuse the full compilation state for a resource-only change
Has  Magic Number Test

======================================

Test:  should return the original filename if FS is case-sensitive or lower case otherwise
Has  Conditional Test Logic

======================================

Test:  should use case-sensitivity when matching rootDirs
Has  Conditional Test Logic

======================================

Test:  should prefer non-aliased exports
Has  Conditional Test Logic

======================================

Test:  should generate an import using the exported name of the declaration
Has  Conditional Test Logic

======================================

Test:  should generate an import to a type-only declaration when allowed
Has  Conditional Test Logic

======================================

Test:  should enumerate exports with the ReflectionHost
Has  Conditional Test Logic

======================================

Test:  should prefer non-aliased exports
Has  Conditional Test Logic

======================================

Test:  should never use relative imports outside of the logical filesystem for source files
Has  Conditional Test Logic

======================================

Test:  should use relative imports outside of the logical filesystem for declaration files if allowed
Has  Conditional Test Logic

======================================

Test:  should not use relative imports outside of the logical filesystem for declaration files if not allowed
Has  Conditional Test Logic

======================================

Test:  should prefer non-aliased exports
Has  Conditional Test Logic

======================================

Test:  should prefer non-aliased exports
Has  Conditional Test Logic

======================================

Test:  should handle svg elements
Has  Magic Number Test

======================================

Test:  should handle svg elements on templates
Has  Magic Number Test

======================================

Test:  should handle comments in interpolations
Has  Magic Number Test

======================================

Test:  should handle whitespace and comments in interpolations
Has  Magic Number Test

======================================

Test:  works when structural directives are on templates
Has  Magic Number Test

======================================

Test:  should generate nothing in empty template
Has  Magic Number Test

======================================

Test:  should ignore comments
Has  Magic Number Test

======================================

Test:  should handle arbitrary whitespace
Has  Magic Number Test

======================================

Test:  should resist collisions
Has  Magic Number Test

======================================

Test:  should discover component properties
Has  Magic Number Test

======================================

Test:  should discover component properties read using "this" as a receiver
Has  Magic Number Test

======================================

Test:  should discover nested properties
Has  Magic Number Test

======================================

Test:  should ignore identifiers that are not implicitly received by the template
Has  Magic Number Test

======================================

Test:  should discover properties in bound attributes
Has  Magic Number Test

======================================

Test:  should handle bound attributes with no value
Has  Magic Number Test

======================================

Test:  should discover variables in bound attributes
Has  Magic Number Test

======================================

Test:  should discover properties in template expressions
Has  Magic Number Test

======================================

Test:  should discover properties in template expressions
Has  Magic Number Test

======================================

Test:  should discover properties in template expressions and resist collisions
Has  Magic Number Test

======================================

Test:  should discover property writes in bound events
Has  Magic Number Test

======================================

Test:  should discover nested property writes
Has  Magic Number Test

======================================

Test:  should discover component method calls
Has  Magic Number Test

======================================

Test:  should discover nested properties
Has  Magic Number Test

======================================

Test:  should ignore identifiers that are not implicitly received by the template
Has  Magic Number Test

======================================

Test:  should discover method calls in bound attributes
Has  Magic Number Test

======================================

Test:  should discover method calls in template expressions
Has  Magic Number Test

======================================

Test:  should discover references
Has  Magic Number Test

======================================

Test:  should discover nested references
Has  Magic Number Test

======================================

Test:  should discover references to references
Has  Magic Number Test

======================================

Test:  should discover forward references
Has  Magic Number Test

======================================

Test:  should generate information directive targets
Has  Magic Number Test

======================================

Test:  should discover references to references
Has  Magic Number Test

======================================

Test:  should discover variables
Has  Magic Number Test

======================================

Test:  should discover variables with let- syntax
Has  Magic Number Test

======================================

Test:  should discover nested variables
Has  Magic Number Test

======================================

Test:  should discover references to variables
Has  Magic Number Test

======================================

Test:  should discover references to variables
Has  Magic Number Test

======================================

Test:  should discover references to let declaration
Has  Magic Number Test

======================================

Test:  should record elements as ElementIdentifiers
Has  Magic Number Test

======================================

Test:  should record element names as their selector
Has  Magic Number Test

======================================

Test:  should discover selectors in self-closing elements
Has  Magic Number Test

======================================

Test:  should discover selectors in elements with adjacent open and close tags
Has  Magic Number Test

======================================

Test:  should discover selectors in elements with non-adjacent open and close tags
Has  Magic Number Test

======================================

Test:  should discover nested selectors
Has  Magic Number Test

======================================

Test:  should generate information about attributes
Has  Magic Number Test

======================================

Test:  should record templates as TemplateNodeIdentifiers
Has  Magic Number Test

======================================

Test:  should record template names as their tag name
Has  Magic Number Test

======================================

Test:  should discover nested templates
Has  Magic Number Test

======================================

Test:  should generate information about attributes
Has  Magic Number Test

======================================

Test:  should handle interpolations in attributes, preceded by HTML entity
Has  Magic Number Test

======================================

Test:  should emit component and template analysis information
Has  Magic Number Test

======================================

Test:  should give inline templates the component source file
Has  Magic Number Test

======================================

Test:  should give external templates their own source file
Has  Magic Number Test

======================================

Test:  should emit used components
Has  Magic Number Test

======================================

Test:  should not assume directives are structural
Has  Conditional Test Logic

======================================

Test:  should identify a structural directive by its constructor
Has  Conditional Test Logic

======================================

Test:  should retain an absolute owning module for relative imports
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should identify host directives
Has  Conditional Test Logic

======================================

Test:  should read the post-v16 inputs map syntax
Has  Conditional Test Logic

======================================

Test:  should read the pre-v16 inputs map syntax
Has  Conditional Test Logic

======================================

Test:  should describe primitives
Has  Magic Number Test

======================================

Test:  should describe objects limited to a single level
Has  Magic Number Test

======================================

Test:  should describe arrays limited to a single level
Has  Magic Number Test

======================================

Test:  should describe enum values
Has  Magic Number Test

======================================

Test:  should not include the origin node if points to a different dynamic node.
Has  Magic Number Test

======================================

Test:  should include the origin node if it is dynamic by itself
Has  Magic Number Test

======================================

Test:  should include a trace for a dynamic subexpression in the origin expression
Has  Magic Number Test

======================================

Test:  should reduce the granularity to a single entry per statement
Has  Magic Number Test

======================================

Test:  should trace dynamic strings
Has  Magic Number Test

======================================

Test:  should trace invalid expression types
Has  Magic Number Test

======================================

Test:  should trace unknown syntax
Has  Magic Number Test

======================================

Test:  should trace complex function invocations
Has  Magic Number Test

======================================

Test:  should trace object destructuring of external reference
Has  Magic Number Test

======================================

Test:  should trace deep object destructuring of external reference
Has  Magic Number Test

======================================

Test:  should trace array destructuring of dynamic value
Has  Magic Number Test

======================================

Test:  function call default value works
Has  Magic Number Test

======================================

Test:  function call spread works
Has  Magic Number Test

======================================

Test:  addition works
Has  Magic Number Test

======================================

Test:  array works
Has  Magic Number Test

======================================

Test:  array spread works
Has  Magic Number Test

======================================

Test:  && operations work
Has  Magic Number Test

======================================

Test:  evaluates arithmetic operators
Has  Magic Number Test

======================================

Test:  parentheticals work
Has  Magic Number Test

======================================

Test:  array access works
Has  Magic Number Test

======================================

Test:  array `length` property access works
Has  Magic Number Test

======================================

Test:  array `slice` function works
Has  Magic Number Test

======================================

Test:  array `concat` function works
Has  Magic Number Test

======================================

Test:  supports negative numbers
Has  Magic Number Test

======================================

Test:  supports destructuring array variable declarations
Has  Magic Number Test

======================================

Test:  supports destructuring object variable declaration
Has  Magic Number Test

======================================

Test:  supports destructuring object variable declaration with an alias
Has  Magic Number Test

======================================

Test:  supports nested destructuring object variable declarations
Has  Magic Number Test

======================================

Test:  supports nested destructuring array variable declarations
Has  Magic Number Test

======================================

Test:  supports nested destructuring variable declarations mixing arrays and objects
Has  Magic Number Test

======================================

Test:  resolves unknown values in a destructured variable declaration as dynamic values
Has  Conditional Test Logic

======================================

Test:  resolves unknown binary operators as dynamic value
Has  Conditional Test Logic

======================================

Test:  resolves unknown unary operators as dynamic value
Has  Conditional Test Logic

======================================

Test:  resolves invalid element accesses as dynamic value
Has  Conditional Test Logic

======================================

Test:  resolves invalid array accesses as dynamic value
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  resolves binary operator on non-literals as dynamic value
Has  Conditional Test Logic

======================================

Test:  resolves invalid spreads in array literals as dynamic value
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  resolves invalid spreads in object literals as dynamic value
Has  Conditional Test Logic

======================================

Test:  resolves access from external variable declarations as dynamic value
Has  Conditional Test Logic

======================================

Test:  supports declarations of primitive constant types
Has  Magic Number Test

======================================

Test:  supports declarations of tuples
Has  Magic Number Test

======================================

Test:  supports declarations of readonly tuples with class references
Has  Conditional Test Logic

======================================

Test:  evaluates tuple elements it cannot understand to DynamicValue
Has  Magic Number Test

======================================

Test:  imports work
Has  Conditional Test Logic

======================================

Test:  absolute imports work
Has  Conditional Test Logic

======================================

Test:  map spread works
Has  Magic Number Test

======================================

Test:  module spread works
Has  Magic Number Test

======================================

Test:  evaluates module exports lazily to avoid infinite recursion
Has  Magic Number Test

======================================

Test:  should resolve non-literals as dynamic string
Has  Conditional Test Logic

======================================

Test:  enum resolution works
Has  Conditional Test Logic

======================================

Test:  should resolve shorthand properties to values
Has  Magic Number Test

======================================

Test:  should resolve dynamic values in object literals
Has  Conditional Test Logic

======================================

Test:  should not attach identifiers to FFR-resolved values
Has  Conditional Test Logic

======================================

Test:  should not associate an owning module when a FFR-resolved expression is within the originating source file
Has  Conditional Test Logic

======================================

Test:  should not associate an owning module when a FFR-resolved expression is imported using a relative import
Has  Conditional Test Logic

======================================

Test:  should associate an owning module when a FFR-resolved expression is imported using an absolute import
Has  Conditional Test Logic

======================================

Test:  should associate an owning module when a FFR-resolved expression is within the foreign file
Has  Conditional Test Logic

======================================

Test:  should resolve functions with more than one statement to a complex function call
Has  Conditional Test Logic

======================================

Test:  should track each time a source file is visited
Has  Magic Number Test

======================================

Test:  should track imported source files
Has  Magic Number Test

======================================

Test:  should track files passed through during re-exports
Has  Magic Number Test

======================================

Test:  should reflect a single argument
Has  Magic Number Test

======================================

Test:  should reflect a decorated argument
Has  Magic Number Test

======================================

Test:  should reflect a decorated argument with a call
Has  Magic Number Test

======================================

Test:  should reflect a decorated argument with an indirection
Has  Magic Number Test

======================================

Test:  should reflect an argument from an aliased import
Has  Magic Number Test

======================================

Test:  should reflect an argument from a namespace declarations
Has  Magic Number Test

======================================

Test:  should reflect an argument from a default import
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should reflect a nullable argument
Has  Magic Number Test

======================================

Test:  should reflect the arguments from an overloaded constructor
Has  Magic Number Test

======================================

Test:  should resolve a direct import
Has  Conditional Test Logic

======================================

Test:  should resolve a namespaced import
Has  Conditional Test Logic

======================================

Test:  should reflect a re-export
Has  Conditional Test Logic

======================================

Test:  should resolve a direct import
Has  Conditional Test Logic

======================================

Test:  should resolve a namespaced import
Has  Conditional Test Logic

======================================

Test:  should get string literal members of class
Has  Magic Number Test

======================================

Test:  should retrieve method members
Has  Magic Number Test

======================================

Test:  should retrieve constructor as member
Has  Magic Number Test

======================================

Test:  should retrieve decorators of member
Has  Magic Number Test

======================================

Test:  identifies static members
Has  Magic Number Test

======================================

Test:  should resolve correctly across modules
Has  Magic Number Test

======================================

Test:  should preserve reference identities in module metadata
Has  Magic Number Test

======================================

Test:  should not tag .d.ts files
Has  Unknown Test

======================================

Test:  should not tag .js files
Has  Unknown Test

======================================

Test:  should not tag shims after finalization
Has  Unknown Test

======================================

Test:  should not overwrite original referencedFiles
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should always tag against the original referencedFiles
Has  Unknown Test

======================================

Test:  should be able to untag references and retag them later
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should return 0 if the segments are the same
Has  Magic Number Test

======================================

Test:  should return a negative number if the first segment is before the second segment
Has  Magic Number Test

======================================

Test:  should return a positive number if the first segment is after the second segment
Has  Magic Number Test

======================================

Test:  should return an identical marker if offset is 0
Has  Magic Number Test

======================================

Test:  should return a new marker offset by the given chars
Has  Magic Number Test

======================================

Test:  should load a file with no source map and inline contents
Has  Conditional Test Logic

======================================

Test:  should load a file with no source map and read its contents from disk
Has  Conditional Test Logic

======================================

Test:  should load a file with an external source map
Has  Conditional Test Logic

======================================

Test:  should only read source-map comments from the last line of a file
Has  Conditional Test Logic

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  should handle a missing external source map
Has  Conditional Test Logic

======================================

Test:  should load a file with an inline encoded source map
Has  Conditional Test Logic

======================================

Test:  should load a file with an implied source map
Has  Conditional Test Logic

======================================

Test:  should handle missing implied source-map file
Has  Conditional Test Logic

======================================

Test:  should recurse into external original source files that are referenced from source maps
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should handle a missing source file referenced from a source-map
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should log a warning if there is a cyclic dependency in source files loaded from disk
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should log a warning if there is a cyclic dependency in source maps loaded from disk
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not fail if the filename of an inline source looks like a cyclic dependency
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not load source-maps (after the initial map) from disk if the source file was inline
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  should parse the mappings from the raw source map
Has  Magic Number Test

======================================

Test:  should parse the segments in ascending order of original position from the raw source map
Has  Magic Number Test

======================================

Test:  should create separate arrays for each original source file
Has  Magic Number Test

======================================

Test:  should find the highest mapping index that has a segment marker below the given one if there is not an exact match
Has  Magic Number Test

======================================

Test:  should find the highest mapping index that has a segment marker (when there are duplicates) below the given one if there is not an exact match
Has  Magic Number Test

======================================

Test:  should find the last mapping if the segment marker is higher than all of them
Has  Magic Number Test

======================================

Test:  should return -1 if the segment marker is lower than all of them
Has  Magic Number Test

======================================

Test:  should find the matching segment marker mapping index if there is only one of them
Has  Magic Number Test

======================================

Test:  should find the highest matching segment marker mapping index if there is more than one of them
Has  Magic Number Test

======================================

Test:  should find the preceding mapping index if there is a matching segment marker
Has  Magic Number Test

======================================

Test:  should find the highest preceding mapping index if there is more than one matching segment marker
Has  Magic Number Test

======================================

Test:  should find the highest mapping index above the lowerIndex hint that has a segment marker below the given one if there is not an exact match
Has  Magic Number Test

======================================

Test:  should return the lowerIndex mapping index if there is a single exact match and we are not exclusive
Has  Magic Number Test

======================================

Test:  should return the lowerIndex mapping index if there are multiple exact matches and we are not exclusive
Has  Magic Number Test

======================================

Test:  should return -1 if the segment marker is lower than the lowerIndex hint
Has  Magic Number Test

======================================

Test:  should return -1 if the segment marker is equal to the lowerIndex hint and we are exclusive
Has  Magic Number Test

======================================

Test:  should add `next` properties to each segment that point to the next segment in the same source file
Has  Magic Number Test

======================================

Test:  should be the same as non-flat mappings if there is only one level of source map
Has  Magic Number Test

======================================

Test:  should merge mappings from flattened original source files
Has  Magic Number Test

======================================

Test:  should ignore mappings to missing source files
Has  Magic Number Test

======================================

Test:  should convert the flattenedMappings into a raw source-map object
Has  Magic Number Test

======================================

Test:  should handle mappings that map from lines outside of the actual content lines
Has  Magic Number Test

======================================

Test:  should consolidate source-files with the same relative path
Has  Magic Number Test

======================================

Test:  should return null for source files with no flattened mappings
Has  Magic Number Test

======================================

Test:  should return offset locations in multiple flattened original source files
Has  Magic Number Test

======================================

Test:  should return offset locations across multiple lines
Has  Magic Number Test

======================================

Test:  should compute the cumulative length of each line in the given string
Has  Magic Number Test

======================================

Test:  should downlevel decorators for @Injectable decorated class
Has  Magic Number Test

======================================

Test:  should downlevel decorators for @Directive decorated class
Has  Magic Number Test

======================================

Test:  should downlevel decorators for @Component decorated class
Has  Magic Number Test

======================================

Test:  should downlevel decorators for @Pipe decorated class
Has  Magic Number Test

======================================

Test:  should not downlevel non-Angular class decorators
Has  Magic Number Test

======================================

Test:  should not downlevel non-Angular class decorators generated by a builder
Has  Magic Number Test

======================================

Test:  should downlevel Angular-decorated class member
Has  Magic Number Test

======================================

Test:  should not downlevel class member with unknown decorator
Has  Magic Number Test

======================================

Test:  should not duplicate constructor parameters for classes part of constructor body
Has  Magic Number Test

======================================

Test:  should downlevel Angular-decorated class member but not preserve type
Has  Magic Number Test

======================================

Test:  should capture constructor type metadata with `emitDecoratorMetadata` enabled
Has  Magic Number Test

======================================

Test:  should capture constructor type metadata with `emitDecoratorMetadata` disabled
Has  Magic Number Test

======================================

Test:  should properly serialize constructor parameter with external qualified name type
Has  Magic Number Test

======================================

Test:  should properly serialize constructor parameter with local qualified name type
Has  Magic Number Test

======================================

Test:  should properly downlevel constructor parameter decorators
Has  Magic Number Test

======================================

Test:  should properly downlevel constructor parameters with union type
Has  Magic Number Test

======================================

Test:  should add @nocollapse if closure compiler is enabled
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should not generate invalid reference due to conflicting parameter name
Has  Magic Number Test

======================================

Test:  should be able to serialize circular constructor parameter type
Has  Magic Number Test

======================================

Test:  should create diagnostic if property name is non-serializable
Has  Magic Number Test

======================================

Test:  should not capture constructor parameter types when not resolving to a value
Has  Magic Number Test

======================================

Test:  should allow preceding custom transformers to strip decorators
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should capture a non-const enum used as a constructor type
Has  Magic Number Test

======================================

Test:  should allow for type-only references to be removed with `emitDecoratorMetadata` from custom decorators
Has  Magic Number Test

======================================

Test:  should not result in a stack overflow for a large number of files
Has  Conditional Test Logic

======================================

Test:  should migrate if the class decorator is downleveled in advance
Has  Conditional Test Logic

======================================

Test:  should migrate if the class member and class is transformed in advance
Has  Conditional Test Logic

======================================

Test:  should run partial compilation when implemented if compilation mode is partial
Has  Magic Number Test

======================================

Test:  should run local compilation when compilation mode is local
Has  Magic Number Test

======================================

Test:  should run full compilation if compilation mode is full
Has  Magic Number Test

======================================

Test:  should attach the `sourceMapRange` to the given `node`
Has  Magic Number Test

======================================

Test:  should not produce a warning when a signal getter is invoked
Has  Magic Number Test

======================================

Test:  should produce a warning when a signal is not invoked
Has  Magic Number Test

======================================

Test:  should produce a warning when a readonly signal is not invoked
Has  Magic Number Test

======================================

Test:  should produce a warning when a computed signal is not invoked
Has  Magic Number Test

======================================

Test:  should produce a warning when an input signal is not invoked
Has  Magic Number Test

======================================

Test:  should produce a warning when a required input signal is not invoked
Has  Magic Number Test

======================================

Test:  should produce a warning when a model signal is not invoked
Has  Magic Number Test

======================================

Test:  should produce a warning when a required model signal is not invoked
Has  Magic Number Test

======================================

Test:  should not produce a warning when a signal is not invoked in a banana in box binding
Has  Magic Number Test

======================================

Test:  should not produce a warning when a signal is not invoked in an input binding as they are skipped
Has  Magic Number Test

======================================

Test:  should produce a warning when a signal in a nested property read is not invoked
Has  Magic Number Test

======================================

Test:  should not produce a warning when model signals are invoked
Has  Magic Number Test

======================================

Test:  should not produce a warning when a computed signal is invoked
Has  Magic Number Test

======================================

Test:  should not produce a warning when input signals are invoked
Has  Magic Number Test

======================================

Test:  should produce a warning when signal is not invoked on interpolated binding
Has  Magic Number Test

======================================

Test:  should not produce a warning when signal is invoked on interpolated binding
Has  Magic Number Test

======================================

Test:  should produce a warning when signal is invoked in attribute binding interpolation 
Has  Magic Number Test

======================================

Test:  should not produce a warning when signal is invoked in attribute binding interpolation 
Has  Magic Number Test

======================================

Test:  should produce a warning when nested signal is not invoked on interpolated binding
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should not produce a warning with other Signal type
Has  Magic Number Test

======================================

Test:  should not produce a warning with other Signal type
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should produce invalid banana in a box warning
Has  Magic Number Test

======================================

Test:  should not produce invalid banana in a box warning if written correctly
Has  Magic Number Test

======================================

Test:  should not produce invalid banana in a box warning with bracket in the middle of the name
Has  Magic Number Test

======================================

Test:  should produce invalid banana in a box warnings for *ngIf and ng-template
Has  Magic Number Test

======================================

Test:  should respect configured category
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should produce missing ngforof let warning
Has  Magic Number Test

======================================

Test:  should not produce missing ngforof let warning if written correctly
Has  Magic Number Test

======================================

Test:  should not produce missing ngforof let warning if written correctly in longhand
Has  Magic Number Test

======================================

Test:  should produce nullish coalescing warning
Has  Magic Number Test

======================================

Test:  should produce nullish coalescing warning for classes with inline TCBs
Has  Magic Number Test

======================================

Test:  should not produce nullish coalescing warning for a nullable type
Has  Magic Number Test

======================================

Test:  should not produce nullish coalescing warning for the any type
Has  Magic Number Test

======================================

Test:  should not produce nullish coalescing warning for the unknown type
Has  Magic Number Test

======================================

Test:  should not produce nullish coalescing warning for a type that includes undefined
Has  Magic Number Test

======================================

Test:  warns for pipe arguments which are likely configured incorrectly (?? operates on "format" here)
Has  Magic Number Test

======================================

Test:  does not warn for pipe arguments when parens are used
Has  Magic Number Test

======================================

Test:  should not produce nullish coalescing warning when the left side is a nullable expression
Has  Magic Number Test

======================================

Test:  should respect configured diagnostic category
Has  Magic Number Test

======================================

Test:  should produce optional chain warning for property access
Has  Magic Number Test

======================================

Test:  should produce optional chain warning for indexed access
Has  Magic Number Test

======================================

Test:  should produce optional chain warning for method call
Has  Magic Number Test

======================================

Test:  should produce optional chain warning for classes with inline TCBs
Has  Magic Number Test

======================================

Test:  should not produce optional chain warning for a nullable type
Has  Magic Number Test

======================================

Test:  should not produce optional chain warning for the any type
Has  Magic Number Test

======================================

Test:  should not produce optional chain warning for the unknown type
Has  Magic Number Test

======================================

Test:  should not produce optional chain warning for a type that includes undefined
Has  Magic Number Test

======================================

Test:  should not produce optional chain warning when the left side is a nullable expression
Has  Magic Number Test

======================================

Test:  should respect configured diagnostic category
Has  Magic Number Test

======================================

Test:  should produce class binding warning
Has  Magic Number Test

======================================

Test:  should produce an attribute binding warning
Has  Magic Number Test

======================================

Test:  should produce a wrong value warning
Has  Magic Number Test

======================================

Test:  should not produce a warning when there is no value
Has  Magic Number Test

======================================

Test:  should not produce a warning with a correct value 
Has  Magic Number Test

======================================

Test:  should produce suffix not supported warning
Has  Magic Number Test

======================================

Test:  should not produce suffix not supported warning on a style binding
Has  Magic Number Test

======================================

Test:  should not produce suffix not supported warning on an input
Has  Magic Number Test

======================================

Test:  should produce class binding warning
Has  Magic Number Test

======================================

Test:  should produce an attribute binding warning
Has  Magic Number Test

======================================

Test:  should produce a style binding warning
Has  Magic Number Test

======================================

Test:  should not produce a warning when there is no value
Has  Magic Number Test

======================================

Test:  should produce a diagnostic when a function in an event binding is not invoked
Has  Magic Number Test

======================================

Test:  should produce a diagnostic when a nested function in an event binding is not invoked
Has  Magic Number Test

======================================

Test:  should produce a diagnostic when a nested function that uses key read in an event binding is not invoked
Has  Magic Number Test

======================================

Test:  should produce a diagnostic when a function in a chain is not invoked
Has  Magic Number Test

======================================

Test:  should produce a diagnostic when a function in a conditional is not invoked
Has  Magic Number Test

======================================

Test:  should produce a diagnostic when a function in a conditional is not invoked
Has  Magic Number Test

======================================

Test:  should produce a diagnostic when a nested function in a conditional is not invoked
Has  Magic Number Test

======================================

Test:  should produce a diagnostic when a function in a function is not invoked
Has  Magic Number Test

======================================

Test:  should produce a diagnostic when a function that returns a function is not invoked
Has  Magic Number Test

======================================

Test:  should not produce a diagnostic when an invoked function returns a function
Has  Magic Number Test

======================================

Test:  should not produce a warning when the function is not invoked in two-way-binding
Has  Magic Number Test

======================================

Test:  should not produce a warning when the function is invoked
Has  Magic Number Test

======================================

Test:  should report a @let declaration that is not used
Has  Magic Number Test

======================================

Test:  should report a @let declaration that is not used
Has  Magic Number Test

======================================

Test:  should not report a @let declaration that is only used in other @let declarations
Has  Magic Number Test

======================================

Test:  should not report a @let declaration that is only used in an event listener
Has  Magic Number Test

======================================

Test:  should not report a @let declaration that is only used in a structural directive
Has  Magic Number Test

======================================

Test:  does not repeat diagnostics for missing pipes in directive inputs
Has  Magic Number Test

======================================

Test:  should handle TypeScript parse failures gracefully
Has  Magic Number Test

======================================

Test:  should handle non-Error failures gracefully
Has  Magic Number Test

======================================

Test:  should not be created if no components need to be checked
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  should have complete reuse if no structural changes are made to shims
Has  Unknown Test

======================================

Test:  should have complete reuse if no structural changes are made to input files
Has  Unknown Test

======================================

Test:  should return a completion point in the TCB for the component context
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should get a symbol for regular attributes
Has  Unknown Test

======================================

Test:  checkTypeOfAttributes = true
Has  Magic Number Test

======================================

Test:  checkTypeOfAttributes = false
Has  Magic Number Test

======================================

Test:  should get a symbol for local ref which refers to the template
Has  Unknown Test

======================================

Test:  should get a symbol for usage local ref which refers to a template
Has  Unknown Test

======================================

Test:  should get symbol for the template itself
Has  Magic Number Test

======================================

Test:  finds symbols for variables
Has  Unknown Test

======================================

Test:  finds symbol when using a template variable
Has  Unknown Test

======================================

Test:  should retrieve a symbol for the loop expression
Has  Unknown Test

======================================

Test:  should retrieve a symbol for the track expression
Has  Unknown Test

======================================

Test:  should retrieve a symbol for the track expression
Has  Unknown Test

======================================

Test:  finds symbols for loop variable
Has  Unknown Test

======================================

Test:  finds symbol when using the index in the body
Has  Unknown Test

======================================

Test:  should get a symbol for properties several levels deep
Has  Magic Number Test

======================================

Test:  safe property reads
Has  Magic Number Test

======================================

Test:  safe keyed reads
Has  Magic Number Test

======================================

Test:  can get a symbol for empty binding
Has  Magic Number Test

======================================

Test:  can retrieve a symbol for an input binding
Has  Magic Number Test

======================================

Test:  can retrieve a symbol for a signal-input binding
Has  Magic Number Test

======================================

Test:  can retrieve a symbol for an input of structural directive
Has  Magic Number Test

======================================

Test:  returns dom binding input binds only to the dom element
Has  Unknown Test

======================================

Test:  returns dom binding when directive members do not match the input
Has  Unknown Test

======================================

Test:  can match binding when there are two directives
Has  Magic Number Test

======================================

Test:  returns the first field match when directive maps same input to two fields
Has  Magic Number Test

======================================

Test:  returns the all inputs when two directives have the same input
Has  Magic Number Test

======================================

Test:  should find symbol for output binding
Has  Magic Number Test

======================================

Test:  should find symbol for output binding when there are multiple directives
Has  Magic Number Test

======================================

Test:  returns addEventListener binding to native element when no match to any directive output
Has  Magic Number Test

======================================

Test:  still returns binding when checkTypeOfOutputEvents is false
Has  Magic Number Test

======================================

Test:  returns output symbol for two way binding
Has  Magic Number Test

======================================

Test:  for elements that are components with no inputs
Has  Magic Number Test

======================================

Test:  element with directive matches
Has  Magic Number Test

======================================

Test:  elements with generic directives
Has  Magic Number Test

======================================

Test:  should not produce errors for components that do not require inlining
Has  Magic Number Test

======================================

Test:  should produce errors for components that require TCB inlining
Has  Magic Number Test

======================================

Test:  should provide access to a component's real template
Has  Magic Number Test

======================================

Test:  compiles a basic type constructor
Has  Unknown Test

======================================

Test:  should extract xmb
Has  Magic Number Test

======================================

Test:  should extract xlf
Has  Magic Number Test

======================================

Test:  should extract xlf2
Has  Magic Number Test

======================================

Test:  should not emit js
Has  Magic Number Test

======================================

Test:  should report when an initializer function is used outside of an initializer
Has  Magic Number Test

======================================

Test:  should report when a required initializer function is used outside of an initializer
Has  Magic Number Test

======================================

Test:  should report when an aliased initializer function is used outside of an initializer
Has  Magic Number Test

======================================

Test:  should report when an initializer function accessed through a namespace import is used outside of an initializer
Has  Magic Number Test

======================================

Test:  should report when an initializer function is used outside of an initializer in a file that does not have any decorated classes
Has  Magic Number Test

======================================

Test:  should report when an initializer function is used in a constructor
Has  Magic Number Test

======================================

Test:  should report when an initializer function is an indirect descendant of the initializer
Has  Magic Number Test

======================================

Test:  should not report a correct usage of an initializer API
Has  Magic Number Test

======================================

Test:  should not report if an initializer function is wrapped in a parenthesized expression
Has  Magic Number Test

======================================

Test:  should not report if an initializer function is wrapped in an `as` expression
Has  Magic Number Test

======================================

Test:  should report initializer function being used in an undecorated class
Has  Magic Number Test

======================================

Test:  should report initializer function being used in an unsupported Angular class
Has  Magic Number Test

======================================

Test:  should error if a required input declares an initial value
Has  Magic Number Test

======================================

Test:  should report mixed two-way binding with a signal input
Has  Magic Number Test

======================================

Test:  should work
Has  Magic Number Test

======================================

Test:  should work with transforms
Has  Magic Number Test

======================================

Test:  should report unset required inputs
Has  Magic Number Test

======================================

Test:  should error when declared using an ES private field
Has  Magic Number Test

======================================

Test:  should error when declared using a `private` field
Has  Magic Number Test

======================================

Test:  should allow declaring using a `protected` field
Has  Magic Number Test

======================================

Test:  should report a diagnostic if a model field is decorated with @Input
Has  Magic Number Test

======================================

Test:  should report a diagnostic if a model field is decorated with @Output
Has  Magic Number Test

======================================

Test:  should report a diagnostic if a model input is also declared in the `inputs` field
Has  Magic Number Test

======================================

Test:  should produce a diagnostic if the alias of a model cannot be analyzed
Has  Magic Number Test

======================================

Test:  should report a diagnostic if the options of a model signal cannot be analyzed
Has  Magic Number Test

======================================

Test:  should report a diagnostic if a model input is declared on a static member
Has  Magic Number Test

======================================

Test:  should a diagnostic if a required model input declares an initial value
Has  Magic Number Test

======================================

Test:  should report if a signal getter is invoked in a two-way binding
Has  Magic Number Test

======================================

Test:  should check a primitive value bound to a model input
Has  Magic Number Test

======================================

Test:  should check a signal value bound to a model input via a two-way binding
Has  Magic Number Test

======================================

Test:  should check two-way binding of a signal to a decorator-based input/output pair
Has  Magic Number Test

======================================

Test:  should not allow a non-writable signal to be assigned to a model
Has  Magic Number Test

======================================

Test:  should allow a model signal to be bound to another model signal
Has  Magic Number Test

======================================

Test:  should check the event declared by a model input
Has  Magic Number Test

======================================

Test:  should report unset required model inputs
Has  Magic Number Test

======================================

Test:  should check generic two-way model binding with a primitive value
Has  Magic Number Test

======================================

Test:  should check generic two-way model binding with a signal value
Has  Magic Number Test

======================================

Test:  should report unwrapped signals assigned to a model in a one-way binding
Has  Magic Number Test

======================================

Test:  should error when declared using an ES private field
Has  Magic Number Test

======================================

Test:  should error when declared using a `private` field
Has  Magic Number Test

======================================

Test:  should allow using a `protected` field
Has  Magic Number Test

======================================

Test:  should report an error when using an ES private field
Has  Magic Number Test

======================================

Test:  should report an error when using a `private` field
Has  Magic Number Test

======================================

Test:  should allow an output using a `protected` field
Has  Magic Number Test

======================================

Test:  should report an error when used with query decorator
Has  Magic Number Test

======================================

Test:  should report an error when used on a static field
Has  Magic Number Test

======================================

Test:  should report an error when declared in @Directive metadata
Has  Magic Number Test

======================================

Test:  should report an error when declared in @Component metadata
Has  Magic Number Test

======================================

Test:  should report an error when a signal-based query function is used in metadata
Has  Magic Number Test

======================================

Test:  should report an error when `read` option is complex
Has  Magic Number Test

======================================

Test:  should error when a query is declared using an ES private field
Has  Magic Number Test

======================================

Test:  should allow query is declared on a `private` field
Has  Magic Number Test

======================================

Test:  should allow query is declared on a `protected` field
Has  Magic Number Test

======================================

Test:  should generate component metadata
Has  Magic Number Test

======================================

Test:  should index inline templates
Has  Magic Number Test

======================================

Test:  should index external templates
Has  Magic Number Test

======================================

Test:  should index templates compiled without preserving whitespace
Has  Magic Number Test

======================================

Test:  should generate information about used components
Has  Magic Number Test

======================================

Test:  should produce an error when unsupported type (@Injectable) is used in `deferredImports`
Has  Magic Number Test

======================================

Test:  should produce an error when unsupported type (@NgModule) is used in `deferredImports`
Has  Magic Number Test

======================================

Test:  should produce an error when components from `deferredImports` are used outside of defer blocks
Has  Magic Number Test

======================================

Test:  should produce an error the same component is referenced in both `deferredImports` and `imports`
Has  Magic Number Test

======================================

Test:  should produce an error when pipes from `deferredImports` are used outside of defer blocks
Has  Magic Number Test

======================================

Test:  should extract classes
Has  Magic Number Test

======================================

Test:  should extract class members
Has  Magic Number Test

======================================

Test:  should extract methods with overloads
Has  Magic Number Test

======================================

Test:  should not extract Angular-internal members
Has  Magic Number Test

======================================

Test:  should extract class method params
Has  Magic Number Test

======================================

Test:  should not extract private class members
Has  Magic Number Test

======================================

Test:  should extract member tags
Has  Magic Number Test

======================================

Test:  should extract member tags
Has  Magic Number Test

======================================

Test:  should extract getters and setters
Has  Magic Number Test

======================================

Test:  should extract abstract classes
Has  Magic Number Test

======================================

Test:  should extract class generic parameters
Has  Magic Number Test

======================================

Test:  should extract method generic parameters
Has  Magic Number Test

======================================

Test:  should extract inherited members
Has  Magic Number Test

======================================

Test:  should extract inherited getters/setters
Has  Magic Number Test

======================================

Test:  should extract public constructor parameters
Has  Magic Number Test

======================================

Test:  should not extract unexported statements
Has  Magic Number Test

======================================

Test:  should extract constants
Has  Magic Number Test

======================================

Test:  should extract multiple constant declarations in a single statement
Has  Magic Number Test

======================================

Test:  should extract non-primitive constants
Has  Magic Number Test

======================================

Test:  should extract an object literal marked as an enum
Has  Magic Number Test

======================================

Test:  should extract an object literal cast to a const and marked as an enum
Has  Magic Number Test

======================================

Test:  should extract class decorators that define members in an interface
Has  Magic Number Test

======================================

Test:  should extract property decorators
Has  Magic Number Test

======================================

Test:  should extract property decorators with a type alias
Has  Magic Number Test

======================================

Test:  should extract param decorators
Has  Magic Number Test

======================================

Test:  should extract standalone directive info
Has  Magic Number Test

======================================

Test:  should extract standalone component info
Has  Magic Number Test

======================================

Test:  should extract NgModule directive info
Has  Magic Number Test

======================================

Test:  should extract NgModule component info
Has  Magic Number Test

======================================

Test:  should extract input and output info for a directive
Has  Magic Number Test

======================================

Test:  should extract input and output info for a component
Has  Magic Number Test

======================================

Test:  should extract getters and setters as inputs
Has  Magic Number Test

======================================

Test:  should not extract Angular-private symbols
Has  Magic Number Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should extract enum info without explicit values
Has  Magic Number Test

======================================

Test:  should extract enum info with explicit values
Has  Magic Number Test

======================================

Test:  should extract functions
Has  Magic Number Test

======================================

Test:  should extract function with parameters
Has  Magic Number Test

======================================

Test:  should extract overloaded functions
Has  Magic Number Test

======================================

Test:  should extract function generics
Has  Magic Number Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should extract individual return types
Has  Magic Number Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should extract interfaces
Has  Magic Number Test

======================================

Test:  should extract interface members
Has  Magic Number Test

======================================

Test:  should extract call signatures
Has  Magic Number Test

======================================

Test:  should extract interface method params
Has  Magic Number Test

======================================

Test:  should not extract private interface members
Has  Magic Number Test

======================================

Test:  should extract member tags
Has  Magic Number Test

======================================

Test:  should extract getters and setters
Has  Magic Number Test

======================================

Test:  should extract inherited members
Has  Magic Number Test

======================================

Test:  should extract inherited getters/setters
Has  Magic Number Test

======================================

Test:  should extract jsdoc from all types of top-level statement
Has  Magic Number Test

======================================

Test:  should extract raw comment blocks
Has  Magic Number Test

======================================

Test:  should extract a description from a single-line jsdoc
Has  Magic Number Test

======================================

Test:  should extract a description from a multi-line jsdoc
Has  Magic Number Test

======================================

Test:  should extract jsdoc with an empty tag
Has  Magic Number Test

======================================

Test:  should extract jsdoc with a single-line tag
Has  Magic Number Test

======================================

Test:  should extract jsdoc with a multi-line tags
Has  Magic Number Test

======================================

Test:  should extract jsdoc with custom tags
Has  Magic Number Test

======================================

Test:  should extract a @see jsdoc tag
Has  Magic Number Test

======================================

Test:  should extract function parameter descriptions
Has  Magic Number Test

======================================

Test:  should extract class member descriptions
Has  Magic Number Test

======================================

Test:  should escape decorator names
Has  Magic Number Test

======================================

Test:  should extract NgModule info
Has  Magic Number Test

======================================

Test:  should extract standalone pipe info
Has  Magic Number Test

======================================

Test:  should extract NgModule pipe info
Has  Magic Number Test

======================================

Test:  should extract info from a named re-export
Has  Magic Number Test

======================================

Test:  should extract info from an aggregate re-export
Has  Magic Number Test

======================================

Test:  should extract info from a transitive re-export
Has  Magic Number Test

======================================

Test:  should extract info from an aliased re-export
Has  Magic Number Test

======================================

Test:  should extract type aliases based on primitives
Has  Magic Number Test

======================================

Test:  should extract type aliases for objects
Has  Magic Number Test

======================================

Test:  should produce invalid banana in box warning
Has  Magic Number Test

======================================

Test:  should produce invalid banana in box warning with external html file
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  by enabling extended template diagnostics when `strictTemplates` is enabled
Has  Magic Number Test

======================================

Test:  by emitting unconfigured diagnostics as is
Has  Magic Number Test

======================================

Test:  by emitting diagnostics with the default category
Has  Magic Number Test

======================================

Test:  by emitting diagnostics configured as `warning`
Has  Magic Number Test

======================================

Test:  by promoting diagnostics configured as `error`
Has  Magic Number Test

======================================

Test:  by throwing an error when given a bad category
Has  Magic Number Test

======================================

Test:  should not produce a diagnostic when exposing an aliased binding
Has  Magic Number Test

======================================

Test:  should not produce a diagnostic when exposing an inherited aliased binding
Has  Magic Number Test

======================================

Test:  should report an error when using a directive outside of rootDirs
Has  Magic Number Test

======================================

Test:  should report an error when a library entry-point does not export the symbol
Has  Magic Number Test

======================================

Test:  should handle an error in an unrelated file
Has  Magic Number Test

======================================

Test:  should emit all files after an error on the initial build
Has  Magic Number Test

======================================

Test:  should emit files introduced at the same time as an unrelated error
Has  Magic Number Test

======================================

Test:  should emit dependent files even in the face of an error
Has  Magic Number Test

======================================

Test:  should recover from an error in a component's metadata
Has  Magic Number Test

======================================

Test:  should recover from an error in a component that is part of a module
Has  Magic Number Test

======================================

Test:  should recover from an error in an external template
Has  Magic Number Test

======================================

Test:  should recover from an error even across multiple NgModules
Has  Magic Number Test

======================================

Test:  should remember a change to a TS file across broken builds
Has  Magic Number Test

======================================

Test:  should remember a change to a template file across broken builds
Has  Magic Number Test

======================================

Test:  should not recompile dependent components when public api is unchanged
Has  Unknown Test

======================================

Test:  should not recompile components that do not use a changed directive
Has  Unknown Test

======================================

Test:  should recompile components for which a directive usage is introduced
Has  Unknown Test

======================================

Test:  should recompile components for which a directive usage is removed
Has  Unknown Test

======================================

Test:  should recompile dependent components when an input is added
Has  Unknown Test

======================================

Test:  should recompile dependent components when an input is renamed
Has  Unknown Test

======================================

Test:  should recompile dependent components when an input is removed
Has  Unknown Test

======================================

Test:  should recompile dependent components when an output is added
Has  Unknown Test

======================================

Test:  should recompile dependent components when an output is renamed
Has  Unknown Test

======================================

Test:  should recompile dependent components when an output is removed
Has  Unknown Test

======================================

Test:  should recompile dependent components when exportAs clause changes
Has  Unknown Test

======================================

Test:  should recompile components when a pipe is newly matched because it was renamed
Has  Unknown Test

======================================

Test:  should recompile dependent components when an input becomes required
Has  Unknown Test

======================================

Test:  should not recompile components that use external declarations that are not changed
Has  Unknown Test

======================================

Test:  should recompile components once an external declaration is changed
Has  Unknown Test

======================================

Test:  should recompile components when their declaration name changes
Has  Unknown Test

======================================

Test:  should not recompile components that use a local directive
Has  Unknown Test

======================================

Test:  should recompile components when the name by which they are exported changes
Has  Unknown Test

======================================

Test:  should not recompile components when a directive is changed into a component
Has  Unknown Test

======================================

Test:  should recompile components when a directive and pipe are swapped
Has  Unknown Test

======================================

Test:  should not recompile components when a component is changed into a directive
Has  Unknown Test

======================================

Test:  should not recompile an NgModule nor component when remote scoping is unaffected
Has  Unknown Test

======================================

Test:  should recompile components when a matching directive is added in the direct scope
Has  Unknown Test

======================================

Test:  should recompile components when a matching directive is removed from the direct scope
Has  Unknown Test

======================================

Test:  should recompile components when a matching directive is added in the transitive scope
Has  Unknown Test

======================================

Test:  should recompile components when a matching directive is removed from the transitive scope
Has  Unknown Test

======================================

Test:  should not recompile components when a non-matching directive is added in scope
Has  Unknown Test

======================================

Test:  should recompile a component when a matching directive is added that first contains an error
Has  Magic Number Test

======================================

Test:  should correctly emit components when public API changes during a broken program
Has  Magic Number Test

======================================

Test:  should not crash if CLI does not provide getModifiedResourceFiles()
Has  Unknown Test

======================================

Test:  should compile incrementally with template type-checking turned on
Has  Unknown Test

======================================

Test:  should retain ambient types provided by auto-discovered @types
Has  Magic Number Test

======================================

Test:  should handle redirected source files
Has  Unknown Test

======================================

Test:  should repeat type errors across rebuilds, even if nothing has changed
Has  Magic Number Test

======================================

Test:  should pick up errors caused by changing an unrelated interface
Has  Magic Number Test

======================================

Test:  should recompile when a remote change happens to a scope
Has  Magic Number Test

======================================

Test:  should still pick up on errors from inlined type check blocks
Has  Magic Number Test

======================================

Test:  should still pick up on errors caused by inlined type constructors
Has  Magic Number Test

======================================

Test:  should re-analyze a component if a template file becomes available later
Has  Magic Number Test

======================================

Test:  should re-analyze if component style file becomes available later
Has  Magic Number Test

======================================

Test:  should type-check correctly when a backing input field is renamed
Has  Unknown Test

======================================

Test:  should type-check correctly when a backing signal input field is renamed
Has  Unknown Test

======================================

Test:  should type-check correctly when an decorator-input is changed to a signal input
Has  Unknown Test

======================================

Test:  should type-check correctly when signal input transform is added
Has  Magic Number Test

======================================

Test:  should type-check correctly when a backing output field is renamed
Has  Unknown Test

======================================

Test:  should type-check correctly when the backing field of an input is removed
Has  Magic Number Test

======================================

Test:  should type-check correctly when the backing field of an input is made readonly
Has  Unknown Test

======================================

Test:  should type-check correctly when an ngAcceptInputType field is declared
Has  Magic Number Test

======================================

Test:  should type-check correctly when an ngTemplateContextGuard field is declared
Has  Magic Number Test

======================================

Test:  should type-check correctly when an ngTemplateGuard field is declared
Has  Magic Number Test

======================================

Test:  should type-check correctly when the type of an ngTemplateGuard field changes
Has  Magic Number Test

======================================

Test:  should type-check correctly when the name of an ngTemplateGuard field changes
Has  Magic Number Test

======================================

Test:  should type-check correctly when directive becomes generic
Has  Unknown Test

======================================

Test:  should type-check correctly when a type parameter is added to a directive
Has  Unknown Test

======================================

Test:  should type-check correctly when directive removes its generic type parameter
Has  Unknown Test

======================================

Test:  should type-check correctly when a type parameter is removed from a directive
Has  Unknown Test

======================================

Test:  should type-check correctly when a generic type bound is added
Has  Magic Number Test

======================================

Test:  should type-check correctly when a generic type bound indirectly changes
Has  Magic Number Test

======================================

Test:  should type-check derived directives when the public API of the parent class is affected
Has  Magic Number Test

======================================

Test:  should type-check derived directives when the public API of the grandparent class is affected
Has  Magic Number Test

======================================

Test:  should type-check derived directives when a base class is added to a grandparent
Has  Magic Number Test

======================================

Test:  should type-check derived directives when a base class is removed from a grandparent
Has  Magic Number Test

======================================

Test:  should type-check derived directives when the base class of a grandparent changes
Has  Magic Number Test

======================================

Test:  should completely re-use structure when the first signal input is introduced
Has  Unknown Test

======================================

Test:  should completely re-use structure when an inline constructor generic directive starts using input signals
Has  Unknown Test

======================================

Test:  should show correct error message when using an external symbol for component template
Has  Magic Number Test

======================================

Test:  should show correct error message when using an external symbol for component styles array
Has  Magic Number Test

======================================

Test:  should show correct error message when using an external symbol for component styles
Has  Magic Number Test

======================================

Test:  should show correct error message when using an external symbol for component selector
Has  Magic Number Test

======================================

Test:  should show correct error message when using an external symbol for component @HostListener's event name argument
Has  Magic Number Test

======================================

Test:  should show correct error message when using an external symbol for directive @HostListener's event name argument
Has  Magic Number Test

======================================

Test:  should show correct error message when using an external symbol for component @HostBinding's argument
Has  Magic Number Test

======================================

Test:  should show correct error message when using an external symbol for directive @HostBinding's argument
Has  Magic Number Test

======================================

Test:  should show correct error message when using an external symbol for @Directive.exportAs argument
Has  Magic Number Test

======================================

Test:  should produce fatal diagnostics for host directives with forward references of externally imported directive
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should produce diagnostic for each custom decorator
Has  Magic Number Test

======================================

Test:  should show correct error message for syntatic template errors - case of inline template
Has  Magic Number Test

======================================

Test:  should show correct error message for syntatic template errors - case of external template
Has  Magic Number Test

======================================

Test:  for out of scope standalone components
Has  Magic Number Test

======================================

Test:  for out of scope ngModules
Has  Magic Number Test

======================================

Test:  for forward references in the same file
Has  Magic Number Test

======================================

Test:  should not report that broken components in modules are not components
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  should still perform schema checks in embedded views
Has  Magic Number Test

======================================

Test:  should wrap functions in "providers" list in NgModule
Has  Unknown Test

======================================

Test:  should wrap functions in "providers" list in Component
Has  Unknown Test

======================================

Test:  should wrap functions in "viewProviders" list in Component
Has  Unknown Test

======================================

Test:  should wrap functions in "providers" list in Directive
Has  Unknown Test

======================================

Test:  should error if @Input has been discovered
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should error if @Output has been discovered
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should error if @ViewChild has been discovered
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should error if @ViewChildren has been discovered
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should error if @ContentChild has been discovered
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should error if @HostBinding has been discovered
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should error if @HostListener has been discovered
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should warn when an NgModule id is defined as module.id, and not emit it
Has  Magic Number Test

======================================

Test:  should allow directives with no selector that are not in NgModules
Has  Magic Number Test

======================================

Test:  should be able to use abstract directive in other compilation units
Has  Magic Number Test

======================================

Test:  should not allow directives with no selector that are in NgModules
Has  Magic Number Test

======================================

Test:  should throw if Directive selector is an empty string
Has  Magic Number Test

======================================

Test:  should throw if invalid arguments are provided in @NgModule
Has  Unknown Test

======================================

Test:  should throw if multiple query decorators are used on the same field
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should throw error if @HostBinding decorator argument has unsupported type
Has  Unknown Test

======================================

Test:  should throw error if @HostBinding decorator has too many arguments
Has  Unknown Test

======================================

Test:  should throw error if @Directive.host field has wrong type
Has  Unknown Test

======================================

Test:  should throw error if @Directive.host field is an object with values that have wrong types
Has  Unknown Test

======================================

Test:  should throw error if @Directive.queries field has wrong type
Has  Unknown Test

======================================

Test:  should throw error if @Directive.queries object has incorrect values
Has  Unknown Test

======================================

Test:  should throw error if @Directive.queries object has incorrect values (refs to other decorators)
Has  Unknown Test

======================================

Test:  should throw error if @Injectable has incorrect argument
Has  Unknown Test

======================================

Test:  should produce a diagnostic if the transform value is not a function
Has  Unknown Test

======================================

Test:  should produce a diagnostic if the transform value in the inputs array is not a function
Has  Unknown Test

======================================

Test:  should produce a diangostic if the transform function first parameter has no arguments
Has  Unknown Test

======================================

Test:  should produce a diangostic if the transform function is generic
Has  Unknown Test

======================================

Test:  should produce a diangostic if there is a conflicting coercion member
Has  Unknown Test

======================================

Test:  should produce a diangostic if the transform function type cannot be referenced from the source file
Has  Unknown Test

======================================

Test:  should produce a diangostic if a sub-type of the transform function cannot be referenced from the source file
Has  Unknown Test

======================================

Test:  should produce a diangostic if a generic parameter of the transform function cannot be referenced from the source file
Has  Unknown Test

======================================

Test:  should produce a diangostic if transform type is not exported
Has  Unknown Test

======================================

Test:  should produce a diangostic if the transform value is not a function
Has  Unknown Test

======================================

Test:  should produce a diangostic if the first parameter of a transform is a spread
Has  Unknown Test

======================================

Test:  should produce a diangostic if a transform function has multiple signatures
Has  Unknown Test

======================================

Test:  should not compile a component and a directive annotation on the same class
Has  Magic Number Test

======================================

Test:  should give a compile-time error if an invalid @Injectable is used with no arguments
Has  Magic Number Test

======================================

Test:  should give a compile-time error if an invalid @Injectable is used with an argument
Has  Magic Number Test

======================================

Test:  should report an error when using a symbol from a type-only import clause as injection token
Has  Magic Number Test

======================================

Test:  should report an error when using a symbol from a type-only import specifier as injection token
Has  Magic Number Test

======================================

Test:  should report an error when using a primitive type as injection token
Has  Magic Number Test

======================================

Test:  should report an error when using a union type as injection token
Has  Magic Number Test

======================================

Test:  should report an error when using an interface as injection token
Has  Magic Number Test

======================================

Test:  should report an error when using a missing type as injection token
Has  Magic Number Test

======================================

Test:  should report an error when no type is present
Has  Magic Number Test

======================================

Test:  should give a compile-time error when a derived Directive inherits an invalid constructor
Has  Magic Number Test

======================================

Test:  should give a compile-time error when a derived Injectable inherits an invalid constructor
Has  Magic Number Test

======================================

Test:  should give a compile-time error when a derived Directive inherits from a non-decorated class
Has  Magic Number Test

======================================

Test:  should not give a compile-time error when a class inherits from foreign compilation unit
Has  Unknown Test

======================================

Test:  should compile when a derived Directive inherits an invalid constructor
Has  Unknown Test

======================================

Test:  should compile when a derived Injectable inherits an invalid constructor
Has  Unknown Test

======================================

Test:  should give a compile-time error when a derived Directive inherits from a non-decorated class
Has  Magic Number Test

======================================

Test:  should give a compile-time error if an invalid constructor is used
Has  Magic Number Test

======================================

Test:  should throw if ModuleWithProviders is missing its generic type argument
Has  Magic Number Test

======================================

Test:  should generate queries for components
Has  Magic Number Test

======================================

Test:  should generate queries for directives
Has  Magic Number Test

======================================

Test:  should handle queries that use forwardRef
Has  Magic Number Test

======================================

Test:  should handle queries that use an InjectionToken
Has  Magic Number Test

======================================

Test:  should throw in case unknown global target is provided
Has  Magic Number Test

======================================

Test:  should provide error location for invalid host properties
Has  Magic Number Test

======================================

Test:  should throw in case pipes are used in host listeners
Has  Magic Number Test

======================================

Test:  should throw in case pipes are used in host bindings (defined as `value | pipe`)
Has  Magic Number Test

======================================

Test:  should support bindings with Object builtin names
Has  Magic Number Test

======================================

Test:  should throw if `encapsulation` contains invalid value
Has  Magic Number Test

======================================

Test:  should throw if `changeDetection` contains invalid value
Has  Magic Number Test

======================================

Test:  should compile a banana-in-a-box inside of a template
Has  Unknown Test

======================================

Test:  should not throw when using an SVG-specific `title` tag
Has  Magic Number Test

======================================

Test:  should error for a namespace import as parameter type used for DI
Has  Magic Number Test

======================================

Test:  should not throw in case whitespaces and HTML comments are present inside <ng-content>
Has  Magic Number Test

======================================

Test:  should detect a simple cycle and fatally error if doing partial-compilation
Has  Magic Number Test

======================================

Test:  should not generate an error when a local ref is unresolved (outside of template type-checking)
Has  Magic Number Test

======================================

Test:  should not throw
Has  Magic Number Test

======================================

Test:  should provide a hint when importing an invalid NgModule from node_modules
Has  Unknown Test

======================================

Test:  should provide a hint when importing an invalid NgModule from a local library
Has  Unknown Test

======================================

Test:  should provide a hint when importing an invalid NgModule in the current program
Has  Unknown Test

======================================

Test:  should throw if @Component is missing a template
Has  Magic Number Test

======================================

Test:  should throw if `styleUrls` is defined incorrectly in @Component
Has  Magic Number Test

======================================

Test:  should not throw if "flatModuleOutFile" is set to null
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should report an error when a flat module index is requested but no entrypoint can be determined
Has  Magic Number Test

======================================

Test:  should report an error when a visible directive is not exported
Has  Magic Number Test

======================================

Test:  should report an error when a visible host directive is not exported
Has  Magic Number Test

======================================

Test:  should report an error when a deeply visible directive is not exported
Has  Magic Number Test

======================================

Test:  should report an error when a deeply visible module is not exported
Has  Magic Number Test

======================================

Test:  should not report an error when a non-exported module is imported by a visible one
Has  Magic Number Test

======================================

Test:  should not report an error when re-exporting an external symbol
Has  Magic Number Test

======================================

Test:  should error when two directives with the same declared name are exported from the same NgModule
Has  Magic Number Test

======================================

Test:  should execute custom transformers
Has  Magic Number Test

======================================

Test:  produces an error when not supported and version check is enabled
Has  Magic Number Test

======================================

Test:  does not produce an error when supported and version check is enabled
Has  Magic Number Test

======================================

Test:  does not produce an error when not supported but version check is disabled
Has  Magic Number Test

======================================

Test:  produces an error when not supported using default configuration
Has  Magic Number Test

======================================

Test:  should not error when inheriting a constructor from a decorated directive class
Has  Magic Number Test

======================================

Test:  should not error when inheriting a constructor without parameters
Has  Magic Number Test

======================================

Test:  should not error when inheriting from a class without a constructor
Has  Magic Number Test

======================================

Test:  should error when inheriting a constructor from an undecorated class
Has  Magic Number Test

======================================

Test:  should error when inheriting a constructor from undecorated grand super class
Has  Magic Number Test

======================================

Test:  should error when inheriting a constructor from undecorated grand grand super class
Has  Magic Number Test

======================================

Test:  should not error when inheriting a constructor from decorated directive or component classes in a .d.ts file
Has  Magic Number Test

======================================

Test:  should error when inheriting a constructor from an undecorated class in a .d.ts file
Has  Magic Number Test

======================================

Test:  should produce a diagnostic if an inherited required input is not bound
Has  Magic Number Test

======================================

Test:  should not produce a diagnostic if an inherited required input is bound
Has  Magic Number Test

======================================

Test:  should produce a diagnostic if both `styleUrls` and `styleUrl` are defined
Has  Magic Number Test

======================================

Test:  should error when an undecorated class, with a non-trivial constructor, is provided directly in a module
Has  Magic Number Test

======================================

Test:  should error when an undecorated class is provided via useClass
Has  Magic Number Test

======================================

Test:  should not error when an undecorated class is provided via useClass with deps
Has  Magic Number Test

======================================

Test:  should error when an undecorated class is provided via an array
Has  Magic Number Test

======================================

Test:  should error when an undecorated class is provided to a directive
Has  Magic Number Test

======================================

Test:  should error when an undecorated class is provided to a component
Has  Magic Number Test

======================================

Test:  should error when an undecorated class is provided to a component via viewProviders
Has  Magic Number Test

======================================

Test:  should not error when a class with a factory is provided
Has  Magic Number Test

======================================

Test:  should not error when an NgModule is provided
Has  Magic Number Test

======================================

Test:  should not error when an undecorated class from a declaration file is provided
Has  Magic Number Test

======================================

Test:  should not error when an undecorated class without a constructor from a declaration file is provided via useClass
Has  Magic Number Test

======================================

Test:  should not error if the undecorated class does not have a constructor or the constructor is blank
Has  Magic Number Test

======================================

Test:  should not error when an class with a factory definition and a non-trivial constructor in a declaration file is provided via useClass
Has  Magic Number Test

======================================

Test:  should emit a diagnostic for a template parsing error
Has  Magic Number Test

======================================

Test:  should emit a diagnostic for an expression parsing error
Has  Magic Number Test

======================================

Test:  should use a single character span for an unexpected EOF parsing error
Has  Magic Number Test

======================================

Test:  should emit both type-check diagnostics and parse error diagnostics
Has  Magic Number Test

======================================

Test:  should emit a diagnostic when a selector does not include a hyphen
Has  Magic Number Test

======================================

Test:  should emit a diagnostic when a selector includes uppercase letters
Has  Magic Number Test

======================================

Test:  should emit a diagnostic when a selector starts with a digit
Has  Magic Number Test

======================================

Test:  should emit a diagnostic when a selector starts with a hyphen
Has  Magic Number Test

======================================

Test:  should not emit a diagnostic for a component using an attribute selector
Has  Magic Number Test

======================================

Test:  should not emit a diagnostic for a component using a class selector
Has  Magic Number Test

======================================

Test:  reports a diagnostics on nested i18n sections
Has  Magic Number Test

======================================

Test:  reports a diagnostic on nested i18n sections with tags in between
Has  Magic Number Test

======================================

Test:  reports a diagnostic on nested i18n sections represented with <ng-continers>s
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should preserve fileoverview comments
Has  Magic Number Test

======================================

Test:  should detect when a random class is declared
Has  Magic Number Test

======================================

Test:  should detect when a declaration lives outside the current compilation
Has  Magic Number Test

======================================

Test:  should detect when a declaration is shared between two modules
Has  Magic Number Test

======================================

Test:  should detect when a declaration is repeated within the same module
Has  Magic Number Test

======================================

Test:  should detect when a declaration is shared between two modules, and is repeated within them
Has  Magic Number Test

======================================

Test:  should produce a transitive error when an invalid NgModule is exported
Has  Conditional Test Logic

======================================

Test:  should not produce component template type-check errors if its module is invalid
Has  Conditional Test Logic

======================================

Test:  should error when a non-standalone component tries to use imports
Has  Magic Number Test

======================================

Test:  should compile a standalone component with schema support
Has  Magic Number Test

======================================

Test:  should error when a non-standalone component tries to use schemas
Has  Magic Number Test

======================================

Test:  should error when a standalone component imports a non-standalone entity
Has  Magic Number Test

======================================

Test:  should error when a standalone component imports a ModuleWithProviders using a foreign function
Has  Magic Number Test

======================================

Test:  should error when a standalone component imports a ModuleWithProviders
Has  Magic Number Test

======================================

Test:  should error when a standalone component imports a non-standalone entity, with a specific error when that entity is not exported
Has  Magic Number Test

======================================

Test:  should type-check standalone component templates
Has  Magic Number Test

======================================

Test:  should not spam errors if imports is misconfigured
Has  Magic Number Test

======================================

Test:  should handle a forwardRef used inside `imports`
Has  Magic Number Test

======================================

Test:  should not allow a standalone component to be declared in an NgModule
Has  Magic Number Test

======================================

Test:  should not allow a standalone pipe to be declared in an NgModule
Has  Magic Number Test

======================================

Test:  should error when a standalone entity is exported by an NgModule without importing it first
Has  Magic Number Test

======================================

Test:  should error when a non-standalone entity is imported into an NgModule
Has  Magic Number Test

======================================

Test:  should map simple element with content
Has  Unknown Test

======================================

Test:  should map void element
Has  Unknown Test

======================================

Test:  should map a mix of interpolated and static content
Has  Unknown Test

======================================

Test:  should map a complex interpolated expression
Has  Unknown Test

======================================

Test:  should map interpolated properties
Has  Unknown Test

======================================

Test:  should map interpolation with pipe
Has  Unknown Test

======================================

Test:  should map a simple input binding expression
Has  Unknown Test

======================================

Test:  should map a complex input binding expression
Has  Unknown Test

======================================

Test:  should map a longhand input binding expression
Has  Unknown Test

======================================

Test:  should map a simple output binding expression
Has  Unknown Test

======================================

Test:  should map a complex output binding expression
Has  Unknown Test

======================================

Test:  should map a longhand output binding expression
Has  Unknown Test

======================================

Test:  should map a two-way binding expression
Has  Unknown Test

======================================

Test:  should map a longhand two-way binding expression
Has  Unknown Test

======================================

Test:  should map a class input binding
Has  Unknown Test

======================================

Test:  should map *ngIf scenario
Has  Unknown Test

======================================

Test:  should map ng-template [ngIf] scenario
Has  Unknown Test

======================================

Test:  should map *ngFor scenario
Has  Unknown Test

======================================

Test:  should map ng-template [ngFor] scenario
Has  Unknown Test

======================================

Test:  should map default and selected projection
Has  Unknown Test

======================================

Test:  should create simple i18n message source-mapping
Has  Unknown Test

======================================

Test:  should create placeholder source-mappings
Has  Unknown Test

======================================

Test:  should correctly handle collapsed whitespace in element placeholder source-mappings
Has  Unknown Test

======================================

Test:  should create tag (container) placeholder source-mappings
Has  Unknown Test

======================================

Test:  should create (simple string) inline template source-mapping
Has  Unknown Test

======================================

Test:  should create external template source-mapping
Has  Unknown Test

======================================

Test:  should create correct mappings when templateUrl is in a different rootDir
Has  Unknown Test

======================================

Test:  should check a simple component
Has  Unknown Test

======================================

Test:  should have accurate diagnostics in a template using crlf line endings
Has  Magic Number Test

======================================

Test:  should check regular attributes that are directive inputs
Has  Magic Number Test

======================================

Test:  should produce diagnostics when mapping to multiple fields and bound types are incorrect
Has  Magic Number Test

======================================

Test:  should support inputs and outputs with names that are not JavaScript identifiers
Has  Magic Number Test

======================================

Test:  should support one input property mapping to multiple fields
Has  Magic Number Test

======================================

Test:  should check event bindings
Has  Magic Number Test

======================================

Test:  ngIf should narrow on output types
Has  Magic Number Test

======================================

Test:  ngIf should narrow on output types across multiple guards
Has  Magic Number Test

======================================

Test:  should support a directive being used in its own input expression
Has  Magic Number Test

======================================

Test:  should support separate write types on inputs
Has  Magic Number Test

======================================

Test:  should check split two way binding
Has  Magic Number Test

======================================

Test:  when input and output go to different directives
Has  Magic Number Test

======================================

Test:  should type check a two-way binding to a generic property
Has  Magic Number Test

======================================

Test:  should type check a two-way binding to a function value
Has  Magic Number Test

======================================

Test:  should check the fallback content of ng-content
Has  Magic Number Test

======================================

Test:  should not allow references to the default content of ng-content
Has  Magic Number Test

======================================

Test:  should check expressions and their type when enabled
Has  Magic Number Test

======================================

Test:  should check expressions and their type when overall strictness is enabled
Has  Magic Number Test

======================================

Test:  should check expressions but not their type when not enabled
Has  Magic Number Test

======================================

Test:  should check expressions and their nullability when enabled
Has  Magic Number Test

======================================

Test:  should check expressions and their nullability when overall strictness is enabled
Has  Magic Number Test

======================================

Test:  should check expressions but not their nullability when not enabled
Has  Magic Number Test

======================================

Test:  should infer result type for safe navigation expressions when enabled
Has  Magic Number Test

======================================

Test:  should infer result type for safe navigation expressions when overall strictness is enabled
Has  Magic Number Test

======================================

Test:  should not infer result type for safe navigation expressions when not enabled
Has  Magic Number Test

======================================

Test:  should expressions and infer type of $event when enabled
Has  Magic Number Test

======================================

Test:  should expressions and infer type of $event when overall strictness is enabled
Has  Magic Number Test

======================================

Test:  should check expressions but not infer type of $event when not enabled
Has  Magic Number Test

======================================

Test:  should check expressions and let $event be of type AnimationEvent when enabled
Has  Magic Number Test

======================================

Test:  should check expressions and let $event be of type AnimationEvent when overall strictness is enabled
Has  Magic Number Test

======================================

Test:  should check expressions and let $event be of type any when not enabled
Has  Magic Number Test

======================================

Test:  should infer the type of DOM references when enabled
Has  Magic Number Test

======================================

Test:  should infer the type of DOM references when overall strictness is enabled
Has  Magic Number Test

======================================

Test:  should let the type of DOM references be any when not enabled
Has  Magic Number Test

======================================

Test:  should produce an error for text attributes when enabled
Has  Magic Number Test

======================================

Test:  should produce an error for text attributes when overall strictness is enabled
Has  Magic Number Test

======================================

Test:  should not produce an error for text attributes when not enabled
Has  Magic Number Test

======================================

Test:  should check expressions and infer type of $event when enabled
Has  Magic Number Test

======================================

Test:  should check expressions and infer type of $event when overall strictness is enabled
Has  Magic Number Test

======================================

Test:  should check expressions but not infer type of $event when not enabled
Has  Magic Number Test

======================================

Test:  should check basic usage of NgIf
Has  Unknown Test

======================================

Test:  should check usage of NgIf with explicit non-null guard
Has  Unknown Test

======================================

Test:  should check usage of NgIf when using "let" to capture $implicit context variable
Has  Unknown Test

======================================

Test:  should check usage of NgIf when using "as" to capture `ngIf` context variable
Has  Unknown Test

======================================

Test:  should check basic usage of NgFor
Has  Unknown Test

======================================

Test:  should report an error inside the NgFor template
Has  Magic Number Test

======================================

Test:  should accept an NgFor iteration over an any-typed value
Has  Unknown Test

======================================

Test:  should accept NgFor iteration over a QueryList
Has  Unknown Test

======================================

Test:  should accept NgFor iteration when trackBy is used with a wider type
Has  Unknown Test

======================================

Test:  should accept NgFor iteration when trackBy is used with an `any` array
Has  Unknown Test

======================================

Test:  should reject NgFor iteration when trackBy is incompatible with item type
Has  Magic Number Test

======================================

Test:  should infer the context of NgFor
Has  Magic Number Test

======================================

Test:  should allow the implicit value of an NgFor to be invoked
Has  Unknown Test

======================================

Test:  should infer the context of NgIf
Has  Magic Number Test

======================================

Test:  should report an error with an unknown local ref target
Has  Magic Number Test

======================================

Test:  should treat an unknown local ref target as type any
Has  Magic Number Test

======================================

Test:  should report an error with an unknown pipe
Has  Magic Number Test

======================================

Test:  should report an error with an unknown pipe even if `fullTemplateTypeCheck` is disabled
Has  Magic Number Test

======================================

Test:  should report an error with pipe bindings
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should constrain types using type parameter bounds
Has  Magic Number Test

======================================

Test:  should be treated as 'any' without strictTemplates
Has  Magic Number Test

======================================

Test:  should be correctly inferred under strictTemplates
Has  Magic Number Test

======================================

Test:  should properly type-check inherited directives
Has  Magic Number Test

======================================

Test:  should properly type-check inherited directives from external libraries
Has  Magic Number Test

======================================

Test:  should detect an illegal write to a template variable
Has  Magic Number Test

======================================

Test:  should detect a duplicate variable declaration
Has  Magic Number Test

======================================

Test:  should still type-check when fileToModuleName aliasing is enabled, but alias exports are not in the .d.ts file
Has  Magic Number Test

======================================

Test:  should coerce an input using a transform function if provided
Has  Magic Number Test

======================================

Test:  should apply coercion members of base classes
Has  Magic Number Test

======================================

Test:  should give an error if the binding expression type is not accepted by the coercion function
Has  Magic Number Test

======================================

Test:  should give an error for undefined bindings into regular inputs when coercion members are present
Has  Magic Number Test

======================================

Test:  should type check using the first parameter type of a simple transform function
Has  Magic Number Test

======================================

Test:  should type checking using the first parameter type of a simple inline transform function
Has  Magic Number Test

======================================

Test:  should type check using the transform function specified in the `inputs` array
Has  Magic Number Test

======================================

Test:  should type check using the first parameter type of a built-in function
Has  Magic Number Test

======================================

Test:  should type check an imported transform function with a complex type
Has  Magic Number Test

======================================

Test:  should type check an imported transform function with a complex type from an external library
Has  Magic Number Test

======================================

Test:  should type check an input with a generic transform type
Has  Magic Number Test

======================================

Test:  should type check an input with a generic transform union type
Has  Magic Number Test

======================================

Test:  should type check an input with a generic transform type from an external library
Has  Magic Number Test

======================================

Test:  should allow any value to be assigned if the transform function has no parameters
Has  Magic Number Test

======================================

Test:  should type check static inputs against the transform function type
Has  Magic Number Test

======================================

Test:  should type check inputs with a transform function coming from a host directive
Has  Magic Number Test

======================================

Test:  should type check inputs with a transform inherited from a parent class
Has  Magic Number Test

======================================

Test:  should type check inputs with transforms referring to an ambient type
Has  Magic Number Test

======================================

Test:  should type check a two-way binding to an input with a transform
Has  Magic Number Test

======================================

Test:  should produce diagnostics for inputs which assign to readonly, private, and protected fields
Has  Unknown Test

======================================

Test:  should produce diagnostics for inputs which assign to readonly, private, and protected fields inherited from a base class
Has  Unknown Test

======================================

Test:  should report invalid type assignment when field name is not a valid JS identifier
Has  Magic Number Test

======================================

Test:  should not produce diagnostics for correct inputs which assign to readonly, private, or protected fields
Has  Magic Number Test

======================================

Test:  should not produce diagnostics for correct inputs which assign to readonly, private, or protected fields inherited from a base class
Has  Magic Number Test

======================================

Test:  should produce diagnostics when assigning incorrect type to readonly, private, or protected fields
Has  Magic Number Test

======================================

Test:  should not produce diagnostics for undeclared inputs
Has  Magic Number Test

======================================

Test:  should produce diagnostics for invalid expressions when assigned into an undeclared input
Has  Magic Number Test

======================================

Test:  should not produce diagnostics for undeclared inputs inherited from a base class
Has  Magic Number Test

======================================

Test:  should check for unknown elements
Has  Magic Number Test

======================================

Test:  should check for unknown elements in standalone components
Has  Magic Number Test

======================================

Test:  should check for unknown properties in standalone components
Has  Magic Number Test

======================================

Test:  should have a descriptive error for unknown elements that contain a dash
Has  Magic Number Test

======================================

Test:  should have a descriptive error for unknown elements that contain a dash in standalone components
Has  Magic Number Test

======================================

Test:  should check for unknown properties
Has  Magic Number Test

======================================

Test:  should have a descriptive error for unknown properties with an "ng-" prefix
Has  Magic Number Test

======================================

Test:  should convert property names when binding special properties
Has  Magic Number Test

======================================

Test:  should produce diagnostics for custom-elements-style elements when not using the CUSTOM_ELEMENTS_SCHEMA
Has  Magic Number Test

======================================

Test:  should allow HTML elements inside SVG foreignObject
Has  Magic Number Test

======================================

Test:  should allow HTML elements without explicit namespace inside SVG foreignObject
Has  Magic Number Test

======================================

Test:  should check for unknown elements inside an SVG foreignObject
Has  Magic Number Test

======================================

Test:  should check for unknown elements without explicit namespace inside an SVG foreignObject
Has  Magic Number Test

======================================

Test:  should allow math elements
Has  Magic Number Test

======================================

Test:  should be correct for direct templates
Has  Magic Number Test

======================================

Test:  should be correct for indirect templates
Has  Magic Number Test

======================================

Test:  should be correct for external templates
Has  Magic Number Test

======================================

Test:  should error if "fullTemplateTypeCheck" is false when "strictTemplates" is true
Has  Magic Number Test

======================================

Test:  should not error if "fullTemplateTypeCheck" is false when "strictTemplates" is false
Has  Magic Number Test

======================================

Test:  should not error if "fullTemplateTypeCheck" is not set when "strictTemplates" is true
Has  Magic Number Test

======================================

Test:  should not error if "fullTemplateTypeCheck" is true set when "strictTemplates" is true
Has  Magic Number Test

======================================

Test:  should error if "strictTemplates" is false when "extendedDiagnostics" is configured
Has  Magic Number Test

======================================

Test:  should error if "extendedDiagnostics.defaultCategory" is set to an unknown value
Has  Magic Number Test

======================================

Test:  should error if "extendedDiagnostics.checks" contains an unknown check
Has  Magic Number Test

======================================

Test:  should error if "extendedDiagnostics.checks" contains an unknown diagnostic category
Has  Magic Number Test

======================================

Test:  should allow for complete program reuse during incremental compilations
Has  Unknown Test

======================================

Test:  generates diagnostic when the library does not export the host directive
Has  Magic Number Test

======================================

Test:  should report if a deferred trigger reference does not exist
Has  Magic Number Test

======================================

Test:  should report if a deferred trigger reference is in a different embedded view
Has  Magic Number Test

======================================

Test:  should narrow types inside the expression, even if aliased
Has  Magic Number Test

======================================

Test:  should narrow signal reads when aliased
Has  Magic Number Test

======================================

Test:  should not allow usages of pipes inside the tracking expression
Has  Magic Number Test

======================================

Test:  should report when an @if block prevents an element from being projected
Has  Magic Number Test

======================================

Test:  should report when an @if block prevents a template from being projected
Has  Magic Number Test

======================================

Test:  should report when an @else block prevents content projection
Has  Magic Number Test

======================================

Test:  should report when an @else if block prevents content projection
Has  Magic Number Test

======================================

Test:  should report when an @for block prevents content from being projected
Has  Magic Number Test

======================================

Test:  should report when an @empty block prevents content from being projected
Has  Magic Number Test

======================================

Test:  should report nodes that are targeting different slots but cannot be projected
Has  Magic Number Test

======================================

Test:  should report nodes that are targeting the same slot but cannot be projected
Has  Magic Number Test

======================================

Test:  should report when preserveWhitespaces may affect content projection
Has  Magic Number Test

======================================

Test:  should not report when there is only one root node
Has  Magic Number Test

======================================

Test:  should not report when there are comments at the root of the control flow node
Has  Magic Number Test

======================================

Test:  should not report when the component only has a catch-all slot
Has  Magic Number Test

======================================

Test:  should allow the content projection diagnostic to be disabled individually
Has  Magic Number Test

======================================

Test:  should allow the content projection diagnostic to be disabled via `defaultCategory`
Has  Magic Number Test

======================================

Test:  should report when an @case block prevents an element from being projected
Has  Magic Number Test

======================================

Test:  should report when an @default block prevents an element from being projected
Has  Magic Number Test

======================================

Test:  should infer the type of a let declaration
Has  Magic Number Test

======================================

Test:  should infer the type of a nested let declaration
Has  Magic Number Test

======================================

Test:  should check the expression of a let declaration
Has  Magic Number Test

======================================

Test:  should narrow the type of a let declaration used directly in the template
Has  Magic Number Test

======================================

Test:  should narrow the type of a let declaration inside an event listener
Has  Magic Number Test

======================================

Test:  should be able to access the let declaration from a parent embedded view
Has  Magic Number Test

======================================

Test:  should not be able to access a let declaration from a child embedded view
Has  Magic Number Test

======================================

Test:  should not be able to access a let declaration from a sibling embedded view
Has  Magic Number Test

======================================

Test:  should give precedence to a local let declaration over a component property
Has  Magic Number Test

======================================

Test:  should give precedence to a local let declaration over one from a parent view
Has  Magic Number Test

======================================

Test:  should not allow multiple @let declarations with the same name within a scope
Has  Magic Number Test

======================================

Test:  should not allow @let declaration with the same name as a local reference defined before it
Has  Magic Number Test

======================================

Test:  should not allow @let declaration with the same name as a local reference defined after it
Has  Magic Number Test

======================================

Test:  should not allow @let declaration with the same name as a template variable
Has  Magic Number Test

======================================

Test:  should allow @let declaration with the same name as a local reference defined in a parent view
Has  Magic Number Test

======================================

Test:  should not allow a let declaration to be referenced before it is defined
Has  Magic Number Test

======================================

Test:  should not allow a let declaration to be referenced before it is defined inside a child view
Has  Magic Number Test

======================================

Test:  should not be able to access let declarations via `this`
Has  Magic Number Test

======================================

Test:  should not allow a let declaration to refer to itself
Has  Magic Number Test

======================================

Test:  should produce a single diagnostic if a @let declaration refers to properties on itself
Has  Magic Number Test

======================================

Test:  should produce a single diagnostic if a @let declaration invokes itself
Has  Magic Number Test

======================================

Test:  should allow event listeners to refer to a declaration before it has been defined
Has  Magic Number Test

======================================

Test:  should allow child views to refer to a declaration before it has been defined
Has  Magic Number Test

======================================

Test:  should not allow a let declaration value to be changed
Has  Magic Number Test

======================================

Test:  should not allow a let declaration value to be changed through a `this` access
Has  Magic Number Test

======================================

Test:  should allow two-way bindings to signal-based let declarations
Has  Magic Number Test

======================================

Test:  should report @let declaration used in the expression of a @if block before it is defined
Has  Magic Number Test

======================================

Test:  should report @let declaration used in the expression of a @for block before it is defined
Has  Magic Number Test

======================================

Test:  should report @let declaration used in the expression of a @switch block before it is defined
Has  Magic Number Test

======================================

Test:  should pass
Has  EmptyTest
Has  Magic Number Test

======================================

Test:  should not emit js
Has  Unknown Test

======================================

Test:  should handle redirected source files
Has  Unknown Test

======================================

Test:  should recover from static analysis errors
Has  Magic Number Test

======================================

Test:  should handle strings
Has  Magic Number Test

======================================

Test:  should handle empty arrays
Has  Magic Number Test

======================================

Test:  should handle arrays of same length
Has  Magic Number Test

======================================

Test:  should handle arrays of different length
Has  Magic Number Test

======================================

Test:  should correctly compare versions
Has  Magic Number Test

======================================

Test:  dispatches event
Has  Magic Number Test

======================================

Test:  dispatches event when targetElement is actionElement
Has  Magic Number Test

======================================

Test:  dispatch event to child and ignore parent
Has  Magic Number Test

======================================

Test:  dispatch event through owner
Has  Magic Number Test

======================================

Test:  dispatches modified click event
Has  Magic Number Test

======================================

Test:  caches jsaction attribute
Has  Magic Number Test

======================================

Test:  re-parses jsaction attribute if the action cache is cleared
Has  Magic Number Test

======================================

Test:  handles trailing semicolon in jsaction attribute
Has  Magic Number Test

======================================

Test:  handles jsaction attributes without action names, first action
Has  Magic Number Test

======================================

Test:  handles jsaction attributes without action names, last action
Has  Magic Number Test

======================================

Test:  does not handle jsaction attributes without event type or action name
Has  Magic Number Test

======================================

Test:  dispatches event from shadow dom
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  replays to dispatchDelegate
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  replays to event replayer
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  prevents default for click on anchor child
Has  Magic Number Test

======================================

Test:  prevents default for modified click on anchor child
Has  Magic Number Test

======================================

Test:  does not prevent default for modified click on non-anchor child
Has  Magic Number Test

======================================

Test:  dispatches keydown as click event
Has  Magic Number Test

======================================

Test:  dispatches keydown event
Has  Magic Number Test

======================================

Test:  dispatches clickonly event
Has  Magic Number Test

======================================

Test:  dispatches click event to click handler rather than clickonly
Has  Magic Number Test

======================================

Test:  prevents default for enter key on anchor child
Has  Magic Number Test

======================================

Test:  prevents default for enter key on anchor child
Has  Magic Number Test

======================================

Test:  dispatches matching mouseover as mouseenter event
Has  Magic Number Test

======================================

Test:  does not dispatch non-matching mouseover event as mouseenter
Has  Magic Number Test

======================================

Test:  dispatches matching mouseout as mouseleave event
Has  Magic Number Test

======================================

Test:  does not dispatch non-matching mouseout event as mouseleave
Has  Magic Number Test

======================================

Test:  dispatches matching pointerover as pointerenter event
Has  Magic Number Test

======================================

Test:  does not dispatch non-matching pointerover event as pointerenter
Has  Magic Number Test

======================================

Test:  dispatches matching pointerout as pointerleave event
Has  Magic Number Test

======================================

Test:  does not dispatch non-matching pointerout event as pointerleave
Has  Magic Number Test

======================================

Test:  dispatches to multiple elements
Has  Magic Number Test

======================================

Test:  dispatches to multiple elements in replay
Has  Magic Number Test

======================================

Test:  stops dispatch if `stopPropagation` is called
Has  Magic Number Test

======================================

Test:  stops dispatch if `stopPropagation` is called in replay
Has  Magic Number Test

======================================

Test:  stops dispatch if `stopImmediatePropagation` is called
Has  Magic Number Test

======================================

Test:  is action key event fails on invalid key
Has  Magic Number Test

======================================

Test:  is action key event mac enter
Has  Conditional Test Logic

======================================

Test:  recreate touch event with touches as click
Has  Magic Number Test

======================================

Test:  recreate touch event with changed touches as click
Has  Magic Number Test

======================================

Test:  recreate touch event with empty changedTouches and touches as click
Has  Magic Number Test

======================================

Test:  recreate touch event as click, has touch data
Has  Magic Number Test

======================================

Test:  recreate touch event as click, behavior
Has  Magic Number Test

======================================

Test:  recreate touch event as click, time stamp
Has  Magic Number Test

======================================

Test:  queues events until dispatcher is registered
Has  Magic Number Test

======================================

Test:  dispatches event
Has  Magic Number Test

======================================

Test:  dispatches event for `webkitanimationend` alias event type
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  cleanUp removes all event listeners and containers
Has  Magic Number Test

======================================

Test:  exposes event handlers with `handler()`
Has  Magic Number Test

======================================

Test:  dispatches events in outer container
Has  Magic Number Test

======================================

Test:  dispatches events in inner container
Has  Magic Number Test

======================================

Test:  dispatches events in outer container, inner registered first
Has  Magic Number Test

======================================

Test:  dispatches events in inner container, inner container registered first
Has  Magic Number Test

======================================

Test:  dispatches events in inner container, inner container removed
Has  Magic Number Test

======================================

Test:  early events are dispatched
Has  Magic Number Test

======================================

Test:  early capture events are dispatched
Has  Magic Number Test

======================================

Test:  early events are dispatched when target is cleared
Has  Magic Number Test

======================================

Test:  early mouseout dispatched as mouseleave and mouseout
Has  Magic Number Test

======================================

Test:  early mouseout dispatched as only mouseleave
Has  Magic Number Test

======================================

Test:  should support emitting values via BehaviorSubject
Has  Magic Number Test

======================================

Test:  should support emitting values via ReplaySubject
Has  Magic Number Test

======================================

Test:  should support emitting values via Subject
Has  Magic Number Test

======================================

Test:  should support emitting values via EventEmitter
Has  Magic Number Test

======================================

Test:  should support explicit unsubscribing
Has  Magic Number Test

======================================

Test:  should not yield more source values if directive is destroyed
Has  Magic Number Test

======================================

Test:  should be a noop when the source observable completes
Has  Magic Number Test

======================================

Test:  should not handle errors from the source observable
Has  Magic Number Test

======================================

Test:  should work with basic `output()`
Has  Magic Number Test

======================================

Test:  should complete observable upon directive destroy
Has  Magic Number Test

======================================

Test:  should allow subscription
Has  Magic Number Test

======================================

Test:  should complete observable upon directive destroy
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should complete an observable when the current context is destroyed
Has  Magic Number Test

======================================

Test:  should allow a manual DestroyRef to be passed
Has  Magic Number Test

======================================

Test:  should produce an observable that tracks a signal
Has  Magic Number Test

======================================

Test:  should propagate errors from the signal
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should still monitor the signal if the Observable has no active subscribers
Has  Magic Number Test

======================================

Test:  stops monitoring the signal once injector is destroyed
Has  Magic Number Test

======================================

Test:  does not track downstream signal reads in the effect
Has  Magic Number Test

======================================

Test:  should reflect the last emitted value of an Observable
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should notify when the last emitted value of an Observable changes
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should propagate an error returned by the Observable
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should unsubscribe when the current context is destroyed
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should unsubscribe when an explicitly provided injector is destroyed
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should not unsubscribe when manualCleanup is passed
Has  Magic Number Test

======================================

Test:  should throw the error back to RxJS if rejectErrors is set
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should return `undefined` if read before a value is emitted
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should not throw if a value is emitted before called
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should not throw if a value emits synchronously on creation
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should return the initial value if called before a value is emitted
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should not return the initial value if called after a value is emitted
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should not update for values considered equal
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should update when values are reference equal but equality function says otherwise
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should support `toSignal` as a class member initializer
Has  Magic Number Test

======================================

Test:  should work
Has  Unknown Test

======================================

Test:  should work
Has  Unknown Test

======================================

Test:  
Has  Unknown Test

======================================

Test:  
Has  Unknown Test

======================================

Test:  should not throw if non-existent symbols are imported with rootDirs
Has  Exception Handling

======================================

Test:  should throw an error if no files match the passed-in path
Has  Exception Handling

======================================

Test:  should throw an error if a path outside of the project is passed in
Has  Exception Handling

======================================

Test:  should log template migration errors to the console
Has  Unknown Test

======================================

Test:  should flag async imports and usages
Has  Magic Number Test

======================================

Test:  should detect build tsconfig path inside of angular.json file
Has  Magic Number Test

======================================

Test:  should detect test tsconfig path inside of angular.json file
Has  Magic Number Test

======================================

Test:  should detect test tsconfig path inside of .angular.json file
Has  Magic Number Test

======================================

Test:  should not return duplicate tsconfig files
Has  Magic Number Test

======================================

Test:  should throw an error if no files match the passed-in path
Has  Exception Handling

======================================

Test:  should throw an error if a path outside of the project is passed in
Has  Exception Handling

======================================

Test:  should throw an error if the passed in path is a file
Has  Exception Handling

======================================

Test:  should throw an error if no files match the passed-in path
Has  Exception Handling

======================================

Test:  should throw an error if a path outside of the project is passed in
Has  Exception Handling

======================================

Test:  should throw an error if the passed in path is a file
Has  Exception Handling

======================================

Test:  should throw an error if the component is in the same file as the routes declaration
Has  Exception Handling

======================================

Test:  should not migrate already lazy loaded standalone components
Has  Exception Handling

======================================

Test:  should not migrate routes if the routes array doesnt have type and is not referenced
Has  Exception Handling

======================================

Test:  should run with the expected timing
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should refresh views if state changed before user-defined render hooks
Has  Magic Number Test

======================================

Test:  should run with the correct timing
Has  Magic Number Test

======================================

Test:  should run with ComponentFixture.detectChanges
Has  Magic Number Test

======================================

Test:  should run hooks once after tick even if there are multiple root views
Has  Magic Number Test

======================================

Test:  should unsubscribe when calling destroy
Has  Magic Number Test

======================================

Test:  should defer nested hooks to the next cycle
Has  Magic Number Test

======================================

Test:  should pass data between phases
Has  Magic Number Test

======================================

Test:  should run with the correct timing
Has  Magic Number Test

======================================

Test:  should unsubscribe when calling destroy
Has  Magic Number Test

======================================

Test:  should defer nested hooks to the next cycle
Has  Magic Number Test

======================================

Test:  allows writing to a signal in afterRender
Has  Magic Number Test

======================================

Test:  allows updating state and calling markForCheck in afterRender
Has  Magic Number Test

======================================

Test:  allows updating state and calling markForCheck in afterRender, outside of change detection
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  throws error when causing infinite updates
Has  Magic Number Test

======================================

Test:  should not run
Has  Magic Number Test

======================================

Test:  should not run
Has  Magic Number Test

======================================

Test:  should run
Has  Magic Number Test

======================================

Test:  should sanitize attribute values
Has  Magic Number Test

======================================

Test:  should handle all varieties of interpolation
Has  Magic Number Test

======================================

Test:  should support two-way binding to a signal
Has  Magic Number Test

======================================

Test:  should support two-way binding to a non-signal value
Has  Magic Number Test

======================================

Test:  should support two-way binding a signal to a non-model input/output pair
Has  Magic Number Test

======================================

Test:  should support a one-way property binding to a model
Has  Magic Number Test

======================================

Test:  should emit to the change output when the model changes
Has  Magic Number Test

======================================

Test:  should not emit to the change event when then property binding changes
Has  Magic Number Test

======================================

Test:  should support binding to the model input and output separately
Has  Magic Number Test

======================================

Test:  should support two-way binding to a model with an alias
Has  Magic Number Test

======================================

Test:  should support binding to an aliased model input and output separately
Has  Magic Number Test

======================================

Test:  should throw if a required model input is accessed too early
Has  Magic Number Test

======================================

Test:  should throw if a required model input is updated too early
Has  Magic Number Test

======================================

Test:  should stop emitting to the output on destroy
Has  Magic Number Test

======================================

Test:  should support inherited model inputs
Has  Magic Number Test

======================================

Test:  should reflect changes to a two-way-bound signal in the DOM
Has  Magic Number Test

======================================

Test:  should support ngOnChanges for two-way model bindings
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not throw for mixed model and output subscriptions
Has  Magic Number Test

======================================

Test:  should support two-way binding to a signal @for loop variable
Has  Magic Number Test

======================================

Test:  should support emitting values
Has  Magic Number Test

======================================

Test:  should support emitting void values
Has  Magic Number Test

======================================

Test:  should error when emitting to a destroyed output
Has  Magic Number Test

======================================

Test:  should error when subscribing to a destroyed output
Has  Magic Number Test

======================================

Test:  should run listeners outside of `emit` reactive context
Has  Magic Number Test

======================================

Test:  should support using a `Subject` as source
Has  Magic Number Test

======================================

Test:  should support using a `BehaviorSubject` as source
Has  Magic Number Test

======================================

Test:  should support using an `EventEmitter` as source
Has  Magic Number Test

======================================

Test:  should support lazily creating an observer upon subscription
Has  Magic Number Test

======================================

Test:  should report subscription listener errors to `ErrorHandler` and continue
Has  Magic Number Test

======================================

Test:  should be possible to bind to an input
Has  Magic Number Test

======================================

Test:  should be possible to use an input in a computed expression
Has  Magic Number Test

======================================

Test:  should be possible to use an input in an effect
Has  Magic Number Test

======================================

Test:  should support transforms
Has  Magic Number Test

======================================

Test:  should not run transforms lazily
Has  Magic Number Test

======================================

Test:  should throw error if a required input is accessed too early
Has  Magic Number Test

======================================

Test:  should be possible to bind to an inherited input
Has  Magic Number Test

======================================

Test:  should support two-way binding to signal input and @Output decorated member
Has  Magic Number Test

======================================

Test:  should query for multiple elements in a template
Has  Magic Number Test

======================================

Test:  should return the same array instance when there were no changes in results
Has  Magic Number Test

======================================

Test:  should not mark signal as dirty when a child query result does not change
Has  Magic Number Test

======================================

Test:  should return the same array instance when there were no changes in results after view manipulation
Has  Magic Number Test

======================================

Test:  should be empty when no query matches exist
Has  Magic Number Test

======================================

Test:  should run content queries defined on components
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should run content queries defined on directives
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not return partial results during the first-time view rendering
Has  Magic Number Test

======================================

Test:  should be empty when no query matches exist
Has  Magic Number Test

======================================

Test:  should not dirty a children query when a list of matches does not change - a view with matches
Has  Magic Number Test

======================================

Test:  should not dirty a children query when a list of matches does not change - a view with another container
Has  Magic Number Test

======================================

Test:  should allow specifying both types of queries in one component
Has  Magic Number Test

======================================

Test:  should allow combination via inheritance of both types of queries in one component
Has  Magic Number Test

======================================

Test:  should bootstrap using #id selector
Has  Exception Handling
Has  Redundant Print

======================================

Test:  should bootstrap using one of selectors from the list
Has  Exception Handling
Has  Redundant Print

======================================

Test:  should allow injecting VCRef into the root (bootstrapped) component
Has  Magic Number Test

======================================

Test:  should cleanup ApplicationRef when Injector is destroyed
Has  Magic Number Test

======================================

Test:  should cleanup ApplicationRef when ComponentRef is destroyed
Has  Magic Number Test

======================================

Test:  should not throw in case ComponentRef is destroyed and Injector is destroyed after that
Has  Magic Number Test

======================================

Test:  should not throw in case Injector is destroyed and ComponentRef is destroyed after that
Has  Magic Number Test

======================================

Test:  should throw when standalone component is used in @NgModule.bootstrap
Has  Exception Handling

======================================

Test:  should throw when standalone component wrapped in `forwardRef` is used in @NgModule.bootstrap
Has  Exception Handling

======================================

Test:  should unsubscribe from `onError` when Injector is destroyed
Has  Magic Number Test

======================================

Test:  should not log an error when passing identical bootstrap options
Has  Unknown Test

======================================

Test:  should properly remove stale dependencies from the signal graph
Has  Magic Number Test

======================================

Test:  continues to refresh views until none are dirty
Has  Conditional Test Logic

======================================

Test:  refreshes root view until it is no longer dirty
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  refreshes all views attached to ApplicationRef until no longer dirty
Has  Magic Number Test

======================================

Test:  marks view dirty
Has  Magic Number Test

======================================

Test:  does not refresh a component when a signal notifies but isn't actually updated
Has  Magic Number Test

======================================

Test:  should not mark components as dirty when signal is read in a constructor of a child component
Has  Magic Number Test

======================================

Test:  should not mark components as dirty when signal is read in an input of a child component
Has  Magic Number Test

======================================

Test:  should not mark components as dirty when signal is read in a query result setter
Has  Magic Number Test

======================================

Test:  can read a signal in a host binding in root view
Has  Magic Number Test

======================================

Test:  can read a signal in a host binding
Has  Magic Number Test

======================================

Test:  should be able to write to signals during change-detecting a given template, in advance()
Has  Magic Number Test

======================================

Test:  should allow writing to signals during change-detecting a given template, at the end
Has  Magic Number Test

======================================

Test:  does not refresh view if signal marked dirty but did not change
Has  Magic Number Test

======================================

Test:  refreshes entire component, including embedded views, when signal updates
Has  Magic Number Test

======================================

Test:  tracks signal updates if embedded view is change detected directly before attaching
Has  Magic Number Test

======================================

Test:  refreshes when signal changes, but does not refresh non-dirty parent
Has  Magic Number Test

======================================

Test:  does not run afterViewChecked hooks because parent view was not dirty (those hooks are executed by the parent)
Has  Magic Number Test

======================================

Test:  can refresh the root of change detection if updated after checked
Has  Magic Number Test

======================================

Test:  destroys all signal consumers when destroying the view tree
Has  Magic Number Test

======================================

Test:  should detect changes for embedded views attached to ApplicationRef
Has  Magic Number Test

======================================

Test:  should not detect changes for OnPush embedded views when they are not dirty
Has  Magic Number Test

======================================

Test:  should not detect changes in child embedded views while they are detached
Has  Magic Number Test

======================================

Test:  should not detect changes in child component views while they are detached
Has  Magic Number Test

======================================

Test:  should mark OnPush ancestor of dynamically created component views as dirty
Has  Magic Number Test

======================================

Test:  should support re-enterant change detection
Has  Unknown Test

======================================

Test:  should call doCheck even when OnPush components are not dirty
Has  Magic Number Test

======================================

Test:  should check OnPush components in update mode when inputs change
Has  Magic Number Test

======================================

Test:  should check OnPush components in update mode when component events occur
Has  Magic Number Test

======================================

Test:  should not check OnPush components in update mode when parent events occur
Has  Magic Number Test

======================================

Test:  should check parent OnPush components in update mode when child events occur
Has  Magic Number Test

======================================

Test:  should NOT call component doCheck when called by a component
Has  Magic Number Test

======================================

Test:  should NOT check the component parent when called by a child component
Has  Magic Number Test

======================================

Test:  should check component children when called by component if dirty or check-always
Has  Magic Number Test

======================================

Test:  should not group detectChanges calls (call every time)
Has  Magic Number Test

======================================

Test:  should support call in ngOnInit
Has  Magic Number Test

======================================

Test:  undefined
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should support call in ngDoCheck
Has  Magic Number Test

======================================

Test:  should call lifecycle hooks on detached components
Has  Magic Number Test

======================================

Test:  should never schedule change detection on its own
Has  Magic Number Test

======================================

Test:  should NOT call lifecycle hooks
Has  Magic Number Test

======================================

Test:  throws expression changed with useNgZoneOnStable
Has  Magic Number Test

======================================

Test:  does not throw expression changed with useNgZoneOnStable if there is a change detection scheduled
Has  Magic Number Test

======================================

Test:  throws expression changed with interval
Has  Magic Number Test

======================================

Test:  does not throw expression changed with interval if change detection is scheduled
Has  Magic Number Test

======================================

Test:  does not throw expression changed with interval if OnPush component an no exhaustive
Has  Magic Number Test

======================================

Test:  should set up the component under test correctly
Has  Magic Number Test

======================================

Test:  should CD at insertion and declaration
Has  Magic Number Test

======================================

Test:  should set up the component under test correctly
Has  Magic Number Test

======================================

Test:  should CD at insertion point only
Has  Magic Number Test

======================================

Test:  is not checked if detectChanges is called in declaration component
Has  Magic Number Test

======================================

Test:  is checked as part of CheckNoChanges pass
Has  Magic Number Test

======================================

Test:  should set up component under test correctly
Has  Magic Number Test

======================================

Test:  should CD at insertion point only
Has  Magic Number Test

======================================

Test:  does not cause infinite change detection if transplanted view is dirty and destroyed before refresh
Has  Unknown Test

======================================

Test:  should set up component under test correctly
Has  Magic Number Test

======================================

Test:  should update declaration view when there is a change in the declaration and insertion is marked dirty
Has  Magic Number Test

======================================

Test:  updates the declaration view when there is a change to either declaration or insertion
Has  Magic Number Test

======================================

Test:  should update when there is a change to insertion and declaration is marked dirty
Has  Magic Number Test

======================================

Test:  should update insertion view and template when there is a change to insertion and insertion marked dirty
Has  Magic Number Test

======================================

Test:  should not refresh the template if nothing is marked dirty
Has  Magic Number Test

======================================

Test:  should refresh template when declaration and insertion are marked dirty
Has  Magic Number Test

======================================

Test:  should not fail when change detecting detached transplanted view
Has  Magic Number Test

======================================

Test:  should work when change detecting detached transplanted view already marked for refresh
Has  Magic Number Test

======================================

Test:  should work when re-inserting a previously detached transplanted view marked for refresh
Has  Magic Number Test

======================================

Test:  should detect changes when attached
Has  Magic Number Test

======================================

Test:  should not detect changes
Has  Magic Number Test

======================================

Test:  should not detect changes on mixed detached/attached refs
Has  Magic Number Test

======================================

Test:  should detect changes when attached
Has  Magic Number Test

======================================

Test:  should not detect changes
Has  Magic Number Test

======================================

Test:  should not detect changes on mixed detached/attached refs
Has  Magic Number Test

======================================

Test:  does not cause error if running change detection on detached view
Has  Unknown Test

======================================

Test:  backwards reference still updated if detaching root during change detection
Has  Magic Number Test

======================================

Test:  does not cause infinite loops with exhaustive checkNoChanges
Has  Magic Number Test

======================================

Test:  should update a loop
Has  Magic Number Test

======================================

Test:  should support ngForOf context variables
Has  Magic Number Test

======================================

Test:  should instantiate directives inside directives properly in an ngFor
Has  Magic Number Test

======================================

Test:  should retain parent view listeners when the NgFor destroy views
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should support multiple levels of embedded templates
Has  Magic Number Test

======================================

Test:  should support multiple levels of embedded templates with listeners
Has  Magic Number Test

======================================

Test:  should support skipping contexts
Has  Magic Number Test

======================================

Test:  should support context for 9+ levels of embedded templates
Has  Magic Number Test

======================================

Test:  should support sibling ngIfs
Has  Magic Number Test

======================================

Test:  should handle nested ngIfs with no intermediate context vars
Has  Magic Number Test

======================================

Test:  should invoke onDestroy only once when a component is registered as a provider
Has  Magic Number Test

======================================

Test:  should encapsulate host
Has  Magic Number Test

======================================

Test:  should encapsulate host and children with different attributes
Has  Magic Number Test

======================================

Test:  should clear the contents of dynamically created component when it's attached to ApplicationRef
Has  Magic Number Test

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  components should not share the same context when creating with a root element
Has  Magic Number Test

======================================

Test:  should attach debug info to component using ɵsetClassDebugInfo runtime
Has  Magic Number Test

======================================

Test:  should handle projected containers inside other containers
Has  Magic Number Test

======================================

Test:  should handle projection into element containers at the view root
Has  Magic Number Test

======================================

Test:  should handle projection of views with element containers at the root
Has  Magic Number Test

======================================

Test:  should handle re-projection at the root of an embedded view
Has  Magic Number Test

======================================

Test:  should handle projected containers inside other containers
Has  Magic Number Test

======================================

Test:  should work when matching the element name
Has  Magic Number Test

======================================

Test:  should work when matching attributes
Has  Magic Number Test

======================================

Test:  should work when matching classes
Has  Magic Number Test

======================================

Test:  should ignore synthesized attributes (e.g. ngTrackBy)
Has  Magic Number Test

======================================

Test:  should work when matching attributes
Has  Magic Number Test

======================================

Test:  should work when matching classes
Has  Magic Number Test

======================================

Test:  should be able to use data bindings in the fallback content
Has  Magic Number Test

======================================

Test:  should be able to use event listeners in the fallback content
Has  Magic Number Test

======================================

Test:  should create and destroy directives in the fallback content
Has  Magic Number Test

======================================

Test:  should not instantiate directives inside the fallback content
Has  Magic Number Test

======================================

Test:  should create, remove and move views corresponding to items in a collection
Has  Magic Number Test

======================================

Test:  should loop over iterators that can be iterated over only once
Has  Magic Number Test

======================================

Test:  should work correctly with trackBy index
Has  Magic Number Test

======================================

Test:  should support empty blocks
Has  Magic Number Test

======================================

Test:  should be able to use pipes injecting ChangeDetectorRef in for loop blocks
Has  Magic Number Test

======================================

Test:  should be able to access a directive property that is reassigned in a lifecycle hook
Has  Magic Number Test

======================================

Test:  should expose variables both under their real names and aliases
Has  Magic Number Test

======================================

Test:  should have access to the host context in the track function
Has  Magic Number Test

======================================

Test:  should warn about duplicated keys when using arrays
Has  Magic Number Test

======================================

Test:  should warn about duplicated keys when using iterables
Has  Magic Number Test

======================================

Test:  should warn about duplicate keys when keys are expressed as symbols
Has  Magic Number Test

======================================

Test:  should not warn about duplicate keys iterating over the new collection only
Has  Magic Number Test

======================================

Test:  should warn about collection re-creation due to identity tracking
Has  Magic Number Test

======================================

Test:  should NOT warn about collection re-creation when a view is not considered expensive
Has  Magic Number Test

======================================

Test:  should NOT warn about collection re-creation when a trackBy function is not identity
Has  Magic Number Test

======================================

Test:  should delete views in the middle
Has  Magic Number Test

======================================

Test:  should insert views in the middle
Has  Magic Number Test

======================================

Test:  should replace different items
Has  Magic Number Test

======================================

Test:  should move and delete items
Has  Magic Number Test

======================================

Test:  should correctly attach and detach views with duplicated keys
Has  Magic Number Test

======================================

Test:  should project an @for with a single root node into the root node slot
Has  Magic Number Test

======================================

Test:  should allow @for and @empty blocks to be projected into different slots
Has  Magic Number Test

======================================

Test:  should project an @for with multiple root nodes into the catch-all slot
Has  Magic Number Test

======================================

Test:  should project an @for with a single root node with a data binding
Has  Magic Number Test

======================================

Test:  should project an @for with an ng-container root node
Has  Magic Number Test

======================================

Test:  should project an @for with single root node and comments into the root node slot
Has  Magic Number Test

======================================

Test:  should project the root node when preserveWhitespaces is enabled and there are no whitespace nodes
Has  Magic Number Test

======================================

Test:  should not project the root node when preserveWhitespaces is enabled and there are whitespace nodes
Has  Magic Number Test

======================================

Test:  should not project the root node across multiple layers of @for
Has  Magic Number Test

======================================

Test:  should project an @for with a single root template node into the root node slot
Has  Magic Number Test

======================================

Test:  should invoke a projected attribute directive at the root of an @for once
Has  Magic Number Test

======================================

Test:  should invoke a projected template directive at the root of an @for once
Has  Magic Number Test

======================================

Test:  should invoke a directive on a projected ng-template at the root of an @for once
Has  Magic Number Test

======================================

Test:  should expose expression value in context
Has  Magic Number Test

======================================

Test:  should not expose the aliased expression to `if` and `else if` blocks
Has  Magic Number Test

======================================

Test:  should expose the context to nested conditional blocks
Has  Magic Number Test

======================================

Test:  should expose the context to listeners inside nested conditional blocks
Has  Magic Number Test

======================================

Test:  should expose expression value passed through a pipe in context
Has  Magic Number Test

======================================

Test:  should be able to use pipes in conditional expressions
Has  Magic Number Test

======================================

Test:  should project an @if with a single root node with a data binding
Has  Magic Number Test

======================================

Test:  should project an @if with a single root template node into the root node slot
Has  Magic Number Test

======================================

Test:  should invoke a projected attribute directive at the root of an @if once
Has  Magic Number Test

======================================

Test:  should invoke a projected template directive at the root of an @if once
Has  Magic Number Test

======================================

Test:  should invoke a directive on a projected ng-template at the root of an @if once
Has  Magic Number Test

======================================

Test:  should not match a directive with a class-based selector only meant for content projection
Has  Magic Number Test

======================================

Test:  should show a template based on a matching case
Has  Magic Number Test

======================================

Test:  should be able to use a pipe in the switch expression
Has  Magic Number Test

======================================

Test:  should be able to use a pipe in the case expression
Has  Magic Number Test

======================================

Test:  should be able to use pipes injecting ChangeDetectorRef in switch blocks
Has  Magic Number Test

======================================

Test:  should project @switch cases into appropriate slots when selectors are used for all cases
Has  Magic Number Test

======================================

Test:  should project @switch cases into appropriate slots when selectors are used for some cases
Has  Magic Number Test

======================================

Test:  should copy the template function of a component definition from parent to child
Has  Magic Number Test

======================================

Test:  should use the predefined ngCspNonce when inserting styles with shadow DOM encapsulation
Has  Conditional Test Logic

======================================

Test:  should preserve execution order of dependencies
Has  Conditional Test Logic

======================================

Test:  should support `on immediate` condition
Has  Magic Number Test

======================================

Test:  should support minimum and after conditions
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should support @placeholder with `minimum`
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should keep rendering @placeholder if trigger happened later
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  undefined
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should support @loading with `minimum`
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should support @loading with `after` and `minimum`
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should skip @loading when resources were prefetched
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should render an error block when loading fails
Has  Magic Number Test

======================================

Test:  should report an error to the ErrorHandler if no `@error` block is defined
Has  Magic Number Test

======================================

Test:  should not render `@error` block if loaded component has errors
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should query for components within each block
Has  Magic Number Test

======================================

Test:  should be able to prefetch resources
Has  Magic Number Test

======================================

Test:  should handle a case when prefetching fails
Has  Magic Number Test

======================================

Test:  should work when loading and prefetching were kicked off at the same time
Has  Magic Number Test

======================================

Test:  should support `prefetch on idle` condition
Has  Magic Number Test

======================================

Test:  should trigger prefetching based on `on idle` only once
Has  Magic Number Test

======================================

Test:  should trigger fetching based on `on idle` only once
Has  Magic Number Test

======================================

Test:  should support `prefetch on immediate` condition
Has  Magic Number Test

======================================

Test:  should delay nested defer blocks with `on idle` triggers
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not request idle callback for each block in a for loop
Has  Magic Number Test

======================================

Test:  should delay nested defer blocks with `on idle` triggers
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should clear idle handlers when defer block is triggered
Has  Magic Number Test

======================================

Test:  should load the deferred content when the trigger receives a keyboard event
Has  Conditional Test Logic

======================================

Test:  should unbind the trigger events when the deferred block is loaded
Has  Magic Number Test

======================================

Test:  should unbind the trigger events when the trigger is destroyed
Has  Magic Number Test

======================================

Test:  should unbind the trigger events when the deferred block is destroyed
Has  Magic Number Test

======================================

Test:  should prefetch resources on interaction
Has  Magic Number Test

======================================

Test:  should prefetch resources on interaction with an implicit trigger
Has  Magic Number Test

======================================

Test:  should load the deferred content when the trigger is hovered
Has  Conditional Test Logic

======================================

Test:  should load the deferred content with an implicit trigger element
Has  Conditional Test Logic

======================================

Test:  should support multiple deferred blocks with the same hover trigger
Has  Conditional Test Logic

======================================

Test:  should unbind the trigger events when the deferred block is loaded
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should unbind the trigger events when the trigger is destroyed
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should unbind the trigger events when the deferred block is destroyed
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should prefetch resources on hover
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should prefetch resources when an implicit trigger is hovered
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should trigger based on `on timer` condition
Has  Magic Number Test

======================================

Test:  should trigger nested `on timer` condition
Has  Magic Number Test

======================================

Test:  should trigger prefetching based on `on timer` condition
Has  Magic Number Test

======================================

Test:  should trigger prefetching and rendering based on `on timer` condition
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should clear timeout callbacks when defer block is triggered
Has  Magic Number Test

======================================

Test:  should stop observing the trigger when the deferred block is loaded
Has  Magic Number Test

======================================

Test:  should stop observing the trigger when the trigger is destroyed
Has  Magic Number Test

======================================

Test:  should stop observing the trigger when the deferred block is destroyed
Has  Magic Number Test

======================================

Test:  should disconnect the intersection observer once all deferred blocks have been loaded
Has  Magic Number Test

======================================

Test:  should prefetch resources when the trigger comes into the viewport
Has  Magic Number Test

======================================

Test:  should prefetch resources when an implicit trigger comes into the viewport
Has  Magic Number Test

======================================

Test:  should load deferred content in a loop
Has  Magic Number Test

======================================

Test:  should unbind `interaction` trigger events when the deferred block is loaded
Has  Magic Number Test

======================================

Test:  should unbind `hover` trigger events when the deferred block is loaded
Has  Magic Number Test

======================================

Test:  should provide access to tokens from imported NgModules
Has  Magic Number Test

======================================

Test:  should inject correct `ActivatedRoutes` in components within defer blocks
Has  Conditional Test Logic

======================================

Test:  should removal single destroy callback if many identical ones are registered
Has  Magic Number Test

======================================

Test:  should removal single destroy callback if many identical ones are registered
Has  Magic Number Test

======================================

Test:  should collect providers from NgModules
Has  Magic Number Test

======================================

Test:  should collect all providers when a module is used twice with different providers (via ModuleWithProviders)
Has  Magic Number Test

======================================

Test:  should process nested arrays within a provider set of ModuleWithProviders type
Has  Magic Number Test

======================================

Test:  should process nested arrays within provider set of an imported ModuleWithProviders type
Has  Magic Number Test

======================================

Test:  should inject directives in the correct order in a for loop
Has  Magic Number Test

======================================

Test:  should create a provider that uses `forwardRef` inside `providedIn`
Has  Magic Number Test

======================================

Test:  should instantiate correct class when undecorated class extends an injectable
Has  Magic Number Test

======================================

Test:  should be available if used in conjunction with other tokens
Has  Magic Number Test

======================================

Test:  should sync ViewContainerRef state between all injected instances
Has  Magic Number Test

======================================

Test:  should return the function's return value
Has  Magic Number Test

======================================

Test:  should work with an NgModuleRef injector
Has  Magic Number Test

======================================

Test:  should not lookup outside of the host element when Host is used in `useFactory`
Has  Conditional Test Logic

======================================

Test:  should not inject data-bound attributes
Has  Magic Number Test

======================================

Test:  should match directives with attribute selectors on bindings
Has  Conditional Test Logic

======================================

Test:  should not accidentally set inputs from attributes extracted from bindings / outputs
Has  Conditional Test Logic

======================================

Test:  should match directives on ng-template
Has  Magic Number Test

======================================

Test:  should match directives on ng-template created by * syntax
Has  Magic Number Test

======================================

Test:  should match directives on i18n-annotated attributes
Has  Magic Number Test

======================================

Test:  should match a mix of bound directives and classes
Has  Magic Number Test

======================================

Test:  should match classes to directive selectors without case sensitivity
Has  Magic Number Test

======================================

Test:  should match class selectors on ng-template
Has  Magic Number Test

======================================

Test:  should NOT match class selectors on ng-template created by * syntax
Has  Magic Number Test

======================================

Test:  should NOT match classes to directive selectors
Has  Magic Number Test

======================================

Test:  should match attributes to directive selectors without case sensitivity
Has  Magic Number Test

======================================

Test:  should not set structural directive inputs from static element attrs
Has  Magic Number Test

======================================

Test:  should not set structural directive inputs from element bindings
Has  Magic Number Test

======================================

Test:  should allow directive inputs specified using the object literal syntax in @Input
Has  Magic Number Test

======================================

Test:  should allow directive inputs specified using the object literal syntax in the `inputs` array
Has  Magic Number Test

======================================

Test:  should transform incoming input values
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should transform incoming input values when declared through the `inputs` array
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should transform incoming static input values
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should transform incoming values for aliased inputs
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should transform incoming inherited input values
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should transform aliased inputs coming from host directives
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should use the transformed input values in ngOnChanges
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should invoke the transform function with the directive instance as the context
Has  Magic Number Test

======================================

Test:  should transform value assigned using setInput
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should return null if no component
Has  Magic Number Test

======================================

Test:  should throw when called on non-element
Has  Magic Number Test

======================================

Test:  should return component from element
Has  Magic Number Test

======================================

Test:  should not throw when called on a destroyed node
Has  Magic Number Test

======================================

Test:  should throw when called on non-element
Has  Magic Number Test

======================================

Test:  should return context from element
Has  Magic Number Test

======================================

Test:  should return null for destroyed node
Has  Magic Number Test

======================================

Test:  should return element on component
Has  Magic Number Test

======================================

Test:  should return element on directive
Has  Magic Number Test

======================================

Test:  should return element for destroyed node
Has  Magic Number Test

======================================

Test:  should return node-injector from element
Has  Magic Number Test

======================================

Test:  should return node-injector from component with providers
Has  Magic Number Test

======================================

Test:  should return node-injector from directive without providers
Has  Magic Number Test

======================================

Test:  should retrieve injector from destroyed node
Has  Magic Number Test

======================================

Test:  should return empty array if no directives
Has  Magic Number Test

======================================

Test:  should return just directives
Has  Magic Number Test

======================================

Test:  should return empty array for destroyed node
Has  Magic Number Test

======================================

Test:  should return containing component of child component
Has  Magic Number Test

======================================

Test:  should return containing component of any view element
Has  Magic Number Test

======================================

Test:  should return containing component of child directive
Has  Magic Number Test

======================================

Test:  should return null for destroyed node
Has  Magic Number Test

======================================

Test:  should retrieve empty map
Has  Magic Number Test

======================================

Test:  should retrieve the local map
Has  Magic Number Test

======================================

Test:  should retrieve from a destroyed node
Has  Magic Number Test

======================================

Test:  should return root components from component
Has  Magic Number Test

======================================

Test:  should return an empty array for a destroyed node
Has  Magic Number Test

======================================

Test:  should return no listeners
Has  Magic Number Test

======================================

Test:  should return the listeners
Has  Magic Number Test

======================================

Test:  should return no listeners for destroyed node
Has  Magic Number Test

======================================

Test:  should retrieve tokens
Has  Magic Number Test

======================================

Test:  should retrieve tokens from destroyed node
Has  Magic Number Test

======================================

Test:  should work on components
Has  Magic Number Test

======================================

Test:  should not collect duplicate providers
Has  Magic Number Test

======================================

Test:  should support nested arrays of providers
Has  Magic Number Test

======================================

Test:  should return the function's return value
Has  Magic Number Test

======================================

Test:  should work with an NgModuleRef injector
Has  Magic Number Test

======================================

Test:  should not cause problems if detectChanges is called when a property updates
Has  Conditional Test Logic
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should support consecutive components with host bindings
Has  Magic Number Test

======================================

Test:  should support host bindings on second template pass
Has  Magic Number Test

======================================

Test:  should support host bindings in for loop
Has  Magic Number Test

======================================

Test:  should bind to host styles
Has  Magic Number Test

======================================

Test:  should bind to host styles on containers
Has  Magic Number Test

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  should handle host bindings with the same name as a primitive value
Has  Magic Number Test

======================================

Test:  should handle host bindings with quoted names
Has  Magic Number Test

======================================

Test:  should emit to an output of a host that has the same name as an exposed output of a host directive
Has  Magic Number Test

======================================

Test:  should emit to an output of a host that has the same name as the alias of a host directive output
Has  Magic Number Test

======================================

Test:  should not expose the same output more than once
Has  Magic Number Test

======================================

Test:  should emit to outputs from different host directives that have been aliased to the same name
Has  Magic Number Test

======================================

Test:  should support named interpolations
Has  Magic Number Test

======================================

Test:  should correctly bind to context in nested template
Has  Magic Number Test

======================================

Test:  should work correctly with event listeners
Has  Magic Number Test

======================================

Test:  should support conditional blocks
Has  Magic Number Test

======================================

Test:  should support switch blocks
Has  Magic Number Test

======================================

Test:  should be able to handle deep nested levels with templates
Has  Magic Number Test

======================================

Test:  should create a single dynamic TNode for ICU
Has  Magic Number Test

======================================

Test:  should support multiple ICUs
Has  Magic Number Test

======================================

Test:  multiple
Has  Magic Number Test

======================================

Test:  inside HTML elements
Has  Magic Number Test

======================================

Test:  inside template directives
Has  Magic Number Test

======================================

Test:  inside ng-container
Has  Magic Number Test

======================================

Test:  nested
Has  Magic Number Test

======================================

Test:  nested with interpolations in "other" blocks
Has  Magic Number Test

======================================

Test:  should return the correct plural form for ICU expressions when using "ro" locale
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  projection
Has  Magic Number Test

======================================

Test:  inside a container when creating a view via vcr.createEmbeddedView
Has  Magic Number Test

======================================

Test:  with nested ICU expression and inside a container when creating a view via vcr.createEmbeddedView
Has  Magic Number Test

======================================

Test:  should use metadata from container element if a message is a single ICU
Has  Magic Number Test

======================================

Test:  should support ICUs without "other" cases
Has  Magic Number Test

======================================

Test:  should support nested ICUs without "other" cases
Has  Magic Number Test

======================================

Test:  should support ICUs with pipes
Has  Magic Number Test

======================================

Test:  should handle select expressions without an `other` parameter inside a template
Has  Magic Number Test

======================================

Test:  should render an element whose case did not match initially
Has  Magic Number Test

======================================

Test:  should remove an element whose case matched initially, but does not anymore
Has  Magic Number Test

======================================

Test:  multiple attributes
Has  Magic Number Test

======================================

Test:  in nested template
Has  Magic Number Test

======================================

Test:  should process i18n attributes on explicit <ng-template> elements
Has  Magic Number Test

======================================

Test:  should match directive only once in case i18n attrs are present on inline template
Has  Magic Number Test

======================================

Test:  should apply i18n attributes during second template pass
Has  Magic Number Test

======================================

Test:  should work with directives and host bindings
Has  Magic Number Test

======================================

Test:  should project bare ICU expressions
Has  Magic Number Test

======================================

Test:  should project ICUs in i18n blocks
Has  Magic Number Test

======================================

Test:  detached nodes should still be part of query
Has  Magic Number Test

======================================

Test:  should create ICU with attributes
Has  Magic Number Test

======================================

Test:  should ignore non-instantiated ICUs on update
Has  Magic Number Test

======================================

Test:  should support different ICUs cases for each *ngFor iteration
Has  Magic Number Test

======================================

Test:  should ensure that multiple child classes don't cause multiple parent execution
Has  Magic Number Test

======================================

Test:  should be inherited from undecorated super class which inherits from decorated one
Has  Magic Number Test

======================================

Test:  ngOnInit
Has  Magic Number Test

======================================

Test:  ngDoCheck
Has  Magic Number Test

======================================

Test:  ngAfterContentInit
Has  Magic Number Test

======================================

Test:  ngAfterContentChecked
Has  Magic Number Test

======================================

Test:  ngAfterViewInit
Has  Magic Number Test

======================================

Test:  ngAfterViewChecked
Has  Magic Number Test

======================================

Test:  ngOnDestroy
Has  Magic Number Test

======================================

Test:  should inherit ContentChildren queries
Has  Magic Number Test

======================================

Test:  ngOnInit
Has  Magic Number Test

======================================

Test:  ngDoCheck
Has  Magic Number Test

======================================

Test:  ngAfterContentInit
Has  Magic Number Test

======================================

Test:  ngAfterContentChecked
Has  Magic Number Test

======================================

Test:  ngAfterViewInit
Has  Magic Number Test

======================================

Test:  ngAfterViewChecked
Has  Magic Number Test

======================================

Test:  ngOnDestroy
Has  Magic Number Test

======================================

Test:  should inherit ContentChildren queries
Has  Magic Number Test

======================================

Test:  ngOnInit
Has  Magic Number Test

======================================

Test:  ngDoCheck
Has  Magic Number Test

======================================

Test:  ngAfterContentInit
Has  Magic Number Test

======================================

Test:  ngAfterContentChecked
Has  Magic Number Test

======================================

Test:  ngAfterViewInit
Has  Magic Number Test

======================================

Test:  ngAfterViewChecked
Has  Magic Number Test

======================================

Test:  ngOnDestroy
Has  Magic Number Test

======================================

Test:  should inherit ContentChildren queries
Has  Magic Number Test

======================================

Test:  ngOnInit
Has  Magic Number Test

======================================

Test:  ngDoCheck
Has  Magic Number Test

======================================

Test:  ngAfterContentInit
Has  Magic Number Test

======================================

Test:  ngAfterContentChecked
Has  Magic Number Test

======================================

Test:  ngAfterViewInit
Has  Magic Number Test

======================================

Test:  ngAfterViewChecked
Has  Magic Number Test

======================================

Test:  ngOnDestroy
Has  Magic Number Test

======================================

Test:  should inherit ContentChildren queries
Has  Magic Number Test

======================================

Test:  ngOnInit
Has  Magic Number Test

======================================

Test:  ngDoCheck
Has  Magic Number Test

======================================

Test:  ngAfterContentInit
Has  Magic Number Test

======================================

Test:  ngAfterContentChecked
Has  Magic Number Test

======================================

Test:  ngAfterViewInit
Has  Magic Number Test

======================================

Test:  ngAfterViewChecked
Has  Magic Number Test

======================================

Test:  ngOnDestroy
Has  Magic Number Test

======================================

Test:  should inherit ContentChildren queries
Has  Magic Number Test

======================================

Test:  should inherit ViewChildren queries
Has  Magic Number Test

======================================

Test:  ngOnInit
Has  Magic Number Test

======================================

Test:  ngDoCheck
Has  Magic Number Test

======================================

Test:  ngAfterContentInit
Has  Magic Number Test

======================================

Test:  ngAfterContentChecked
Has  Magic Number Test

======================================

Test:  ngAfterViewInit
Has  Magic Number Test

======================================

Test:  ngAfterViewChecked
Has  Magic Number Test

======================================

Test:  ngOnDestroy
Has  Magic Number Test

======================================

Test:  should inherit ContentChildren queries
Has  Magic Number Test

======================================

Test:  should inherit ViewChildren queries
Has  Magic Number Test

======================================

Test:  ngOnInit
Has  Magic Number Test

======================================

Test:  ngDoCheck
Has  Magic Number Test

======================================

Test:  ngAfterContentInit
Has  Magic Number Test

======================================

Test:  ngAfterContentChecked
Has  Magic Number Test

======================================

Test:  ngAfterViewInit
Has  Magic Number Test

======================================

Test:  ngAfterViewChecked
Has  Magic Number Test

======================================

Test:  ngOnDestroy
Has  Magic Number Test

======================================

Test:  should inherit ContentChildren queries
Has  Magic Number Test

======================================

Test:  should inherit ViewChildren queries
Has  Magic Number Test

======================================

Test:  ngOnInit
Has  Magic Number Test

======================================

Test:  ngDoCheck
Has  Magic Number Test

======================================

Test:  ngAfterContentInit
Has  Magic Number Test

======================================

Test:  ngAfterContentChecked
Has  Magic Number Test

======================================

Test:  ngAfterViewInit
Has  Magic Number Test

======================================

Test:  ngAfterViewChecked
Has  Magic Number Test

======================================

Test:  ngOnDestroy
Has  Magic Number Test

======================================

Test:  should inherit ContentChildren queries
Has  Magic Number Test

======================================

Test:  should inherit ViewChildren queries
Has  Magic Number Test

======================================

Test:  should emit the correct DI events when a service is injected with injection flags
Has  Magic Number Test

======================================

Test:  should be able to determine injector type and name
Has  Magic Number Test

======================================

Test:  should be able to get the providers from a components injector
Has  Magic Number Test

======================================

Test:  should be able to get determine if a provider is a view provider
Has  Magic Number Test

======================================

Test:  should be able to determine import paths after module provider flattening in the NgModule bootstrap case
Has  Magic Number Test

======================================

Test:  should be able to determine import paths after module provider flattening in the standalone component case
Has  Magic Number Test

======================================

Test:  should be able to determine import paths after module provider flattening in the standalone component case with lazy components
Has  Magic Number Test

======================================

Test:  should be able to determine providers in an injector that was created manually
Has  Magic Number Test

======================================

Test:  should be able to get injector providers for element injectors created by components rendering in an ngFor
Has  Magic Number Test

======================================

Test:  should be able to get injector providers for element injectors created by components rendering in a @for
Has  Magic Number Test

======================================

Test:  should be able to determine which injector dependencies come from
Has  Magic Number Test

======================================

Test:  should be able to recursively determine dependencies of dependencies by using the providedIn field
Has  Magic Number Test

======================================

Test:  should be able to inspect injector hierarchy structure
Has  Magic Number Test

======================================

Test:  should render and update basic "Hello, World" template
Has  Magic Number Test

======================================

Test:  should update bindings
Has  Magic Number Test

======================================

Test:  should support binding to styles with suffix
Has  Magic Number Test

======================================

Test:  should support CSS class toggle
Has  Magic Number Test

======================================

Test:  should only call inherited host listeners once
Has  Magic Number Test

======================================

Test:  should support inherited view queries
Has  Magic Number Test

======================================

Test:  should not set inputs after destroy
Has  Conditional Test Logic

======================================

Test:  should inherit outputs from undecorated superclasses
Has  Magic Number Test

======================================

Test:  should inherit host bindings from undecorated superclasses
Has  Magic Number Test

======================================

Test:  should inherit host bindings from undecorated grand superclasses
Has  Magic Number Test

======================================

Test:  should inherit host listeners from undecorated superclasses
Has  Magic Number Test

======================================

Test:  should inherit host listeners from superclasses once
Has  Magic Number Test

======================================

Test:  should inherit host listeners from grand superclasses once
Has  Magic Number Test

======================================

Test:  should inherit host listeners from grand grand superclasses once
Has  Magic Number Test

======================================

Test:  should not invoke safe calls more times than plain calls
Has  Magic Number Test

======================================

Test:  should handle shorthand property declarations in templates
Has  Magic Number Test

======================================

Test:  should handle numeric separators in templates
Has  Magic Number Test

======================================

Test:  should handle nested calls to a safe access methods in templates
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should remove child LView from the registry when the root view is destroyed
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should handle content inside <template> elements
Has  Magic Number Test

======================================

Test:  should be marked with `firstUpdatePass` up until the template and host bindings are evaluated
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  tView.firstUpdatePass should be applied immediately after the first embedded view is processed
Has  Conditional Test Logic
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should apply triggers for a list of items when they are sorted and reSorted
Has  Magic Number Test

======================================

Test:  should insert and remove views in the correct order when animations are present
Has  Magic Number Test

======================================

Test:  should update the value of a @let declaration over time
Has  Magic Number Test

======================================

Test:  should be able to use @let declarations inside event listeners
Has  Magic Number Test

======================================

Test:  should be able to access @let declarations through multiple levels of views
Has  Magic Number Test

======================================

Test:  should be able to access @let declarations from parent view before they are declared
Has  Magic Number Test

======================================

Test:  should throw if a @let declaration is accessed before it is initialized
Has  Magic Number Test

======================================

Test:  should be able to use pipes injecting ChangeDetectorRef in a let declaration
Has  Magic Number Test

======================================

Test:  should evaluate unused let declarations
Has  Magic Number Test

======================================

Test:  should resolve a @let declaration correctly within an embedded view that uses a value from parent view and cannot be optimized
Has  Magic Number Test

======================================

Test:  should be able to use @for loop variables in @let declarations
Has  Magic Number Test

======================================

Test:  should correctly support updating one Input among many
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should call onChanges method after inputs are set in creation and update mode
Has  Magic Number Test

======================================

Test:  should call parent onChanges before child onChanges
Has  Magic Number Test

======================================

Test:  should call all parent onChanges across view before calling children onChanges
Has  Magic Number Test

======================================

Test:  should call onChanges every time a new view is created with ngIf
Has  Magic Number Test

======================================

Test:  should call onChanges in hosts before their content children
Has  Magic Number Test

======================================

Test:  should call onChanges in host and its content children before next host
Has  Magic Number Test

======================================

Test:  should be called on directives after component by default
Has  Magic Number Test

======================================

Test:  should be called on directives before component if component injects directives
Has  Magic Number Test

======================================

Test:  should be called on directives on an element
Has  Magic Number Test

======================================

Test:  should call onChanges properly in for loop
Has  Magic Number Test

======================================

Test:  should call onChanges properly in for loop with children
Has  Magic Number Test

======================================

Test:  should call all hooks in correct order when several directives on same node
Has  Magic Number Test

======================================

Test:  should call hooks after setting directives inputs
Has  Magic Number Test

======================================

Test:  should be called on root component
Has  Magic Number Test

======================================

Test:  should call onInit every time a new view is created (if block)
Has  Magic Number Test

======================================

Test:  should call onInit properly in for loop
Has  Magic Number Test

======================================

Test:  should call onInit properly in for loop with children
Has  Magic Number Test

======================================

Test:  should call doCheck on every refresh
Has  Magic Number Test

======================================

Test:  should be called only in creation mode
Has  Magic Number Test

======================================

Test:  should be called on root component in creation mode
Has  Magic Number Test

======================================

Test:  should be called in correct order in a for loop
Has  Magic Number Test

======================================

Test:  should be called in correct order in a for loop with children
Has  Magic Number Test

======================================

Test:  should be called on creation and not in update mode
Has  Magic Number Test

======================================

Test:  should be called on root component in creation mode
Has  Magic Number Test

======================================

Test:  should be called in correct order with ngFor
Has  Magic Number Test

======================================

Test:  should be called in correct order with for loops with children
Has  Magic Number Test

======================================

Test:  should call ngAfterViewChecked every update
Has  Magic Number Test

======================================

Test:  should be called on root component
Has  Magic Number Test

======================================

Test:  should call ngAfterViewChecked with bindings
Has  Magic Number Test

======================================

Test:  should be called in correct order with for loops with children
Has  Magic Number Test

======================================

Test:  should call destroy when view is removed
Has  Magic Number Test

======================================

Test:  should be called on every iteration of a destroyed for loop
Has  Magic Number Test

======================================

Test:  should call destroy properly if view also has listeners
Has  Magic Number Test

======================================

Test:  should call all hooks in correct order
Has  Magic Number Test

======================================

Test:  should call all hooks in correct order with children
Has  Magic Number Test

======================================

Test:  should call all hooks in correct order with view and content
Has  Magic Number Test

======================================

Test:  should not throw when calling detectChanges from a setter in the presence of a data binding, ngOnChanges and ngAfterViewInit
Has  Magic Number Test

======================================

Test:  should call hooks in the correct order when calling detectChanges in a setter
Has  Magic Number Test

======================================

Test:  should call function on event emit
Has  Magic Number Test

======================================

Test:  should call function chain on event emit
Has  Magic Number Test

======================================

Test:  should support listeners with specified set of args
Has  Magic Number Test

======================================

Test:  should be able to access a property called $event using `this`
Has  Magic Number Test

======================================

Test:  should coalesce multiple event listeners for the same event on the same element
Has  Magic Number Test

======================================

Test:  should coalesce multiple event listeners in presence of queries
Has  Magic Number Test

======================================

Test:  should try to execute remaining coalesced listeners if one of the listeners throws
Has  Magic Number Test

======================================

Test:  should prevent default if any of the listeners returns false
Has  Magic Number Test

======================================

Test:  should not subscribe twice to the output when there are 2 coalesced listeners
Has  Magic Number Test

======================================

Test:  should maintain the order in which listeners are registered
Has  Magic Number Test

======================================

Test:  should destroy listeners when view is removed
Has  Magic Number Test

======================================

Test:  should destroy listeners when views generated using *ngFor are removed
Has  Magic Number Test

======================================

Test:  should destroy listeners when nested view is removed
Has  Magic Number Test

======================================

Test:  should bind global event listeners on an ng-container directive host
Has  Magic Number Test

======================================

Test:  should bind global event listeners on an ng-template directive host
Has  Magic Number Test

======================================

Test:  should bind global event listeners on a structural directive host
Has  Magic Number Test

======================================

Test:  should clear bootstrapped component contents
Has  Magic Number Test

======================================

Test:  should log an error on unknown props if NO_ERRORS_SCHEMA is absent
Has  Magic Number Test

======================================

Test:  should log an error on unknown props of `ng-template` if NO_ERRORS_SCHEMA is absent
Has  Magic Number Test

======================================

Test:  should log an error on unknown props of `ng-container` if NO_ERRORS_SCHEMA is absent
Has  Magic Number Test

======================================

Test:  should log an error on unknown props of `ng-content` if NO_ERRORS_SCHEMA is absent
Has  Magic Number Test

======================================

Test:  should log an error about unknown element without CUSTOM_ELEMENTS_SCHEMA for element with dash in tag name
Has  Magic Number Test

======================================

Test:  should log an error about unknown element for a standalone component without CUSTOM_ELEMENTS_SCHEMA
Has  Magic Number Test

======================================

Test:  should log an error about unknown element without CUSTOM_ELEMENTS_SCHEMA for element without dash in tag name
Has  Magic Number Test

======================================

Test:  should report unknown property bindings on ng-content
Has  Magic Number Test

======================================

Test:  should report unknown property bindings on ng-container
Has  Magic Number Test

======================================

Test:  should not log unknown element warning for AOT-compiled components
Has  Conditional Test Logic

======================================

Test:  should not log unknown property warning for AOT-compiled components
Has  Conditional Test Logic

======================================

Test:  should call component output function when event is emitted
Has  Magic Number Test

======================================

Test:  should support more than 1 output function on the same node
Has  Magic Number Test

======================================

Test:  should eval component output expression when event is emitted
Has  Magic Number Test

======================================

Test:  should unsubscribe from output when view is destroyed
Has  Magic Number Test

======================================

Test:  should unsubscribe from output in nested view
Has  Magic Number Test

======================================

Test:  should work properly when view also has listeners and destroys
Has  Magic Number Test

======================================

Test:  should fire event listeners along with outputs if they match
Has  Magic Number Test

======================================

Test:  should work with two outputs of the same name
Has  Magic Number Test

======================================

Test:  should work with an input and output of the same name
Has  Magic Number Test

======================================

Test:  contributes to applicationRef stableness
Has  Unknown Test

======================================

Test:  should allow adding and removing tasks influencing stability
Has  Unknown Test

======================================

Test:  should pick a Pipe defined in `declarations` over imported Pipes
Has  Magic Number Test

======================================

Test:  should respect imported module order when selecting Pipe (last imported Pipe is used)
Has  Magic Number Test

======================================

Test:  should call impure pipes on each change detection run
Has  Magic Number Test

======================================

Test:  should not cache impure pipes
Has  Magic Number Test

======================================

Test:  should call ngOnDestroy on pipes
Has  Magic Number Test

======================================

Test:  should inject the ChangeDetectorRef of the containing view when using pipe inside a component input
Has  Magic Number Test

======================================

Test:  should inject the ChangeDetectorRef of the containing view when using pipe inside a component input which has child nodes
Has  Magic Number Test

======================================

Test:  should display the last known result from a pure pipe when it throws
Has  Conditional Test Logic

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  should throw an error if a pipe is not found inside an inline template
Has  Conditional Test Logic

======================================

Test:  should throw an error if a pipe is not found inside a projected content
Has  Conditional Test Logic

======================================

Test:  should throw an error if a pipe is not found inside a projected content in an inline template
Has  Conditional Test Logic

======================================

Test:  should throw an error if a pipe is not found in a property binding
Has  Conditional Test Logic

======================================

Test:  should throw an error if a pipe is not found inside a structural directive input
Has  Conditional Test Logic

======================================

Test:  should invoke the profiler on event handler
Has  Magic Number Test

======================================

Test:  should invoke the profiler on event handler even when it throws
Has  Magic Number Test

======================================

Test:  should invoke the profiler on output handler execution
Has  Magic Number Test

======================================

Test:  should call the profiler on lifecycle execution
Has  Magic Number Test

======================================

Test:  should use the sanitizer in bound properties
Has  Magic Number Test

======================================

Test:  should check input properties before setting (directives)
Has  Magic Number Test

======================================

Test:  should support mixed element properties and input properties
Has  Magic Number Test

======================================

Test:  should check that property is not an input property before setting (component)
Has  Magic Number Test

======================================

Test:  should set input property if there is an output first
Has  Magic Number Test

======================================

Test:  should support unrelated element properties at same index in if-else block
Has  Magic Number Test

======================================

Test:  should process attributes and outputs properly together
Has  Magic Number Test

======================================

Test:  should support attributes at same index inside an if-else block
Has  Magic Number Test

======================================

Test:  should process attributes properly inside a for loop
Has  Magic Number Test

======================================

Test:  should not throw on synthetic property bindings when a directive on the same element injects ViewContainerRef
Has  Magic Number Test

======================================

Test:  should handle all flavors of interpolated properties
Has  Magic Number Test

======================================

Test:  should not allow unsanitary urls in interpolated properties
Has  Magic Number Test

======================================

Test:  should not allow unsanitary urls in interpolated properties, even if you are tricky
Has  Magic Number Test

======================================

Test:  should support the chained use cases of propertyInterpolate instructions
Has  Magic Number Test

======================================

Test:  should NOT inherit providers
Has  Magic Number Test

======================================

Test:  should not invoke ngOnDestroy on multi providers created via useFactory
Has  Magic Number Test

======================================

Test:  should have access to viewProviders within the same component
Has  Magic Number Test

======================================

Test:  should have access to viewProviders of the host component
Has  Magic Number Test

======================================

Test:  should support an array literals inside fn calls
Has  Magic Number Test

======================================

Test:  should work up to 8 bindings
Has  Magic Number Test

======================================

Test:  should support an object literal
Has  Magic Number Test

======================================

Test:  should support expressions nested deeply in object/array literals
Has  Magic Number Test

======================================

Test:  should support multiple view instances with multiple bindings
Has  Magic Number Test

======================================

Test:  should not share object literals across elements
Has  Magic Number Test

======================================

Test:  should not share array literals across elements
Has  Magic Number Test

======================================

Test:  should return ElementRefs when HTML elements are labeled and retrieved
Has  Magic Number Test

======================================

Test:  should support selecting InjectionToken
Has  Magic Number Test

======================================

Test:  should return TemplateRefs when templates are labeled and retrieved
Has  Magic Number Test

======================================

Test:  should support static view child queries inherited from superclasses
Has  Magic Number Test

======================================

Test:  should support multiple static view queries (multiple template passes)
Has  Magic Number Test

======================================

Test:  should allow for view queries to be inherited from a directive
Has  Magic Number Test

======================================

Test:  should support ViewChildren query inherited from undecorated superclasses
Has  Magic Number Test

======================================

Test:  should support ViewChildren query inherited from undecorated grand superclasses
Has  Magic Number Test

======================================

Test:  should support selecting InjectionToken
Has  Magic Number Test

======================================

Test:  should return Component instances when Components are labeled and retrieved
Has  Magic Number Test

======================================

Test:  should return ElementRefs when HTML elements are labeled and retrieved
Has  Magic Number Test

======================================

Test:  should return TemplateRefs when templates are labeled and retrieved
Has  Magic Number Test

======================================

Test:  should support static content child queries inherited from superclasses
Has  Magic Number Test

======================================

Test:  should support multiple content query components (multiple template passes)
Has  Magic Number Test

======================================

Test:  should support ContentChildren query inherited from undecorated superclasses
Has  Magic Number Test

======================================

Test:  should support ContentChildren query inherited from undecorated grand superclasses
Has  Magic Number Test

======================================

Test:  should match shallow content queries in views inserted / removed by ngIf
Has  Magic Number Test

======================================

Test:  should support content queries for directives within repeated embedded views
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not match directive host with content queries
Has  Magic Number Test

======================================

Test:  should report results to appropriate queries where deep content queries are nested
Has  Magic Number Test

======================================

Test:  should support nested shallow content queries
Has  Magic Number Test

======================================

Test:  should respect shallow flag on content queries when mixing deep and shallow queries
Has  Magic Number Test

======================================

Test:  should support view and content queries matching the same element
Has  Magic Number Test

======================================

Test:  should generate an empty QueryList for root components
Has  Magic Number Test

======================================

Test:  should match directives on elements that used to be wrapped by a required parent in HTML parser
Has  Magic Number Test

======================================

Test:  should match elements with local refs inside <ng-container>
Has  Magic Number Test

======================================

Test:  should match elements with local refs inside nested <ng-container>
Has  Magic Number Test

======================================

Test:  should match directives inside <ng-container>
Has  Magic Number Test

======================================

Test:  should match directives inside nested <ng-container>
Has  Magic Number Test

======================================

Test:  should cross child ng-container when query is declared on ng-container
Has  Magic Number Test

======================================

Test:  should match nodes when using structural directives (*syntax) on <ng-container>
Has  Magic Number Test

======================================

Test:  should match directives on <ng-container> when crossing nested <ng-container>
Has  Magic Number Test

======================================

Test:  should query using type predicate and read ElementRef
Has  Magic Number Test

======================================

Test:  should query using type predicate and read another directive type
Has  Magic Number Test

======================================

Test:  should not add results to query if a requested token cant be read
Has  Magic Number Test

======================================

Test:  should query using local ref and read ElementRef by default
Has  Magic Number Test

======================================

Test:  should query for multiple elements and read ElementRef by default
Has  Magic Number Test

======================================

Test:  should read ElementRef from an element when explicitly asked for
Has  Magic Number Test

======================================

Test:  should query for <ng-container> and read ElementRef with a native element pointing to comment node
Has  Magic Number Test

======================================

Test:  should query for <ng-container> and read ElementRef without explicit read option
Has  Magic Number Test

======================================

Test:  should read ViewContainerRef from element nodes when explicitly asked for
Has  Magic Number Test

======================================

Test:  should read ViewContainerRef from ng-template nodes when explicitly asked for
Has  Magic Number Test

======================================

Test:  should read ElementRef with a native element pointing to comment DOM node from ng-template
Has  Magic Number Test

======================================

Test:  should read TemplateRef from ng-template by default
Has  Magic Number Test

======================================

Test:  should read TemplateRef from ng-template when explicitly asked for
Has  Magic Number Test

======================================

Test:  should read component instance if element queried for is a component host
Has  Magic Number Test

======================================

Test:  should read component instance with explicit exportAs
Has  Magic Number Test

======================================

Test:  should read directive instance if element queried for has an exported directive with a matching name
Has  Magic Number Test

======================================

Test:  should read all matching directive instances from a given element
Has  Magic Number Test

======================================

Test:  should read multiple locals exporting the same directive from a given element
Has  Magic Number Test

======================================

Test:  should query multiple locals on the same element
Has  Magic Number Test

======================================

Test:  should match on exported directive name and read a requested token
Has  Magic Number Test

======================================

Test:  should support reading a mix of ElementRef and directive instances
Has  Magic Number Test

======================================

Test:  should not add results to selector-based query if a requested token cant be read
Has  Magic Number Test

======================================

Test:  should not add results to directive-based query if only read token matches
Has  Magic Number Test

======================================

Test:  should not add results to TemplateRef-based query if only read token matches
Has  Magic Number Test

======================================

Test:  should not add results to the query in case no match found (via TemplateRef)
Has  Magic Number Test

======================================

Test:  should query templates if the type is TemplateRef (and respect "read" option)
Has  Magic Number Test

======================================

Test:  should match using string selector and directive as a read argument
Has  Magic Number Test

======================================

Test:  should allow observing changes to query list
Has  Magic Number Test

======================================

Test:  should only fire if the content of the query changes
Has  Magic Number Test

======================================

Test:  should report results in views inserted / removed by ngIf
Has  Magic Number Test

======================================

Test:  should report results in views inserted / removed by ngFor
Has  Magic Number Test

======================================

Test:  should NOT notify on changes when a given view is removed and re-inserted at the same index
Has  Magic Number Test

======================================

Test:  should support a mix of content queries from the declaration and embedded view
Has  Magic Number Test

======================================

Test:  should report results when different instances of TemplateRef are inserted into one ViewContainerRefs
Has  Magic Number Test

======================================

Test:  should report results when the same TemplateRef is inserted into different ViewContainerRefs
Has  Magic Number Test

======================================

Test:  should report results from views inserted in a lifecycle hook
Has  Magic Number Test

======================================

Test:  should query by provider super-type in an embedded view
Has  Magic Number Test

======================================

Test:  should flatten multi-provider results
Has  Magic Number Test

======================================

Test:  should flatten multi-provider results when crossing ng-template
Has  Magic Number Test

======================================

Test:  should allow null / undefined provider value in a [View/Content]Children queries
Has  Magic Number Test

======================================

Test:  should match string injection token in a ViewChildren query
Has  Magic Number Test

======================================

Test:  should match string injection token in a ContentChildren query
Has  Magic Number Test

======================================

Test:  should pass in the component styles directly into the underlying renderer
Has  Magic Number Test

======================================

Test:  should not invoke renderer destroy method for embedded views
Has  Magic Number Test

======================================

Test:  should work with animated components
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should call renderer.destroyNode for each node destroyed
Has  Magic Number Test

======================================

Test:  should call renderer.destroy for each component destroyed
Has  Magic Number Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  should work when a directive sets a security-sensitive attribute as a static attribute
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should work when a security-sensitive attribute is set between `src` and `srcdoc`
Has  Unknown Test

======================================

Test:  should work when a directive sets a security-sensitive attribute before setting `src`
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should work when a security-sensitive attribute is set as a static attribute
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should work when a security-sensitive attributes are marked for translation
Has  Unknown Test

======================================

Test:  should render a recursive standalone component
Has  Magic Number Test

======================================

Test:  should apply style properties that require quote wrapping
Has  Magic Number Test

======================================

Test:  should support css variables
Has  Conditional Test Logic

======================================

Test:  should support css variables with numbers in their name inside a host binding
Has  Conditional Test Logic

======================================

Test:  should support case-sensitive css variables
Has  Conditional Test Logic

======================================

Test:  should recover from exceptions
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should render initial styling for repeated nodes that a component host
Has  Magic Number Test

======================================

Test:  should be able to bind zero
Has  Magic Number Test

======================================

Test:  should be able to bind a SafeValue to backgroundImage
Has  Magic Number Test

======================================

Test:  should set !important on a single property
Has  Magic Number Test

======================================

Test:  should set !important that is not preceded by a space
Has  Magic Number Test

======================================

Test:  should set !important on a dash-case property
Has  Magic Number Test

======================================

Test:  should set !important on multiple properties
Has  Magic Number Test

======================================

Test:  should set !important if some properties are !important and other are not
Has  Magic Number Test

======================================

Test:  should not write to the native element if a directive shadows the class input
Has  Unknown Test

======================================

Test:  should support interpolations inside a class binding
Has  Magic Number Test

======================================

Test:  should support interpolations inside a style binding
Has  Magic Number Test

======================================

Test:  should support interpolations inside a style property binding
Has  Magic Number Test

======================================

Test:  should support interpolations when a style property has a unit suffix
Has  Magic Number Test

======================================

Test:  should not write to a `class` input binding in the event that there is no static class value
Has  Magic Number Test

======================================

Test:  should write to [class] binding during `update` mode if there is an instantiation-level value
Has  Magic Number Test

======================================

Test:  should write to a `class` input binding if there is a static class value
Has  Magic Number Test

======================================

Test:  should write to a `class` input binding if there is a static class value and there is a binding value
Has  Magic Number Test

======================================

Test:  should only run stylingFlush once when there are no collisions between styling properties
Has  Magic Number Test

======================================

Test:  should combine all styling across the template, directive and component host bindings
Has  Unknown Test

======================================

Test:  should properly apply styling across sub and super class directive host bindings
Has  Unknown Test

======================================

Test:  should apply map-based style and class entries
Has  Unknown Test

======================================

Test:  should resolve styling collisions across templates, directives and components for prop and map-based entries
Has  Unknown Test

======================================

Test:  should only apply each styling property once per CD across templates, components, directives
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should apply a unit to a style before writing it
Has  Magic Number Test

======================================

Test:  should evaluate follow-up [style] maps even if a former map is null
Has  Unknown Test

======================================

Test:  should evaluate initial style/class values on a list of elements that changes
Has  Magic Number Test

======================================

Test:  should create and update multiple class bindings across multiple elements in a template
Has  Magic Number Test

======================================

Test:  should evaluate styling across the template directives when there are multiple elements/sources of styling
Has  Magic Number Test

======================================

Test:  should evaluate styling across the template and directives within embedded views
Has  Magic Number Test

======================================

Test:  should allow detectChanges to be run in a property change that causes additional styling to be rendered
Has  Conditional Test Logic

======================================

Test:  should allow detectChanges to be run in a hook that causes additional styling to be rendered
Has  Conditional Test Logic

======================================

Test:  should recover from an error thrown in styling bindings
Has  Conditional Test Logic

======================================

Test:  should combine static host classes with component "class" host attribute
Has  Magic Number Test

======================================

Test:  should support `styles` as a string
Has  Conditional Test Logic

======================================

Test:  should support sanitizer value in the [style] bindings
Has  Unknown Test

======================================

Test:  should return root render nodes for an embedded view instance
Has  Magic Number Test

======================================

Test:  should return an empty array for embedded view with no nodes
Has  Magic Number Test

======================================

Test:  should descend into view containers on ng-template
Has  Magic Number Test

======================================

Test:  should descend into view containers on an element
Has  Magic Number Test

======================================

Test:  should descend into view containers on ng-container
Has  Magic Number Test

======================================

Test:  should descend into element containers
Has  Magic Number Test

======================================

Test:  should return an empty array for an embedded view with projection and no projectable nodes
Has  Magic Number Test

======================================

Test:  should return an empty array for an embedded view with multiple projections and no projectable nodes
Has  Magic Number Test

======================================

Test:  should return projectable nodes when provided
Has  Magic Number Test

======================================

Test:  should return an empty collection when no projectable nodes were provided
Has  Magic Number Test

======================================

Test:  should return an empty collection when projectable nodes were provided but there are no slots
Has  Magic Number Test

======================================

Test:  should warn if the context of an embedded view ref is replaced
Has  Magic Number Test

======================================

Test:  should handle all flavors of interpolated text
Has  Magic Number Test

======================================

Test:  should stringify a symbol
Has  Conditional Test Logic

======================================

Test:  should use comment node of host ng-container as insertion marker
Has  Magic Number Test

======================================

Test:  should view queries in dynamically created components
Has  Magic Number Test

======================================

Test:  should not blow up on destroy when inserting a view that is already attached
Has  Magic Number Test

======================================

Test:  should move views if they are already attached
Has  Magic Number Test

======================================

Test:  should insert a view already inserted into another container
Has  Magic Number Test

======================================

Test:  should insert detached views in move()
Has  Magic Number Test

======================================

Test:  should not throw when calling remove() on an empty container
Has  Magic Number Test

======================================

Test:  should not throw when calling detach() on an empty container
Has  Magic Number Test

======================================

Test:  when nested ng-container
Has  Unknown Test

======================================

Test:  when ViewContainerRef is on a ng-container
Has  Unknown Test

======================================

Test:  when ViewContainerRef is on an element
Has  Unknown Test

======================================

Test:  when ViewContainerRef is on a ng-template
Has  Unknown Test

======================================

Test:  when ViewContainerRef is on an element inside a ng-container
Has  Unknown Test

======================================

Test:  when ViewContainerRef is on an element inside a ng-container with i18n
Has  Unknown Test

======================================

Test:  when ViewContainerRef is on an element, and i18n is on the parent ViewContainerRef
Has  Unknown Test

======================================

Test:  should return the number of embedded views
Has  Magic Number Test

======================================

Test:  should retrieve a ViewRef from its index, and vice versa
Has  Magic Number Test

======================================

Test:  should handle out of bounds cases
Has  Magic Number Test

======================================

Test:  should return -1 as indexOf when no views were inserted
Has  Magic Number Test

======================================

Test:  should move embedded views and associated DOM nodes without recreating them
Has  Magic Number Test

======================================

Test:  should detach the right embedded view when an index is specified
Has  Magic Number Test

======================================

Test:  should detach the last embedded view when no index is specified
Has  Magic Number Test

======================================

Test:  should remove the right embedded view when an index is specified
Has  Magic Number Test

======================================

Test:  should remove the last embedded view when no index is specified
Has  Magic Number Test

======================================

Test:  should not throw when view removes another view upon removal
Has  Unknown Test

======================================

Test:  should work on elements
Has  Magic Number Test

======================================

Test:  should work on components
Has  Magic Number Test

======================================

Test:  should work with multiple instances of view container refs
Has  Magic Number Test

======================================

Test:  should work on templates
Has  Magic Number Test

======================================

Test:  should work without Injector and NgModuleRef
Has  Magic Number Test

======================================

Test:  should work with NgModuleRef and Injector
Has  Magic Number Test

======================================

Test:  should support projectable nodes
Has  Magic Number Test

======================================

Test:  should support reprojection of projectable nodes
Has  Magic Number Test

======================================

Test:  should support many projectable nodes with many slots
Has  Magic Number Test

======================================

Test:  should return ComponentRef with ChangeDetectorRef attached to root view
Has  Magic Number Test

======================================

Test:  should take provided `options` arguments into account
Has  Magic Number Test

======================================

Test:  should insert elements in the proper order when template root is an ng-container
Has  Magic Number Test

======================================

Test:  should insert elements in the proper order when template root is an ng-container and is wrapped by an ng-container
Has  Magic Number Test

======================================

Test:  should insert elements in the proper order when template root is an ng-container and first node is a ng-container
Has  Magic Number Test

======================================

Test:  should insert elements in the proper order when template root is an ng-container, wrapped in an ng-container with the root node as an ng-container
Has  Magic Number Test

======================================

Test:  should insert elements in the proper order when the first child node is an ICU expression
Has  Magic Number Test

======================================

Test:  should call all hooks in correct order when creating with createEmbeddedView
Has  Magic Number Test

======================================

Test:  should call all hooks in correct order when creating with createComponent
Has  Magic Number Test

======================================

Test:  should support host bindings on dynamically created components
Has  Magic Number Test

======================================

Test:  should handle empty re-projection into the root of a view
Has  Magic Number Test

======================================

Test:  should check bindings for components dynamically created by root component
Has  Magic Number Test

======================================

Test:  should create deep DOM tree immediately for dynamically created components
Has  Magic Number Test

======================================

Test:  should insert into an empty container, at the front, in the middle, and at the end
Has  Magic Number Test

======================================

Test:  should insert into an empty container, at the front, in the middle, and at the end
Has  Magic Number Test

======================================

Test:  should insert into an empty container, at the front, in the middle, and at the end
Has  Magic Number Test

======================================

Test:  should insert into an empty container, at the front, in the middle, and at the end
Has  Magic Number Test

======================================

Test:  should insert embedded views into ViewContainerRef injected by querying <ng-container>
Has  Magic Number Test

======================================

Test:  should properly insert before views in a ViewContainerRef injected on ng-container
Has  Magic Number Test

======================================

Test:  should render even if a directive constructor throws in the first create pass
Has  Conditional Test Logic

======================================

Test:  should match a static query, even if its setter throws in the first create pass
Has  Conditional Test Logic

======================================

Test:  should render a recursive component if it throws during the first creation pass
Has  Conditional Test Logic

======================================

Test:  should continue detecting changes if a directive throws in its constructor
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should remove view ref from view container when destroyed
Has  Magic Number Test

======================================

Test:  should only require one flushMicrotasks call to kick off animation callbacks
Has  Magic Number Test

======================================

Test:  should emit the correct totalTime value for a noop-animation
Has  Magic Number Test

======================================

Test:  should wait until the animations are finished until continuing
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should wait for a noop animation to finish before continuing
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should wait for active animations to finish even if they have already started
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should trigger a state change animation from void => state
Has  Magic Number Test

======================================

Test:  should support nested animation triggers
Has  Magic Number Test

======================================

Test:  should allow a transition to use a function to determine what method to run
Has  Magic Number Test

======================================

Test:  should allow a transition to use a function to determine what method to run and expose any parameter values
Has  Magic Number Test

======================================

Test:  should allow a state value to be `0`
Has  Magic Number Test

======================================

Test:  should always cancel the previous transition if a follow-up transition is not matched
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should only turn a view removal as into `void` state transition
Has  Magic Number Test

======================================

Test:  should stringify boolean triggers to `1` and `0`
Has  Magic Number Test

======================================

Test:  should understand boolean values as `true` and `false` for transition animations
Has  Magic Number Test

======================================

Test:  should understand boolean values as `true` and `false` for transition animations and apply the corresponding state() value
Has  Magic Number Test

======================================

Test:  should not throw an error if a trigger with the same name exists in separate components
Has  Unknown Test

======================================

Test:  should trigger a state change animation from state => state on the component host element
Has  Magic Number Test

======================================

Test:  should trigger a leave animation when the inner has ViewContainerRef injected
Has  Magic Number Test

======================================

Test:  should trigger a leave animation when the inner components host binding updates
Has  Magic Number Test

======================================

Test:  should wait for child animations before removing parent
Has  Magic Number Test

======================================

Test:  should trigger a leave animation when the outer components element binding updates on the host component element
Has  Magic Number Test

======================================

Test:  should trigger a leave animation when both the inner and outer components trigger on the same element
Has  Magic Number Test

======================================

Test:  should not throw when the host element is removed and no animation triggers
Has  Magic Number Test

======================================

Test:  should properly evaluate pre/auto-style values when components are inserted/removed which contain host animations
Has  Magic Number Test

======================================

Test:  should cancel and merge in mid-animation styles into the follow-up animation, but only for animation keyframes that start right away
Has  Magic Number Test

======================================

Test:  should provide the styling of previous players that are grouped
Has  Magic Number Test

======================================

Test:  should provide the styling of previous players that are grouped and queried and make sure match the players with the correct elements
Has  Magic Number Test

======================================

Test:  should properly balance styles between states even if there are no destination state styles
Has  Magic Number Test

======================================

Test:  should not apply the destination styles if the final animate step already contains styles
Has  Magic Number Test

======================================

Test:  should invoke an animation trigger that is state-less
Has  Magic Number Test

======================================

Test:  should retain styles on the element once the animation is complete
Has  Magic Number Test

======================================

Test:  should retain state styles when the underlying DOM structure changes even if there are no insert/remove animations
Has  Magic Number Test

======================================

Test:  should retain state styles when the underlying DOM structure changes even if there are insert/remove animations
Has  Magic Number Test

======================================

Test:  should keep/restore the trigger value when there are move operations (with *ngFor + trackBy)
Has  Magic Number Test

======================================

Test:  should animate removals of nodes to the `void` state for each animation trigger, but treat all auto styles as pre styles
Has  Magic Number Test

======================================

Test:  should properly cancel all existing animations when a removal occurs
Has  Magic Number Test

======================================

Test:  should not run inner child animations when a parent is set to be removed
Has  Magic Number Test

======================================

Test:  should cancel all active inner child animations when a parent removal animation is set to go
Has  Magic Number Test

======================================

Test:  should destroy inner animations when a parent node is set for removal
Has  Magic Number Test

======================================

Test:  should allow inner removals to happen when a non removal-based parent animation is set to animate
Has  Magic Number Test

======================================

Test:  should make inner removals wait until a parent based removal animation has finished
Has  Magic Number Test

======================================

Test:  should detect trigger changes based on object.value properties
Has  Magic Number Test

======================================

Test:  should not render animations when the object expression value is the same as it was previously
Has  Magic Number Test

======================================

Test:  should update the final state styles when params update even if the expression hasn't changed
Has  Magic Number Test

======================================

Test:  should substitute in values if the provided state match is an object with values
Has  Magic Number Test

======================================

Test:  should retain substituted styles on the element once the animation is complete if referenced in the final state
Has  Magic Number Test

======================================

Test:  should only evaluate final state param substitutions from the expression and state values and not from the transition options 
Has  Magic Number Test

======================================

Test:  should apply default params when resolved animation value is null or undefined
Has  Magic Number Test

======================================

Test:  should not flush animations twice when an inner component runs change detection
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should detect when a value has incremented
Has  Magic Number Test

======================================

Test:  should detect when a value has decremented
Has  Magic Number Test

======================================

Test:  should animate nodes properly when they have been re-ordered
Has  Magic Number Test

======================================

Test:  should not animate i18n insertBefore
Has  Magic Number Test

======================================

Test:  should trigger a `start` state change listener for when the animation changes state from void => state
Has  Magic Number Test

======================================

Test:  should trigger a `done` state change listener for when the animation changes state from a => b
Has  Magic Number Test

======================================

Test:  should handle callbacks for multiple triggers running simultaneously
Has  Magic Number Test

======================================

Test:  should handle callbacks for multiple triggers running simultaneously on the same element
Has  Magic Number Test

======================================

Test:  should handle a leave animation for multiple triggers even if not all triggers have their own leave transition specified
Has  Magic Number Test

======================================

Test:  should trigger a state change listener for when the animation changes state from void => state on the host element
Has  Magic Number Test

======================================

Test:  should fire callbacks on a sub animation once it starts and finishes
Has  Magic Number Test

======================================

Test:  should fire callbacks and collect the correct the totalTime and element details for any queried sub animations
Has  Magic Number Test

======================================

Test:  should disable child animations when set to true
Has  Magic Number Test

======================================

Test:  should ensure state() values are applied when an animation is disabled
Has  Magic Number Test

======================================

Test:  should disable animations for the element that they are disabled on
Has  Magic Number Test

======================================

Test:  should respect inner disabled nodes once a parent becomes enabled
Has  Magic Number Test

======================================

Test:  should properly handle dom operations when disabled
Has  Magic Number Test

======================================

Test:  should properly resolve animation event listeners when disabled
Has  Magic Number Test

======================================

Test:  should work when there are no animations on the component handling the disable/enable flag
Has  Magic Number Test

======================================

Test:  should treat the property as true when the expression is missing
Has  Magic Number Test

======================================

Test:  should respect parent/sub animations when the respective area in the DOM is disabled
Has  Magic Number Test

======================================

Test:  should convert hyphenated properties to camelcase by default
Has  Magic Number Test

======================================

Test:  should convert hyphenated properties to camelCase by default that are auto/pre style properties
Has  Magic Number Test

======================================

Test:  should throw neither state() or transition() are used inside of trigger()
Has  Magic Number Test

======================================

Test:  should apply the delay specified in the animation
Has  Magic Number Test

======================================

Test:  should apply the delay specified in the animation using params
Has  Magic Number Test

======================================

Test:  should apply the delay specified in the useAnimation call
Has  Magic Number Test

======================================

Test:  should apply the delay specified in the useAnimation call using params
Has  Magic Number Test

======================================

Test:  should combine the delays specified in the animation and the useAnimation with that of the caller
Has  Magic Number Test

======================================

Test:  should combine multiple errors together into one exception when an animation fails to be built
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should not throw an error if styles overlap in separate transitions
Has  Magic Number Test

======================================

Test:  should add the transition provided delay to all the transition's timelines
Has  Magic Number Test

======================================

Test:  should keep (transition from/to) styles defined in different timelines
Has  Magic Number Test

======================================

Test:  should show a warning if the animation tries to transition a non-animatable property
Has  Magic Number Test

======================================

Test:  should not show a warning if the animation tries to transition an animatable property
Has  Magic Number Test

======================================

Test:  should show a single warning if the animation tries to transition multiple non-animatable properties
Has  Magic Number Test

======================================

Test:  should only warn on non-animatable properties if the animation tries to transition both animate and non-animatable properties
Has  Magic Number Test

======================================

Test:  should be able to query all elements that contain animation triggers via @*
Has  Magic Number Test

======================================

Test:  should be able to query currently animating elements via :animating
Has  Magic Number Test

======================================

Test:  should be able to query triggers directly by name
Has  Magic Number Test

======================================

Test:  should be able to query all active animations using :animating in a query
Has  Magic Number Test

======================================

Test:  should be able to query all actively queued animation triggers via `@*:animating`
Has  Magic Number Test

======================================

Test:  should collect styles for the same elements between queries
Has  Magic Number Test

======================================

Test:  should retain style values when :self is used inside of a query
Has  Magic Number Test

======================================

Test:  should properly apply stagger after various other steps within a query
Has  Magic Number Test

======================================

Test:  should properly apply pre styling before a stagger is issued
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should apply a full stagger step delay if the timing data is left undefined
Has  Magic Number Test

======================================

Test:  should persist inner sub trigger styles once their animation is complete
Has  Magic Number Test

======================================

Test:  should find newly inserted items in the component via :enter
Has  Magic Number Test

======================================

Test:  should cleanup :enter and :leave artifacts from nodes when any animation sequences fail to be built
Has  Magic Number Test

======================================

Test:  should find elements that have been removed via :leave
Has  Magic Number Test

======================================

Test:  should find :enter nodes that have been inserted around non enter nodes
Has  Magic Number Test

======================================

Test:  should find :enter/:leave nodes that are nested inside of ng-container elements
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should properly cancel items that were queried into a former animation and pass in the associated styles into the follow-up players per element
Has  Magic Number Test

======================================

Test:  should not remove a parent container if its contents are queried into by an ancestor element
Has  Magic Number Test

======================================

Test:  should only retain a to-be-removed node if the inner queried items are apart of an animation issued by an ancestor
Has  Magic Number Test

======================================

Test:  should finish queried players in an animation when the next animation takes over
Has  Magic Number Test

======================================

Test:  should finish queried players when the previous player is finished
Has  Magic Number Test

======================================

Test:  should allow multiple triggers to animate on queried elements at the same time
Has  Magic Number Test

======================================

Test:  should cancel inner queried animations if a trigger state value changes, but isn't detected as a valid transition
Has  Magic Number Test

======================================

Test:  should allow for queried items to restore their styling back to the original state via animate(time, "*")
Has  Magic Number Test

======================================

Test:  should query elements in sub components that do not contain animations using the :enter selector
Has  Magic Number Test

======================================

Test:  should query elements in sub components that do not contain animations using the :leave selector
Has  Magic Number Test

======================================

Test:  should limit results when a limit value is passed into the query options
Has  Magic Number Test

======================================

Test:  should support negative limit values by pulling in elements from the end of the query
Has  Magic Number Test

======================================

Test:  should animate a sub trigger that exists in an inner element in the template
Has  Magic Number Test

======================================

Test:  should run and operate a series of triggers on a list of elements with overridden timing data
Has  Magic Number Test

======================================

Test:  should silently continue if a sub trigger is animated that doesn't exist
Has  Magic Number Test

======================================

Test:  should silently continue if a sub trigger is animated that doesn't contain a trigger that is setup for animation
Has  Magic Number Test

======================================

Test:  should animate all sub triggers on the element at the same time
Has  Magic Number Test

======================================

Test:  should skip a sub animation when a zero duration value is passed in
Has  Magic Number Test

======================================

Test:  should only allow a sub animation to be used up by a parent trigger once
Has  Magic Number Test

======================================

Test:  should emulate a leave animation on the nearest sub host elements when a parent is removed
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should emulate a leave animation on a sub component's inner elements when a parent leave animation occurs with animateChild
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should not cause a removal of inner @trigger DOM nodes when a parent animation occurs
Has  Magic Number Test

======================================

Test:  should only mark outermost *directive nodes :enter and :leave when inserts and removals occur
Has  Magic Number Test

======================================

Test:  should collect multiple root levels of :enter and :leave nodes
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should emulate leave animation callbacks for all sub elements that have leave triggers within the component
Has  Magic Number Test

======================================

Test:  should build, but not run sub triggers when a parent animation is scheduled
Has  Magic Number Test

======================================

Test:  should fire and synchronize the start/done callbacks on sub triggers even if they are not allowed to animate within the animation
Has  Magic Number Test

======================================

Test:  should fire and synchronize the start/done callbacks on multiple blocked sub triggers
Has  Magic Number Test

======================================

Test:  should stretch the starting keyframe of a child animation queries are issued by the parent
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should allow a parent trigger to control child triggers across multiple template boundaries even if there are no animations in between
Has  Magic Number Test

======================================

Test:  should scope :enter queries between sub animations
Has  Magic Number Test

======================================

Test:  should scope :leave queries between sub animations
Has  Magic Number Test

======================================

Test:  should correctly remove a leaving element queried/animated by a parent queried via animateChild
Has  Magic Number Test

======================================

Test:  should correctly animate state styles of the root element applied via animate inside a group (independently of the order)
Has  Magic Number Test

======================================

Test:  should correctly animate state styles of the root element applied via animate inside a sequence (independently of the order)
Has  Magic Number Test

======================================

Test:  should allow a parent animation to query and animate inner nodes that are in a disabled region
Has  Magic Number Test

======================================

Test:  should allow a parent animation to query and animate sub animations that are in a disabled region
Has  Magic Number Test

======================================

Test:  should disable the animation for the given element regardless of existing parent element animation queries or child element animation queries
Has  Magic Number Test

======================================

Test:  should query the old and new routes via :leave and :enter
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should allow inner enter animations to be emulated within a routed item
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should allow inner leave animations to be emulated within a routed item
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should properly collect :enter / :leave router nodes even when another non-router *template component is within the trigger boundaries
Has  Magic Number Test

======================================

Test:  should allow a recursive set of :leave animations to occur for nested routes
Has  Magic Number Test

======================================

Test:  should compute (*) animation styles for a container that is being removed
Has  Magic Number Test

======================================

Test:  should compute (!) animation styles for a container that is being inserted
Has  Magic Number Test

======================================

Test:  should compute pre (!) and post (*) animation styles with different dom states
Has  Magic Number Test

======================================

Test:  should treat * styles as ! when a removal animation is being rendered
Has  Magic Number Test

======================================

Test:  should treat * styles as ! for queried items that are collected in a container that is being removed
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should compute intermediate styles properly when an animation is cancelled
Has  Magic Number Test

======================================

Test:  should compute intermediate styles properly for multiple queried elements when an animation is cancelled
Has  Magic Number Test

======================================

Test:  should apply the `display` and `position` styles as regular inline styles for the duration of the animation
Has  Magic Number Test

======================================

Test:  should set normalized style property values on animation end
Has  Magic Number Test

======================================

Test:  should apply correct state transitions for both CamelCase and kebab-case CSS properties
Has  Magic Number Test

======================================

Test:  should handle a case when promise is rejected
Has  Exception Handling

======================================

Test:  should handle a case when observable emits an error
Has  Exception Handling

======================================

Test:  should expose the `window.ng` global utilities
Has  Conditional Test Logic

======================================

Test:  should throw when reentering tick
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should cleanup the DOM
Has  Magic Number Test

======================================

Test:  should invoke all registered `onDestroy` callbacks (internal API)
Has  Magic Number Test

======================================

Test:  should wait for asynchronous app initializers
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should rethrow sync errors even if the exceptionHandler is not rethrowing
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should rethrow promise errors even if the exceptionHandler is not rethrowing
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should throw useful error when ApplicationRef is not configured
Has  Exception Handling

======================================

Test:  should call the `ngDoBootstrap` method with `ApplicationRef` on the main module
Has  Exception Handling

======================================

Test:  should auto bootstrap components listed in @NgModule.bootstrap
Has  Exception Handling

======================================

Test:  should error if neither `ngDoBootstrap` nor @NgModule.bootstrap was specified
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should add bootstrapped module into platform modules list
Has  Exception Handling

======================================

Test:  should bootstrap with NoopNgZone
Has  Exception Handling

======================================

Test:  should resolve component resources when creating module factory
Has  Magic Number Test

======================================

Test:  should wait for asynchronous app initializers
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should rethrow sync errors even if the exceptionHandler is not rethrowing
Has  Magic Number Test

======================================

Test:  should rethrow promise errors even if the exceptionHandler is not rethrowing
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should dirty check attached views
Has  Magic Number Test

======================================

Test:  should not dirty check detached views
Has  Magic Number Test

======================================

Test:  should detach attached views if they are destroyed
Has  Magic Number Test

======================================

Test:  should detach attached embedded views if they are destroyed
Has  Magic Number Test

======================================

Test:  should not allow to attach a view to both, a view container and the ApplicationRef
Has  Magic Number Test

======================================

Test:  isStable should fire on synchronous component loading
Has  Unknown Test

======================================

Test:  isStable should fire after a microtask on init is completed
Has  Unknown Test

======================================

Test:  isStable should fire after a macrotask on init is completed
Has  Unknown Test

======================================

Test:  isStable should fire only after chain of micro and macrotasks on init are completed
Has  Unknown Test

======================================

Test:  isStable should fire only after chain of macro and microtasks on init are completed
Has  Unknown Test

======================================

Test:  isStable can be subscribed to many times
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should be fired after app becomes unstable
Has  Exception Handling
Has  Unknown Test

======================================

Test:  should properly notify live consumers (effect)
Has  Magic Number Test

======================================

Test:  should work with computed expressions
Has  Magic Number Test

======================================

Test:  should capture transform for later use in framework
Has  Magic Number Test

======================================

Test:  should throw if there is no value for required inputs
Has  Magic Number Test

======================================

Test:  should throw if a `computed` depends on an uninitialized required input
Has  Magic Number Test

======================================

Test:  should work with computed expressions
Has  Magic Number Test

======================================

Test:  should allow updates based on the previous value
Has  Magic Number Test

======================================

Test:  should return readonly signal
Has  Magic Number Test

======================================

Test:  should emit when the value changes
Has  Magic Number Test

======================================

Test:  should stop emitting after unsubscribing
Has  Magic Number Test

======================================

Test:  should not emit if the value does not change
Has  Magic Number Test

======================================

Test:  should not share subscriptions between models
Has  Magic Number Test

======================================

Test:  should throw if there is no value for required model
Has  Magic Number Test

======================================

Test:  should throw if a `computed` depends on an uninitialized required model
Has  Magic Number Test

======================================

Test:  should render template form
Has  Magic Number Test

======================================

Test:  should render template form
Has  Magic Number Test

======================================

Test:  should render an image with an updated `src`
Has  Magic Number Test

======================================

Test:  should not warn when an image in the fill mode is rendered correctly
Has  Magic Number Test

======================================

Test:  should warn if an image in the fill mode has zero height after rendering
Has  Magic Number Test

======================================

Test:  should not warn if there is no image distortion
Has  Magic Number Test

======================================

Test:  should warn if there is image distortion
Has  Magic Number Test

======================================

Test:  should log a warning when a LCP image is loaded lazily
Has  Magic Number Test

======================================

Test:  should warn if rendered image size is much smaller than intrinsic size
Has  Magic Number Test

======================================

Test:  should log a warning when a `priority` is missing on an LCP image
Has  Magic Number Test

======================================

Test:  should not warn if there is no oversized image
Has  Magic Number Test

======================================

Test:  should warn if rendered image size is much smaller than intrinsic size
Has  Magic Number Test

======================================

Test:  should log a warning when there is no preconnect for priority images
Has  Magic Number Test

======================================

Test:  should not produce any warnings in the console when a preconnect tag is present
Has  Magic Number Test

======================================

Test:  should support iterables
Has  Magic Number Test

======================================

Test:  should support changing the reference
Has  Magic Number Test

======================================

Test:  should handle swapping element
Has  Magic Number Test

======================================

Test:  should handle incremental swapping element
Has  Magic Number Test

======================================

Test:  should detect changes in list
Has  Magic Number Test

======================================

Test:  should remove and add same item
Has  Magic Number Test

======================================

Test:  should support duplicates
Has  Magic Number Test

======================================

Test:  should support insertions/moves
Has  Magic Number Test

======================================

Test:  should not report unnecessary moves
Has  Magic Number Test

======================================

Test:  support re-insertion
Has  Magic Number Test

======================================

Test:  should track removals normally
Has  Magic Number Test

======================================

Test:  should detect additions
Has  Magic Number Test

======================================

Test:  should handle changing key/values correctly
Has  Magic Number Test

======================================

Test:  should expose previous and current value
Has  Magic Number Test

======================================

Test:  should work regardless key order
Has  Magic Number Test

======================================

Test:  should support JS Object
Has  Magic Number Test

======================================

Test:  should work regardless key order
Has  Magic Number Test

======================================

Test:  should work regardless key order
Has  Magic Number Test

======================================

Test:  contributes to application stableness
Has  Exception Handling

======================================

Test:  when destroying a view (*no* animations)
Has  Magic Number Test

======================================

Test:  when a stable subscription synchronously causes another notification
Has  Magic Number Test

======================================

Test:  executes render hooks when a new one is registered
Has  Unknown Test

======================================

Test:  executes render hooks without refreshing CheckAlways views
Has  Magic Number Test

======================================

Test:  can recover when an error is re-thrown by the ErrorHandler
Has  Conditional Test Logic

======================================

Test:  change detects embedded view when attached to a host on ApplicationRef and declaration is marked for check
Has  Magic Number Test

======================================

Test:  change detects embedded view when attached directly to ApplicationRef and declaration is marked for check
Has  Magic Number Test

======================================

Test:  does not fail when global timing functions are patched and unpatched
Has  Conditional Test Logic

======================================

Test:  should not run change detection twice if manual tick called when CD was scheduled
Has  Magic Number Test

======================================

Test:  coalesces microtasks that happen during change detection into a single paint
Has  Conditional Test Logic

======================================

Test:  will not schedule change detection if listener callback is outside the zone
Has  Magic Number Test

======================================

Test:  should not run change detection twice if notified during AppRef.tick
Has  Magic Number Test

======================================

Test:  does not cause double change detection with run coalescing
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  does not cause double change detection with run coalescing when both schedulers are notified
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  reports an error when requested for a decorator
Has  Exception Handling

======================================

Test:  reports an error when requested for a partial declaration
Has  Exception Handling

======================================

Test:  should signal through whenStable when the fixture is stable (autoDetectChanges)
Has  Exception Handling

======================================

Test:  should signal through isStable when the fixture is stable (no autoDetectChanges)
Has  Exception Handling

======================================

Test:  undefined
Has  Exception Handling

======================================

Test:  undefined
Has  Exception Handling

======================================

Test:  undefined
Has  Exception Handling

======================================

Test:  undefined
Has  Exception Handling

======================================

Test:  should stabilize after async task in change detection (autoDetectChanges)
Has  Exception Handling

======================================

Test:  should stabilize after async task in change detection(no autoDetectChanges)
Has  Exception Handling

======================================

Test:  rejects whenStable promise when errors happen during appRef.tick
Has  Unknown Test

======================================

Test:  can opt-out of rethrowing application errors and rejecting whenStable promises
Has  Unknown Test

======================================

Test:  should return all defer blocks in the component
Has  Magic Number Test

======================================

Test:  reports errors from autoDetect change detection to error handler
Has  Conditional Test Logic

======================================

Test:  reports errors from checkNoChanges in autoDetect to error handler
Has  Conditional Test Logic

======================================

Test:  rejects whenStable promise when errors happen during detectChanges
Has  Unknown Test

======================================

Test:  should list all child nodes
Has  Magic Number Test

======================================

Test:  should list all component child elements
Has  Magic Number Test

======================================

Test:  should list conditional component child elements
Has  Magic Number Test

======================================

Test:  should list child elements within viewports
Has  Magic Number Test

======================================

Test:  should list classes on SVG nodes
Has  Conditional Test Logic

======================================

Test:  should query child elements by css
Has  Magic Number Test

======================================

Test:  should query child elements by directive
Has  Magic Number Test

======================================

Test:  should query re-projected child elements by directive
Has  Magic Number Test

======================================

Test:  should query directives on containers before directives in a view
Has  Magic Number Test

======================================

Test:  should query directives on views moved in the DOM
Has  Magic Number Test

======================================

Test:  when searching by listeners
Has  Magic Number Test

======================================

Test:  when searching by providerTokens
Has  Magic Number Test

======================================

Test:  when using the out-of-context element as the DebugElement query root
Has  Magic Number Test

======================================

Test:  should list locals
Has  Magic Number Test

======================================

Test:  should allow injecting from the element injector
Has  Magic Number Test

======================================

Test:  should list event listeners
Has  Magic Number Test

======================================

Test:  should trigger event handlers
Has  Magic Number Test

======================================

Test:  should preserve the type of the property values
Has  Magic Number Test

======================================

Test:  should include interpolated properties in the properties map
Has  Magic Number Test

======================================

Test:  should trigger events registered via Renderer2
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should return the same element when queried twice
Has  Magic Number Test

======================================

Test:  should clear event listeners when node is destroyed
Has  Magic Number Test

======================================

Test:  should not error when accessing node name
Has  Conditional Test Logic

======================================

Test:  should start in manual behavior mode
Has  Magic Number Test

======================================

Test:  should start in manual trigger mode by default
Has  Magic Number Test

======================================

Test:  should defer load immediately on playthrough
Has  Magic Number Test

======================================

Test:  should not defer load immediately when set to manual
Has  Magic Number Test

======================================

Test:  should render a placeholder defer state
Has  Magic Number Test

======================================

Test:  should render a loading defer state
Has  Magic Number Test

======================================

Test:  should render an error defer state
Has  Magic Number Test

======================================

Test:  should throw when rendering a template that does not exist
Has  Exception Handling

======================================

Test:  should get child defer blocks
Has  Magic Number Test

======================================

Test:  should return a default value when not requested provider on self and optional
Has  Magic Number Test

======================================

Test:  should correctly handle primitive values
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should propagate events
Has  Magic Number Test

======================================

Test:  should not propagate events if stopPropagation is called
Has  Magic Number Test

======================================

Test:  should trigger events when manually registered
Has  Magic Number Test

======================================

Test:  should allow host listening on the window
Has  Magic Number Test

======================================

Test:  should allow host listening on the window
Has  Magic Number Test

======================================

Test:  should call the next callback
Has  Magic Number Test

======================================

Test:  should work when no throw callback is provided
Has  Unknown Test

======================================

Test:  should call the return callback
Has  Unknown Test

======================================

Test:  should subscribe to the wrapper synchronously
Has  Magic Number Test

======================================

Test:  delivers next and error events synchronously
Has  Magic Number Test

======================================

Test:  delivers next and complete events synchronously
Has  Magic Number Test

======================================

Test:  delivers events asynchronously when forced to async mode
Has  Magic Number Test

======================================

Test:  reports whether it has subscribers
Has  Magic Number Test

======================================

Test:  remove a subscriber subscribed directly to EventEmitter
Has  Magic Number Test

======================================

Test:  remove a subscriber subscribed after applying operators with pipe()
Has  Magic Number Test

======================================

Test:  unsubscribing a subscriber invokes the dispose method
Has  Unknown Test

======================================

Test:  unsubscribing a subscriber after applying operators with pipe() invokes the dispose method
Has  Unknown Test

======================================

Test:  error thrown inside an Rx chain propagates to the error handler and disposes the chain
Has  Magic Number Test

======================================

Test:  error sent by EventEmitter should dispose the Rx chain and remove subscribers
Has  Magic Number Test

======================================

Test:  contributes to app stability
Has  Magic Number Test

======================================

Test:  should flush microtasks before returning
Has  Exception Handling

======================================

Test:  should run asynchronous code
Has  Exception Handling

======================================

Test:  should run chained thens
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should run Promise created in Promise
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should complain if the test throws an exception during async calls
Has  Exception Handling

======================================

Test:  should run queued zero duration timer on zero tick
Has  Magic Number Test

======================================

Test:  should run queued timer after sufficient clock ticks
Has  Magic Number Test

======================================

Test:  should run new macro tasks created by timer callback
Has  Magic Number Test

======================================

Test:  should not queue nested timer on tick with processNewMacroTasksSynchronously=false
Has  Magic Number Test

======================================

Test:  should run queued timer only once
Has  Magic Number Test

======================================

Test:  should not run cancelled timer
Has  Magic Number Test

======================================

Test:  should throw an error on dangling timers
Has  Magic Number Test

======================================

Test:  should throw an error on dangling periodic timers
Has  Magic Number Test

======================================

Test:  should run periodic timers
Has  Magic Number Test

======================================

Test:  should not run cancelled periodic timer
Has  Magic Number Test

======================================

Test:  should be able to cancel periodic timers from a callback
Has  Magic Number Test

======================================

Test:  should clear periodic timers
Has  Magic Number Test

======================================

Test:  should process microtasks before timers
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should process micro-tasks created in timers before next timers
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should flush tasks
Has  Magic Number Test

======================================

Test:  should flush multiple tasks
Has  Magic Number Test

======================================

Test:  should move periodic tasks
Has  Magic Number Test

======================================

Test:  should allow fakeAsync zone to retroactively set a zoneSpec outside of fakeAsync
Has  Exception Handling

======================================

Test:  should handle basic cases
Has  Conditional Test Logic

======================================

Test:  should support literals
Has  Magic Number Test

======================================

Test:  should support literal array made of literals
Has  Magic Number Test

======================================

Test:  should support literal array made of expressions
Has  Magic Number Test

======================================

Test:  should not recreate literal arrays unless their content changed
Has  Magic Number Test

======================================

Test:  should support literal maps made of literals
Has  Magic Number Test

======================================

Test:  should support literal maps made of expressions
Has  Magic Number Test

======================================

Test:  should not recreate literal maps unless their content changed
Has  Magic Number Test

======================================

Test:  should call pure pipes that are used multiple times only when the arguments change
Has  Magic Number Test

======================================

Test:  should support chains
Has  Magic Number Test

======================================

Test:  should support short-circuiting
Has  Magic Number Test

======================================

Test:  should happen without invoking the renderer
Has  Magic Number Test

======================================

Test:  should read directive properties
Has  Magic Number Test

======================================

Test:  should notify the directive when a group of records changes
Has  Magic Number Test

======================================

Test:  should not call ngOnInit again if it throws
Has  Exception Handling

======================================

Test:  should not call ngAfterContentInit again if it throws
Has  Exception Handling

======================================

Test:  should not call ngAfterViewInit again if it throws
Has  Exception Handling

======================================

Test:  should call ngOnDestroy on an injectable class
Has  Magic Number Test

======================================

Test:  should throw when a record gets changed after it has been checked
Has  Magic Number Test

======================================

Test:  should throw when a record gets changed after the first change detection pass
Has  Magic Number Test

======================================

Test:  should allow view to be created in a cd hook
Has  Magic Number Test

======================================

Test:  Detached should disable OnPush
Has  Magic Number Test

======================================

Test:  Reattaches in the original cd mode
Has  Magic Number Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should consume element binding changes
Has  Magic Number Test

======================================

Test:  should consume binding to aria-* attributes
Has  Magic Number Test

======================================

Test:  should remove an attribute when attribute expression evaluates to null
Has  Magic Number Test

======================================

Test:  should remove style when when style expression evaluates to null
Has  Magic Number Test

======================================

Test:  should consume binding to property names where attr name and property name do not match
Has  Magic Number Test

======================================

Test:  should consume binding to camel-cased properties
Has  Magic Number Test

======================================

Test:  should consume binding to innerHtml
Has  Magic Number Test

======================================

Test:  should consume directive watch expression change.
Has  Magic Number Test

======================================

Test:  should support directives where a binding attribute is not given
Has  Unknown Test

======================================

Test:  should read directives metadata from their binding token
Has  Unknown Test

======================================

Test:  should not detach views in ViewContainers when the parent view is destroyed.
Has  Magic Number Test

======================================

Test:  should use a comment while stamping out `<ng-template>` elements.
Has  Magic Number Test

======================================

Test:  should assign a component to a ref-
Has  Magic Number Test

======================================

Test:  should assign a directive to a ref-
Has  Magic Number Test

======================================

Test:  should assign a directive to a ref when it has multiple exportAs names
Has  Magic Number Test

======================================

Test:  should assign the component instance to a ref- with shorthand syntax
Has  Magic Number Test

======================================

Test:  should preserve case
Has  Magic Number Test

======================================

Test:  should use ChangeDetectorRef to manually request a check
Has  Magic Number Test

======================================

Test:  should be checked when its bindings got updated
Has  Magic Number Test

======================================

Test:  should be checked when an event is fired
Has  Magic Number Test

======================================

Test:  should be checked when an async pipe requests a check
Has  Magic Number Test

======================================

Test:  should support events via EventEmitter on regular elements
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should support updating host element via hostAttributes on host elements
Has  Magic Number Test

======================================

Test:  should support preventing default on render events
Has  Magic Number Test

======================================

Test:  should support render global events from multiple directives
Has  Magic Number Test

======================================

Test:  should allow to create a component at any bound location
Has  Magic Number Test

======================================

Test:  should allow to create multiple components at a location
Has  Magic Number Test

======================================

Test:  should throw with destroyed views
Has  Magic Number Test

======================================

Test:  should remove script tags from templates
Has  Magic Number Test

======================================

Test:  should report a meaningful error when a component is missing view annotation
Has  Exception Handling

======================================

Test:  should support moving embedded views of projectable nodes
Has  Magic Number Test

======================================

Test:  should support moving embedded views of projectable nodes in multiple slots
Has  Magic Number Test

======================================

Test:  should support moving embedded views of projectable nodes in multiple slots and interpolations
Has  Magic Number Test

======================================

Test:  should support moving embedded views with empty projectable slots
Has  Magic Number Test

======================================

Test:  should throw on bindings to unknown properties
Has  Magic Number Test

======================================

Test:  should throw on bindings to unknown properties
Has  Magic Number Test

======================================

Test:  should support host binding decorators
Has  Magic Number Test

======================================

Test:  should not remove whitespaces by default
Has  Magic Number Test

======================================

Test:  should not remove whitespaces when explicitly requested not to do so
Has  Magic Number Test

======================================

Test:  should remove whitespaces when explicitly requested to do so
Has  Magic Number Test

======================================

Test:  should display correct error message for orphan component if forbidOrphanRendering option is set
Has  Magic Number Test

======================================

Test:  should not throw error for orphan component if forbidOrphanRendering option is not set
Has  Magic Number Test

======================================

Test:  should contain all child directives in a <ng-container> (view dom)
Has  Magic Number Test

======================================

Test:  should error on unknown bound properties on custom elements by default
Has  Magic Number Test

======================================

Test:  should store the ComponentFactories in the NgModuleInjector
Has  Magic Number Test

======================================

Test:  should be supported in root modules
Has  Magic Number Test

======================================

Test:  should be supported in imported modules
Has  Magic Number Test

======================================

Test:  should be supported in nested components
Has  Magic Number Test

======================================

Test:  should support exported directives and pipes
Has  Magic Number Test

======================================

Test:  should support exported directives and pipes if the module is wrapped into an `ModuleWithProviders`
Has  Magic Number Test

======================================

Test:  should support reexported modules
Has  Magic Number Test

======================================

Test:  should support exporting individual directives of an imported module
Has  Magic Number Test

======================================

Test:  should support multiProviders
Has  Magic Number Test

======================================

Test:  should support multiProviders that are created using useExisting
Has  Magic Number Test

======================================

Test:  should provide undefined
Has  Magic Number Test

======================================

Test:  should still allow to implement a recursive trees via multiple components
Has  Magic Number Test

======================================

Test:  should support shadow dom content projection and isolate styles per component
Has  Magic Number Test

======================================

Test:  should support nested conditionals that contain ng-contents
Has  Magic Number Test

======================================

Test:  should contain all direct child directives in the content dom
Has  Magic Number Test

======================================

Test:  should be cleanly destroyed when a query crosses view boundaries
Has  Unknown Test

======================================

Test:  should find TemplateRefs in the light and shadow dom
Has  Magic Number Test

======================================

Test:  should find named TemplateRefs
Has  Magic Number Test

======================================

Test:  should contain the first descendant content child for shallow queries
Has  Magic Number Test

======================================

Test:  should contain the first descendant content child in an embedded template for shallow queries
Has  Magic Number Test

======================================

Test:  should contain the first descendant content child in an embedded template for shallow queries and additional directive
Has  Magic Number Test

======================================

Test:  should contain the first descendant content child in an embedded template for shallow queries and additional directive (star syntax)
Has  Magic Number Test

======================================

Test:  should not cross ng-container boundaries with shallow queries
Has  Magic Number Test

======================================

Test:  should support reading a ViewContainer
Has  Magic Number Test

======================================

Test:  should correctly clean-up when destroyed together with the directives it is querying
Has  Magic Number Test

======================================

Test:  should contain all child directives in the view dom
Has  Magic Number Test

======================================

Test:  should reflect changes in the component
Has  Magic Number Test

======================================

Test:  should not be affected by other changes in the component
Has  Magic Number Test

======================================

Test:  should handle long ngFor cycles
Has  Magic Number Test

======================================

Test:  should include manually projected templates in queries
Has  Magic Number Test

======================================

Test:  should update queries when a view is detached and re-inserted
Has  Magic Number Test

======================================

Test:  should remove manually projected templates if their parent view is destroyed
Has  Magic Number Test

======================================

Test:  should not throw if a content template is queried and created in the view during change detection - fixed in ivy
Has  Magic Number Test

======================================

Test:  should initially be dirty and empty
Has  Magic Number Test

======================================

Test:  should be not dirty after reset
Has  Magic Number Test

======================================

Test:  should support length
Has  Magic Number Test

======================================

Test:  should support get
Has  Magic Number Test

======================================

Test:  should support filter with index
Has  Magic Number Test

======================================

Test:  should support find with index
Has  Magic Number Test

======================================

Test:  should support toString
Has  Magic Number Test

======================================

Test:  should support guards on filter
Has  Magic Number Test

======================================

Test:  should be iterable
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should fire callbacks on change
Has  Magic Number Test

======================================

Test:  should only evaluate stateful pipes once - #10639
Has  Magic Number Test

======================================

Test:  should only update the bound property when using asyncPipe - #15205
Has  Magic Number Test

======================================

Test:  should only evaluate methods once - #10639
Has  Magic Number Test

======================================

Test:  should not recreate ViewContainerRefs in queries
Has  Magic Number Test

======================================

Test:  should allow empty components
Has  Magic Number Test

======================================

Test:  should keep change detecting if there was an error
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should escape unsafe properties
Has  Unknown Test

======================================

Test:  should escape unsafe attributes
Has  Unknown Test

======================================

Test:  should escape unsafe properties if they are used in host bindings
Has  Unknown Test

======================================

Test:  should escape unsafe attributes if they are used in host bindings
Has  Unknown Test

======================================

Test:  should escape unsafe SVG attributes
Has  Magic Number Test

======================================

Test:  should use the right source url in html parse errors
Has  Unknown Test

======================================

Test:  should report source location for binding errors
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should report source location for event errors
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should instantiate directives that have no dependencies
Has  Magic Number Test

======================================

Test:  should support useValue with different values
Has  Magic Number Test

======================================

Test:  should instantiate providers that have dependencies with SkipSelf
Has  Magic Number Test

======================================

Test:  should instantiate providers that have dependencies
Has  Magic Number Test

======================================

Test:  should instantiate viewProviders that have dependencies
Has  Magic Number Test

======================================

Test:  should instantiate components that depend on viewProviders providers
Has  Magic Number Test

======================================

Test:  should instantiate multi providers
Has  Magic Number Test

======================================

Test:  should instantiate providers lazily
Has  Magic Number Test

======================================

Test:  should provide undefined
Has  Magic Number Test

======================================

Test:  should instantiate view providers lazily
Has  Magic Number Test

======================================

Test:  should instantiate directives that depend on providers of other directives
Has  Magic Number Test

======================================

Test:  should instantiate directives that depend on providers in a parent view
Has  Magic Number Test

======================================

Test:  should instantiate directives that depend on providers of a component
Has  Magic Number Test

======================================

Test:  should instantiate directives that depend on view providers of a component
Has  Magic Number Test

======================================

Test:  should instantiate directives in a root embedded view that depend on view providers of a component
Has  Magic Number Test

======================================

Test:  should instantiate directives that depend on instances in the app injector
Has  Magic Number Test

======================================

Test:  should inject ElementRef
Has  Magic Number Test

======================================

Test:  should inject ChangeDetectorRef of the component's view into the component
Has  Magic Number Test

======================================

Test:  should inject ChangeDetectorRef of the containing component into directives
Has  Magic Number Test

======================================

Test:  should inject ChangeDetectorRef of a same element component into a directive
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should inject ViewContainerRef
Has  Magic Number Test

======================================

Test:  should inject TemplateRef
Has  Magic Number Test

======================================

Test:  should instantiate pipes that have dependencies
Has  Magic Number Test

======================================

Test:  should overwrite pipes with later entry in the pipes array
Has  Magic Number Test

======================================

Test:  should inject ChangeDetectorRef into pipes
Has  Magic Number Test

======================================

Test:  should not error when destroying a component that has been moved in the DOM
Has  Unknown Test

======================================

Test:  should support type selector
Has  Magic Number Test

======================================

Test:  should support string selector
Has  Magic Number Test

======================================

Test:  should resolve template
Has  Magic Number Test

======================================

Test:  should resolve styleUrls
Has  Magic Number Test

======================================

Test:  should cache multiple resolution to same URL
Has  Magic Number Test

======================================

Test:  should keep order even if the resolution is out of order
Has  Magic Number Test

======================================

Test:  should resolve styles passed in as a string
Has  Magic Number Test

======================================

Test:  should resolve styleUrl
Has  Magic Number Test

======================================

Test:  should resolve both styles passed in as a string together with styleUrl
Has  Magic Number Test

======================================

Test:  should ensure that rendererFactory is called after initial styling is set
Has  Conditional Test Logic

======================================

Test:  should return empty dependencies if component has no registered module
Has  Magic Number Test

======================================

Test:  should add values
Has  Magic Number Test

======================================

Test:  should query values
Has  Magic Number Test

======================================

Test:  should handle initial undefined state
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should publish getComponent
Has  Unknown Test

======================================

Test:  should publish getContext
Has  Unknown Test

======================================

Test:  should publish getListeners
Has  Unknown Test

======================================

Test:  should publish getOwningComponent
Has  Unknown Test

======================================

Test:  should publish getRootComponents
Has  Unknown Test

======================================

Test:  should publish getDirectives
Has  Unknown Test

======================================

Test:  should publish getHostComponent
Has  Unknown Test

======================================

Test:  should publish getInjector
Has  Unknown Test

======================================

Test:  should publish applyChanges
Has  Unknown Test

======================================

Test:  should publish getDirectiveMetadata
Has  Unknown Test

======================================

Test:  should publish ɵsetProfiler
Has  Unknown Test

======================================

Test:  should add first node
Has  Magic Number Test

======================================

Test:  should not update the `insertBeforeIndex` values
Has  Magic Number Test

======================================

Test:  should update the previous insertBeforeIndex
Has  Magic Number Test

======================================

Test:  should not update the previous insertBeforeIndex if it is already set
Has  Magic Number Test

======================================

Test:  should not update the previous insertBeforeIndex if it is created after
Has  Magic Number Test

======================================

Test:  should not update the `insertBeforeIndex` values
Has  Magic Number Test

======================================

Test:  should update the previous insertBeforeIndex
Has  Magic Number Test

======================================

Test:  should not update the previous insertBeforeIndex if it is already set
Has  Magic Number Test

======================================

Test:  should not update the previous insertBeforeIndex if it is created after
Has  Magic Number Test

======================================

Test:  should rearrange the nodes
Has  Magic Number Test

======================================

Test:  should parse simple text
Has  Magic Number Test

======================================

Test:  should parse simple ICU
Has  Magic Number Test

======================================

Test:  should parse HTML in ICU
Has  Magic Number Test

======================================

Test:  should parse nested ICU
Has  Magic Number Test

======================================

Test:  should crop messages for the selected template
Has  Magic Number Test

======================================

Test:  should throw if the template is malformed
Has  Magic Number Test

======================================

Test:  for text
Has  Magic Number Test

======================================

Test:  for elements
Has  Magic Number Test

======================================

Test:  for simple bindings
Has  Magic Number Test

======================================

Test:  for multiple bindings
Has  Magic Number Test

======================================

Test:  for sub-templates
Has  Magic Number Test

======================================

Test:  for ICU expressions
Has  Magic Number Test

======================================

Test:  for nested ICU expressions
Has  Magic Number Test

======================================

Test:  for simple bindings
Has  Magic Number Test

======================================

Test:  for multiple bindings
Has  Magic Number Test

======================================

Test:  for multiple attributes
Has  Magic Number Test

======================================

Test:  should process text node with no siblings and no children
Has  Magic Number Test

======================================

Test:  should process text with a child node
Has  Magic Number Test

======================================

Test:  should process text with a child node that has text
Has  Magic Number Test

======================================

Test:  should process text with a child node that has text and with bindings
Has  Magic Number Test

======================================

Test:  should process text with a child template
Has  Magic Number Test

======================================

Test:  should print text opCode
Has  Magic Number Test

======================================

Test:  should print Attribute opCode
Has  Magic Number Test

======================================

Test:  should print icuSwitch opCode
Has  Magic Number Test

======================================

Test:  should print icuUpdate opCode
Has  Magic Number Test

======================================

Test:  should print text AppendChild
Has  Magic Number Test

======================================

Test:  should print element AppendChild
Has  Magic Number Test

======================================

Test:  should print comment AppendChild
Has  Magic Number Test

======================================

Test:  should print Remove
Has  Magic Number Test

======================================

Test:  should print Attr
Has  Magic Number Test

======================================

Test:  should print RemoveNestedIcu
Has  Magic Number Test

======================================

Test:  should print text/comment creation
Has  Magic Number Test

======================================

Test:  should do set basic style
Has  Unknown Test

======================================

Test:  should search across multiple instructions backwards
Has  Unknown Test

======================================

Test:  should search across multiple instructions forwards
Has  Unknown Test

======================================

Test:  should set style based on priority
Has  Magic Number Test

======================================

Test:  should set class based on priority
Has  Magic Number Test

======================================

Test:  should work with maps
Has  Magic Number Test

======================================

Test:  should work with object literal and strings
Has  Magic Number Test

======================================

Test:  should collaborate with properties
Has  Unknown Test

======================================

Test:  should collaborate with other maps
Has  Unknown Test

======================================

Test:  should append suffix
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should append suffix and non-suffix bindings
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should capture static values in TStylingKey
Has  Unknown Test

======================================

Test:  should update residual on second directive
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should combine property and map
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should read value from residual
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should throw on negative values
Has  Magic Number Test

======================================

Test:  should throw on overflow
Has  Magic Number Test

======================================

Test:  should correctly increment
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should error in DevMode if index is out of range
Has  Magic Number Test

======================================

Test:  should update bindings when value changes with the correct perf counters
Has  Magic Number Test

======================================

Test:  should not update bindings when value does not change, with the correct perf counters
Has  Magic Number Test

======================================

Test:  should create an element with the correct perf counters
Has  Magic Number Test

======================================

Test:  should use sanitizer function
Has  Magic Number Test

======================================

Test:  should chain
Has  Magic Number Test

======================================

Test:  should create tView only once for each nested level
Has  Magic Number Test

======================================

Test:  should return a context object from a given dom node
Has  Magic Number Test

======================================

Test:  should by default monkey-patch the directives with LView so that they can be examined
Has  Magic Number Test

======================================

Test:  should monkey-patch the exact same context instance of the DOM node, component and any directives on the same element
Has  Magic Number Test

======================================

Test:  should not match for non objects
Has  Magic Number Test

======================================

Test:  should match on shape
Has  Magic Number Test

======================================

Test:  should not match if missing property
Has  Magic Number Test

======================================

Test:  compiles a partially compiled component with split dependencies
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  compiles a partially compiled component with unified dependencies
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  compiles an injectable with a useClass provider, without deps
Has  Magic Number Test

======================================

Test:  compiles a module to a definition
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  compiles a module with an id and registers it correctly
Has  Conditional Test Logic

======================================

Test:  should add hostbindings and hostlisteners
Has  Magic Number Test

======================================

Test:  ensure at least one spec exists
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should attach class decorators
Has  Magic Number Test

======================================

Test:  should attach property decorators
Has  Magic Number Test

======================================

Test:  should attach constructor parameters
Has  Magic Number Test

======================================

Test:  should compile a minimal component declaration
Has  Unknown Test

======================================

Test:  should compile a selector
Has  Unknown Test

======================================

Test:  should compile inputs and outputs
Has  Unknown Test

======================================

Test:  should compile input with a transform function
Has  Unknown Test

======================================

Test:  should compile exportAs
Has  Unknown Test

======================================

Test:  should compile providers
Has  Unknown Test

======================================

Test:  should compile view providers
Has  Unknown Test

======================================

Test:  should compile content queries
Has  Unknown Test

======================================

Test:  should compile view queries
Has  Unknown Test

======================================

Test:  should compile host bindings
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should compile components with inheritance
Has  Unknown Test

======================================

Test:  should compile components with onChanges lifecycle hook
Has  Unknown Test

======================================

Test:  should compile components with OnPush change detection strategy
Has  Unknown Test

======================================

Test:  should compile components with styles
Has  Unknown Test

======================================

Test:  should compile components with view encapsulation
Has  Unknown Test

======================================

Test:  should compile components with animations
Has  Unknown Test

======================================

Test:  should honor preserveWhitespaces
Has  Unknown Test

======================================

Test:  should honor custom interpolation config
Has  Unknown Test

======================================

Test:  should compile used components
Has  Unknown Test

======================================

Test:  should compile used directives
Has  Unknown Test

======================================

Test:  should compile used directives together with used components
Has  Unknown Test

======================================

Test:  should compile forward declared directives
Has  Unknown Test

======================================

Test:  should compile mixed forward and direct declared directives
Has  Unknown Test

======================================

Test:  should compile used pipes
Has  Unknown Test

======================================

Test:  should compile forward declared pipes
Has  Unknown Test

======================================

Test:  should compile mixed forward and direct declared pipes
Has  Unknown Test

======================================

Test:  should compile a minimal directive declaration
Has  Unknown Test

======================================

Test:  should compile a selector
Has  Unknown Test

======================================

Test:  should compile inputs and outputs
Has  Unknown Test

======================================

Test:  should compile exportAs
Has  Unknown Test

======================================

Test:  should compile providers
Has  Unknown Test

======================================

Test:  should compile content queries
Has  Unknown Test

======================================

Test:  should compile content queries with forwardRefs
Has  Unknown Test

======================================

Test:  should compile view queries
Has  Unknown Test

======================================

Test:  should compile view queries with forwardRefs
Has  Unknown Test

======================================

Test:  should compile host bindings
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should compile directives with inheritance
Has  Unknown Test

======================================

Test:  should compile directives with onChanges lifecycle hook
Has  Unknown Test

======================================

Test:  should compile host directives
Has  Unknown Test

======================================

Test:  should compile a minimal NgModule declaration
Has  Unknown Test

======================================

Test:  should compile an NgModule declaration with bootstrap classes
Has  Unknown Test

======================================

Test:  should compile an NgModule declaration with forward referenced bootstrap classes
Has  Unknown Test

======================================

Test:  should compile an NgModule declaration with declarations classes
Has  Unknown Test

======================================

Test:  should compile an NgModule declaration with forward referenced declarations classes
Has  Unknown Test

======================================

Test:  should compile an NgModule declaration with imports classes
Has  Unknown Test

======================================

Test:  should compile an NgModule declaration with forward referenced imports classes
Has  Unknown Test

======================================

Test:  should compile an NgModule declaration with exports classes
Has  Unknown Test

======================================

Test:  should compile an NgModule declaration with forward referenced exports classes
Has  Unknown Test

======================================

Test:  should compile an NgModule declaration with schemas
Has  Unknown Test

======================================

Test:  should compile an NgModule declaration with an id expression
Has  Unknown Test

======================================

Test:  should add items at the end
Has  Magic Number Test

======================================

Test:  should swap items
Has  Magic Number Test

======================================

Test:  should should optimally swap adjacent items
Has  Magic Number Test

======================================

Test:  should detect moves to the front
Has  Magic Number Test

======================================

Test:  should delete items in the middle
Has  Magic Number Test

======================================

Test:  should delete items from the beginning
Has  Magic Number Test

======================================

Test:  should delete items from the end
Has  Magic Number Test

======================================

Test:  should delete multiple items from the middle
Has  Magic Number Test

======================================

Test:  should add multiple items in the middle
Has  Magic Number Test

======================================

Test:  should go back to the fast path when start / end is different
Has  Magic Number Test

======================================

Test:  should detect moves to the back
Has  Magic Number Test

======================================

Test:  should create / reuse duplicated items as needed
Has  Magic Number Test

======================================

Test:  should add items at the end
Has  Magic Number Test

======================================

Test:  should add multiple items in the middle
Has  Magic Number Test

======================================

Test:  should delete items from the end
Has  Magic Number Test

======================================

Test:  should detect (slow) moves to the front
Has  Magic Number Test

======================================

Test:  should detect (fast) moves to the back
Has  Magic Number Test

======================================

Test:  should update when tracking by index - fast path from the start
Has  Magic Number Test

======================================

Test:  should update when tracking by key - fast path from the end
Has  Magic Number Test

======================================

Test:  should update when swapping on the fast path
Has  Magic Number Test

======================================

Test:  should update when moving forward on the fast path
Has  Magic Number Test

======================================

Test:  forwardRef resolves later
Has  Magic Number Test

======================================

Test:  should not cross the root view boundary, and use the root view injector
Has  Conditional Test Logic

======================================

Test:  should work from within the template
Has  Magic Number Test

======================================

Test:  should work from the host of the component
Has  Magic Number Test

======================================

Test:  should restore queries if view changes
Has  Magic Number Test

======================================

Test:  should be safe to call ViewContainerRef.createEmbeddedView
Has  Unknown Test

======================================

Test:  should be safe to call TemplateRef.create
Has  Unknown Test

======================================

Test:  should be safe to flip @if to true
Has  Unknown Test

======================================

Test:  should contribute to application stableness when an effect is pending
Has  Unknown Test

======================================

Test:  should be usable inside an ErrorHandler
Has  Conditional Test Logic

======================================

Test:  should run effect cleanup function on destroy
Has  Magic Number Test

======================================

Test:  should disallow writing to signals within effects by default
Has  Magic Number Test

======================================

Test:  should allow writing to signals within effects when option set
Has  Magic Number Test

======================================

Test:  should allow writing to signals in ngOnChanges
Has  Conditional Test Logic

======================================

Test:  should not execute query setters in the reactive context
Has  Magic Number Test

======================================

Test:  should allow toObservable subscription in template (with async pipe)
Has  Magic Number Test

======================================

Test:  if multiple effects are created
Has  Magic Number Test

======================================

Test:  should match simple case
Has  Magic Number Test

======================================

Test:  should not match on partial matches
Has  Magic Number Test

======================================

Test:  should append template only
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should append host only
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should append template and host
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should support example in 'tnode_linked_list.ts' documentation
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should not mark items as duplicate if names don't match
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should mark items as duplicate if names match
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should treat maps as matching all
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should mark all things after map as duplicate
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should mark duplicate on complex objects like width.px
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should mark duplicate on static fields
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should support promises
Has  Exception Handling
Has  Unknown Test

======================================

Test:  should support async and await
Has  Unknown Test

======================================

Test:  should have requestAnimationFrame
Has  Unknown Test

======================================

Test:  should add new attributes
Has  Magic Number Test

======================================

Test:  should keep different types together
Has  Magic Number Test

======================================

Test:  should include the file path and line number for component if debug info includes them
Has  Magic Number Test

======================================

Test:  should include only the class name if debug info does not contain file path
Has  Magic Number Test

======================================

Test:  should default to showing just the class name for component if debug info is not available
Has  Magic Number Test

======================================

Test:  should not enter an infinite loop on clobbered elements
Has  Exception Handling
Has  Unknown Test

======================================

Test:  should sanitize the content when `nextSibling` or `firstChild` were clobbered
Has  Conditional Test Logic

======================================

Test:  should not allow JavaScript execution when creating inert document
Has  Conditional Test Logic

======================================

Test:  should not allow JavaScript hidden in badly formed HTML to get through sanitization (Firefox bug)
Has  Conditional Test Logic

======================================

Test:  should select correct sanitizer for URL props
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  undefined
Has  EmptyTest

======================================

Test:  undefined
Has  EmptyTest

======================================

Test:  should create computed
Has  Magic Number Test

======================================

Test:  should not re-compute if there are no dependencies
Has  Magic Number Test

======================================

Test:  should not re-compute if the dependency is a primitive value and the value did not change
Has  Magic Number Test

======================================

Test:  should evaluate computed only when subscribing
Has  Conditional Test Logic

======================================

Test:  should cache exceptions thrown until computed gets dirty again
Has  Conditional Test Logic

======================================

Test:  should not update dependencies of computations when dependencies don't change
Has  Magic Number Test

======================================

Test:  should not mark dirty computed signals that are dirty already
Has  Magic Number Test

======================================

Test:  should allow signal creation within computed
Has  Magic Number Test

======================================

Test:  should recompute only once for diamond dependency graph
Has  Magic Number Test

======================================

Test:  should read the latest value from signal
Has  Magic Number Test

======================================

Test:  should not add dependencies to computed when reading a value from a signal
Has  Magic Number Test

======================================

Test:  should refresh computed value if stale and read non-reactively 
Has  Magic Number Test

======================================

Test:  should not make surrounding effect depend on the signal
Has  Magic Number Test

======================================

Test:  should schedule on dependencies (computed) change
Has  Magic Number Test

======================================

Test:  should accept update function to set new value based on the previous one
Has  Magic Number Test

======================================

Test:  should allow converting writable signals to their readonly counterpart
Has  Magic Number Test

======================================

Test:  should not repeatedly poll status of a non-live node if no signals have changed
Has  Magic Number Test

======================================

Test:  should call the post-signal-set fn when invoking .set()
Has  Magic Number Test

======================================

Test:  should call the post-signal-set fn when invoking .update()
Has  Magic Number Test

======================================

Test:  should not call the post-signal-set fn when the value doesn't change
Has  Magic Number Test

======================================

Test:  should create and run once, even without dependencies
Has  Magic Number Test

======================================

Test:  should schedule on dependencies (signal) change
Has  Magic Number Test

======================================

Test:  should not schedule when a previous dependency changes
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not update dependencies when dependencies don't change
Has  Magic Number Test

======================================

Test:  should allow registering cleanup function from the watch logic
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should forget previously registered cleanup function when effect re-runs
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should throw an error when reading a signal during the notification phase
Has  Magic Number Test

======================================

Test:  should not run destroyed watchers
Has  Magic Number Test

======================================

Test:  should disconnect destroyed watches from the reactive graph
Has  Magic Number Test

======================================

Test:  should not schedule destroyed watches
Has  Magic Number Test

======================================

Test:  should not run cleanup functions after destroy
Has  Magic Number Test

======================================

Test:  should compile without errors
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should not call ngOnDestroy for a service that was overridden
Has  Magic Number Test

======================================

Test:  should be able to create a fixture if a test module is reset mid-compilation
Has  Magic Number Test

======================================

Test:  is preserved when other provider is overridden
Has  Magic Number Test

======================================

Test:  should not trigger change detection for ComponentA while calling TestBed.createComponent for ComponentB
Has  Magic Number Test

======================================

Test:  should resolve components without async resources synchronously
Has  Exception Handling
Has  Unknown Test

======================================

Test:  should override providers on dependencies of dynamically loaded components
Has  Magic Number Test

======================================

Test:  should restore ng defs to their initial states
Has  Magic Number Test

======================================

Test:  should cleanup scopes (configured via `TestBed.configureTestingModule`) between tests
Has  Magic Number Test

======================================

Test:  should destroy test module providers when test module teardown is enabled
Has  Magic Number Test

======================================

Test:  should not error on mocked and partially-implemented `DOCUMENT`
Has  Magic Number Test

======================================

Test:  should re-throw errors that were thrown during fixture cleanup
Has  Magic Number Test

======================================

Test:  should not interrupt fixture destruction if an error is thrown
Has  Magic Number Test

======================================

Test:  should be able to opt out of rethrowing of errors coming from module teardown
Has  Magic Number Test

======================================

Test:  should remove the styles associated with a test component when the test module is torn down
Has  Magic Number Test

======================================

Test:  should fire if Angular is already stable
Has  Magic Number Test

======================================

Test:  should fire when macroTasks are cancelled
Has  Magic Number Test

======================================

Test:  calls the done callback when angular is stable
Has  Magic Number Test

======================================

Test:  calls update when macro tasks change
Has  Magic Number Test

======================================

Test:  cancels the done callback if the update callback returns true
Has  Magic Number Test

======================================

Test:  should remove the testability when unregistering an existing testability
Has  Magic Number Test

======================================

Test:  should remain the same when unregistering a non-existing testability
Has  Magic Number Test

======================================

Test:  should remove all the testability when unregistering all testabilities
Has  Magic Number Test

======================================

Test:  is initialized from script tag
Has  Magic Number Test

======================================

Test:  is initialized to empty state if script tag not found
Has  Magic Number Test

======================================

Test:  supports adding new keys using set
Has  Magic Number Test

======================================

Test:  supports setting and accessing value '0' via get
Has  Magic Number Test

======================================

Test:  supports setting and accessing value 'null' via get
Has  Magic Number Test

======================================

Test:  supports removing keys
Has  Magic Number Test

======================================

Test:  supports serialization using toJson()
Has  Magic Number Test

======================================

Test:  calls onSerialize callbacks when calling toJson()
Has  Magic Number Test

======================================

Test:  should provide an ability to detect whether the state is empty
Has  Magic Number Test

======================================

Test:  should flatten a flat array
Has  Magic Number Test

======================================

Test:  should flatten a nested array depth-first
Has  Magic Number Test

======================================

Test:  should remove items
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should insert items
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should insert items
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should get index of
Has  Magic Number Test

======================================

Test:  should support basic operations
Has  Magic Number Test

======================================

Test:  should coerce zero to true
Has  Magic Number Test

======================================

Test:  should coerce undefined to the default value
Has  Magic Number Test

======================================

Test:  should coerce null to the default value
Has  Magic Number Test

======================================

Test:  should coerce true to the default value
Has  Magic Number Test

======================================

Test:  should coerce false to the default value
Has  Magic Number Test

======================================

Test:  should coerce the empty string to the default value
Has  Magic Number Test

======================================

Test:  should coerce the string "1" to 1
Has  Magic Number Test

======================================

Test:  should coerce the string "123.456" to 123.456
Has  Magic Number Test

======================================

Test:  should coerce the string "-123.456" to -123.456
Has  Magic Number Test

======================================

Test:  should coerce an arbitrary string to the default value
Has  Magic Number Test

======================================

Test:  should coerce an arbitrary string prefixed with a number to the default value
Has  Magic Number Test

======================================

Test:  should coerce the number 1 to 1
Has  Magic Number Test

======================================

Test:  should coerce the number 123.456 to 123.456
Has  Magic Number Test

======================================

Test:  should coerce the number -123.456 to -123.456
Has  Magic Number Test

======================================

Test:  should coerce an object to the default value
Has  Magic Number Test

======================================

Test:  should coerce an array to the default value
Has  Magic Number Test

======================================

Test:  should work with any default plain values
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should work with any object values
Has  Magic Number Test

======================================

Test:  should invoke as decorator
Has  Magic Number Test

======================================

Test:  should not apply decorators from the prototype chain
Has  Magic Number Test

======================================

Test:  should be true for an Observable
Has  EmptyTest

======================================

Test:  should be true if the argument is the object with subscribe function
Has  EmptyTest

======================================

Test:  should be false if the argument is undefined
Has  EmptyTest

======================================

Test:  should be false if the argument is null
Has  EmptyTest

======================================

Test:  should be false if the argument is an object
Has  EmptyTest

======================================

Test:  should be false if the argument is a function
Has  EmptyTest

======================================

Test:  should return string undefined when toString returns undefined
Has  EmptyTest

======================================

Test:  should return string null when toString returns null
Has  EmptyTest

======================================

Test:  setTimeout
Has  Magic Number Test

======================================

Test:  setInterval
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  Promise
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  XMLHttpRequest
Has  Magic Number Test

======================================

Test:  button click
Has  Magic Number Test

======================================

Test:  should produce long stack traces
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should produce long stack traces (when using microtasks)
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should disable long stack traces
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should run with this context and arguments
Has  Magic Number Test

======================================

Test:  should be true
Has  Magic Number Test

======================================

Test:  should be true when timer is scheduled
Has  Magic Number Test

======================================

Test:  should return the body return value from run
Has  Magic Number Test

======================================

Test:  should return the body return value from runTask
Has  Magic Number Test

======================================

Test:  should call onStable once at the end of event
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should run subscriber listeners in the subscription zone (inside)
Has  Conditional Test Logic

======================================

Test:  should call onUnstable and onMicrotaskEmpty before and after each turn
Has  Exception Handling

======================================

Test:  should call onUnstable and onMicrotaskEmpty when an inner microtask is scheduled from outside angular
Has  Exception Handling

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  should execute promises scheduled in onUnstable before promises scheduled in run
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should call onUnstable and onMicrotaskEmpty before and after each turn, respectively
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should call onUnstable and onMicrotaskEmpty for promises created outside of run body
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should call the on error callback when it is invoked via zone.runGuarded
Has  Magic Number Test

======================================

Test:  should not call the on error callback but rethrow when it is invoked via zone.run
Has  Magic Number Test

======================================

Test:  should call onError for errors from microtasks
Has  Magic Number Test

======================================

Test:  should fakeAsync even if the NgZone was created outside.
Has  Exception Handling

======================================

Test:  should async even if the NgZone was created outside.
Has  Exception Handling
Has  Unknown Test

======================================

Test:  coalescing can work with fakeAsync
Has  Conditional Test Logic

======================================

Test:  should execute callback when a view transition is waiting for the callback to complete
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should only emit onMicroTaskEmpty once within the same event loop for ngZone.run in onMicrotaskEmpty subscription
Has  Magic Number Test

======================================

Test:  should only emit onMicroTaskEmpty once within the same event loop for ngZone.run in onMicrotaskEmpty subscription
Has  Magic Number Test

======================================

Test:  should initialize the component with falsy initial values
Has  Magic Number Test

======================================

Test:  should call ngOnChanges with the change
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should call ngOnChanges with proper firstChange value
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should not detect changes
Has  Magic Number Test

======================================

Test:  should detect changes
Has  Magic Number Test

======================================

Test:  should detect changes once for multiple input changes
Has  Magic Number Test

======================================

Test:  should not detect changes if the input is set to the same value
Has  Magic Number Test

======================================

Test:  should call ngOnChanges
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should call ngOnChanges once for multiple input changes
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should call ngOnChanges twice for changes in different rounds with previous values
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should not call ngOnChanges if the inout is set to the same value
Has  Magic Number Test

======================================

Test:  should not try to call ngOnChanges if not present on the component
Has  Magic Number Test

======================================

Test:  should mark the view for check
Has  Magic Number Test

======================================

Test:  should mark the view for check once for multiple input changes
Has  Magic Number Test

======================================

Test:  should mark the view for check twice for changes in different rounds with previous values
Has  Magic Number Test

======================================

Test:  should mark the view for check even if ngOnChanges is not present on the component
Has  Magic Number Test

======================================

Test:  should not mark the view for check if the input is set to the same value
Has  Magic Number Test

======================================

Test:  should destroy the component after the destroy delay
Has  Magic Number Test

======================================

Test:  should be able to call it multiple times but only destroy once
Has  Magic Number Test

======================================

Test:  should use provided EnvironmentInjector to create a custom element
Has  Exception Handling

======================================

Test:  should match each node to the corresponding selector
Has  EmptyTest
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should ignore non-matching nodes
Has  EmptyTest
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should only match top-level child nodes
Has  EmptyTest
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should support complex selectors
Has  EmptyTest
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should match each node with the first matching selector
Has  EmptyTest
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should match non-element nodes to `*` (but still ignore comments)
Has  EmptyTest
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should match otherwise unmatched nodes to `*`
Has  EmptyTest
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should give higher priority to `*` (eve if it appears first)
Has  EmptyTest
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  undefined
Has  EmptyTest
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should use slots to project content
Has  Magic Number Test

======================================

Test:  should use a named slot to project content
Has  Magic Number Test

======================================

Test:  should listen to slotchange events
Has  Magic Number Test

======================================

Test:  should return a function for cancelling the scheduled job
Has  Magic Number Test

======================================

Test:  should delegate to `scheduler.schedule()`
Has  Magic Number Test

======================================

Test:  should return a function for cancelling the scheduled job
Has  Magic Number Test

======================================

Test:  should consider two `NaN` values equals
Has  Magic Number Test

======================================

Test:  should verify paths
Has  Magic Number Test

======================================

Test:  should hide/show content
Has  Magic Number Test

======================================

Test:  should hide/show content
Has  Magic Number Test

======================================

Test:  should hide/show content
Has  Magic Number Test

======================================

Test:  should hide/show content
Has  Magic Number Test

======================================

Test:  should resolve and display promise
Has  Magic Number Test

======================================

Test:  should work properly
Has  Magic Number Test

======================================

Test:  should work properly
Has  Magic Number Test

======================================

Test:  should work properly
Has  Magic Number Test

======================================

Test:  should work properly
Has  Magic Number Test

======================================

Test:  should work properly
Has  Magic Number Test

======================================

Test:  should work properly
Has  Magic Number Test

======================================

Test:  should list out the current collection of items
Has  Magic Number Test

======================================

Test:  works
Has  Magic Number Test

======================================

Test:  times out with a list of tasks
Has  Exception Handling

======================================

Test:  should work with ngOnChanges
Has  Magic Number Test

======================================

Test:  should populate the UI with initial values
Has  Magic Number Test

======================================

Test:  should update the validation status
Has  Magic Number Test

======================================

Test:  should populate the UI with initial values
Has  Magic Number Test

======================================

Test:  should add inputs programmatically
Has  Magic Number Test

======================================

Test:  should set the value programmatically
Has  Magic Number Test

======================================

Test:  should populate the UI with initial values
Has  Magic Number Test

======================================

Test:  should show the error when name is invalid
Has  Magic Number Test

======================================

Test:  should set the value when changing the domain model
Has  Magic Number Test

======================================

Test:  should populate the UI with initial values
Has  Magic Number Test

======================================

Test:  update model and other buttons as the UI value changes
Has  Magic Number Test

======================================

Test:  should populate the UI with initial values
Has  Magic Number Test

======================================

Test:  update model and other buttons as the UI value changes
Has  Magic Number Test

======================================

Test:  should populate the initial selection
Has  Magic Number Test

======================================

Test:  should update the model when the value changes in the UI
Has  Magic Number Test

======================================

Test:  should initially select the placeholder option
Has  Magic Number Test

======================================

Test:  should update the model when the value changes in the UI
Has  Magic Number Test

======================================

Test:  should update the domain model as you type
Has  Magic Number Test

======================================

Test:  should report the validity correctly
Has  Magic Number Test

======================================

Test:  should update the domain model as you type
Has  Magic Number Test

======================================

Test:  should report the validity correctly
Has  Magic Number Test

======================================

Test:  testing a guard
Has  Conditional Test Logic

======================================

Test:  does something
Has  EmptyTest
Has  Unknown Test

======================================

Test:  has a test
Has  EmptyTest
Has  Unknown Test

======================================

Test:  also has a test
Has  Unknown Test

======================================

Test:  has a test
Has  Unknown Test

======================================

Test:  also has a test
Has  EmptyTest
Has  Unknown Test

======================================

Test:  has another test
Has  Unknown Test

======================================

Test:  has another test
Has  EmptyTest
Has  Unknown Test

======================================

Test:  uses the db
Has  EmptyTest
Has  Unknown Test

======================================

Test:  uses the db
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should render the `ng2-heroes` component
Has  Magic Number Test

======================================

Test:  should render 3 ng1-hero components
Has  Magic Number Test

======================================

Test:  should remove a hero when the "Remove" button is pressed
Has  Magic Number Test

======================================

Test:  should initially not render the heroes
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should toggle the heroes when clicking the "show/hide" button
Has  Unknown Test

======================================

Test:  should add a new hero when clicking the "add" button
Has  Magic Number Test

======================================

Test:  should remove a hero when clicking its "remove" button
Has  Magic Number Test

======================================

Test:  should correctly bootstrap multiple downgraded modules
Has  Magic Number Test

======================================

Test:  should reexport control properties
Has  Unknown Test

======================================

Test:  should reexport new control properties
Has  Unknown Test

======================================

Test:  should mark as disabled properly
Has  Magic Number Test

======================================

Test:  should support pushing
Has  Magic Number Test

======================================

Test:  should support removing
Has  Magic Number Test

======================================

Test:  should support inserting
Has  Magic Number Test

======================================

Test:  should not emit events when calling `FormArray.push` with `emitEvent: false`
Has  Magic Number Test

======================================

Test:  should not emit events when calling `FormArray.removeAt` with `emitEvent: false`
Has  Magic Number Test

======================================

Test:  should not emit events when calling `FormArray.insert` with `emitEvent: false`
Has  Magic Number Test

======================================

Test:  should not emit events when calling `FormArray.setControl` with `emitEvent: false`
Has  Magic Number Test

======================================

Test:  should not emit status change events when `FormArray.push` is called with `emitEvent: false`
Has  Conditional Test Logic

======================================

Test:  should not emit events on the parent when called with `emitEvent: false`
Has  Magic Number Test

======================================

Test:  should be the reduced value of the child controls
Has  Magic Number Test

======================================

Test:  should work with nested form groups/arrays
Has  Magic Number Test

======================================

Test:  should run the validator when the value changes
Has  Conditional Test Logic

======================================

Test:  should fire an event when a control is removed
Has  Magic Number Test

======================================

Test:  should fire an event when a control is added
Has  Magic Number Test

======================================

Test:  should return an element of an array
Has  Magic Number Test

======================================

Test:  should ignore disabled controls when determining dirtiness
Has  Magic Number Test

======================================

Test:  should ignore disabled controls when determining touched state
Has  Magic Number Test

======================================

Test:  should not run validators on disabled controls
Has  Magic Number Test

======================================

Test:  should replace existing control with new control
Has  Magic Number Test

======================================

Test:  should add control if control did not exist before
Has  Magic Number Test

======================================

Test:  should remove control if new control is null
Has  Magic Number Test

======================================

Test:  should only emit value change event once
Has  Magic Number Test

======================================

Test:  should work with at
Has  Magic Number Test

======================================

Test:  should work with setControl
Has  Magic Number Test

======================================

Test:  should work with removeAt
Has  Magic Number Test

======================================

Test:  should work with insert
Has  Magic Number Test

======================================

Test:  wrapping from the back between [-length, 0)
Has  Magic Number Test

======================================

Test:  becoming undefined when less than -length
Has  Magic Number Test

======================================

Test:  at -1
Has  Magic Number Test

======================================

Test:  at -2
Has  Magic Number Test

======================================

Test:  at -3
Has  Magic Number Test

======================================

Test:  at -4
Has  Magic Number Test

======================================

Test:  at -5
Has  Magic Number Test

======================================

Test:  at -10
Has  Magic Number Test

======================================

Test:  at -1
Has  Magic Number Test

======================================

Test:  at -2
Has  Magic Number Test

======================================

Test:  at -3
Has  Magic Number Test

======================================

Test:  at -4
Has  Magic Number Test

======================================

Test:  at -5
Has  Magic Number Test

======================================

Test:  at -10
Has  Magic Number Test

======================================

Test:  at -1
Has  Magic Number Test

======================================

Test:  at -2
Has  Magic Number Test

======================================

Test:  at -3
Has  Magic Number Test

======================================

Test:  at -4
Has  Magic Number Test

======================================

Test:  at -5
Has  Magic Number Test

======================================

Test:  at -10
Has  Magic Number Test

======================================

Test:  by a simple strongly-typed array
Has  Unknown Test

======================================

Test:  by a class that redefines many properties
Has  Unknown Test

======================================

Test:  should create control arrays with ControlConfigs
Has  Magic Number Test

======================================

Test:  should create nested control arrays with ControlConfigs
Has  Magic Number Test

======================================

Test:  should create groups with shorthand parameters and with right typings
Has  Magic Number Test

======================================

Test:  should default to array updateOn when not set in control
Has  Magic Number Test

======================================

Test:  should set updateOn with nested arrays
Has  Magic Number Test

======================================

Test:  can be provided where a FormBuilder is expected and vice versa
Has  Unknown Test

======================================

Test:  should default to array updateOn when not set in control
Has  Magic Number Test

======================================

Test:  should set updateOn with nested arrays
Has  Magic Number Test

======================================

Test:  should support multiple validators from options obj
Has  Magic Number Test

======================================

Test:  should set multiple validators from array
Has  Magic Number Test

======================================

Test:  should override validators using `setValidators` function
Has  Magic Number Test

======================================

Test:  should not mutate the validators array when overriding using setValidators
Has  Magic Number Test

======================================

Test:  should override validators by setting `control.validator` field value
Has  Magic Number Test

======================================

Test:  should not mutate the validators array when adding/removing sync validators
Has  Magic Number Test

======================================

Test:  should not mutate the validators array when adding/removing async validators
Has  Magic Number Test

======================================

Test:  should return false when checking presence of a validator not identical by reference
Has  Magic Number Test

======================================

Test:  should only use the latest async validation run
Has  Magic Number Test

======================================

Test:  should not mutate the validators array when overriding using setValidators
Has  Magic Number Test

======================================

Test:  should not fire an event when explicitly specified
Has  Unknown Test

======================================

Test:  should not fire an event when explicitly specified
Has  Unknown Test

======================================

Test:  should not fire an event when explicitly specified
Has  Unknown Test

======================================

Test:  should not run validators on disabled controls
Has  Magic Number Test

======================================

Test:  should perform basic FormControl operations
Has  Unknown Test

======================================

Test:  and is appropriately narrowed
Has  Conditional Test Logic
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should work with nested form groups/arrays
Has  Magic Number Test

======================================

Test:  should update value and validity when control is added
Has  Magic Number Test

======================================

Test:  should not emit status change events when `FormGroup.addControl` is called with `emitEvent: false`
Has  Conditional Test Logic

======================================

Test:  should not emit events on the parent when called with `emitEvent: false`
Has  Magic Number Test

======================================

Test:  should be able to reset a nested control with null
Has  Magic Number Test

======================================

Test:  should traverse group with form array using string and numbers
Has  Magic Number Test

======================================

Test:  should traverse group with form array using string and numbers
Has  Magic Number Test

======================================

Test:  should run the async validator
Has  Magic Number Test

======================================

Test:  should set the parent group's status to pending
Has  Magic Number Test

======================================

Test:  should run the parent group's async validator when children are pending
Has  Magic Number Test

======================================

Test:  should handle successful async FormGroup resolving synchronously before a successful async child validator
Has  Magic Number Test

======================================

Test:  should handle successful async FormGroup resolving after a synchronously and successfully resolving child validator
Has  Magic Number Test

======================================

Test:  should handle failing async FormArray and successful children validators resolving synchronously
Has  Magic Number Test

======================================

Test:  should handle failing FormGroup validator resolving after successful child validator
Has  Magic Number Test

======================================

Test:  should handle failing FormArray validator resolving after successful child validator
Has  Magic Number Test

======================================

Test:  should handle successful FormGroup validator resolving after successful child validator
Has  Magic Number Test

======================================

Test:  should handle successful FormArray validator resolving after successful child validators
Has  Magic Number Test

======================================

Test:  should handle failing FormArray validator resolving after successful child validators
Has  Magic Number Test

======================================

Test:  should handle multiple successful FormGroup validators resolving after successful child validator
Has  Magic Number Test

======================================

Test:  should handle multiple FormGroup validators (success then failure) resolving after successful child validator
Has  Magic Number Test

======================================

Test:  should handle multiple FormGroup validators (failure then success) resolving after successful child validator
Has  Magic Number Test

======================================

Test:  should handle async validators in nested form groups / arrays
Has  Magic Number Test

======================================

Test:  should handle failing FormGroup validator resolving before successful child validator
Has  Magic Number Test

======================================

Test:  should handle failing FormArray validator resolving before successful child validator
Has  Magic Number Test

======================================

Test:  should not run validators on disabled controls
Has  Magic Number Test

======================================

Test:  should run the async validator on stand alone controls and set status to `INVALID`
Has  Magic Number Test

======================================

Test:  should run the async validator on stand alone controls and set status to `VALID`
Has  Magic Number Test

======================================

Test:  should run the async validator on stand alone controls, include `PENDING` and set status to `INVALID`
Has  Magic Number Test

======================================

Test:  should run setValue before the initial async validator and set status to `VALID`
Has  Magic Number Test

======================================

Test:  should run setValue before the initial async validator and set status to `INVALID`
Has  Magic Number Test

======================================

Test:  should cancel initial run of the async validator and not emit anything
Has  Magic Number Test

======================================

Test:  should cancel initial run of the async validator and emit on the event Observable
Has  Magic Number Test

======================================

Test:  should run the sync validator on stand alone controls and set status to `INVALID`
Has  Magic Number Test

======================================

Test:  should run the sync validator on stand alone controls and set status to `VALID`
Has  Magic Number Test

======================================

Test:  should run the async validator on the FormControl added to the FormGroup and set status to `VALID`
Has  Magic Number Test

======================================

Test:  should run the async validator on the FormControl added to the FormGroup and set status to `INVALID`
Has  Magic Number Test

======================================

Test:  should run the async validator at `FormControl` and `FormGroup` level and set status to `INVALID`
Has  Magic Number Test

======================================

Test:  should run the async validator on a `FormArray` and a `FormControl` and status to `INVALID`
Has  Magic Number Test

======================================

Test:  by a group with string keys
Has  Unknown Test

======================================

Test:  by a group with generic keys
Has  Unknown Test

======================================

Test:  by a group with unconstrained generic keys
Has  Unknown Test

======================================

Test:  should throw with invalid keys
Has  Magic Number Test

======================================

Test:  should update nested form group model when UI changes
Has  Magic Number Test

======================================

Test:  should strip array controls that are not found
Has  Magic Number Test

======================================

Test:  should attach dirs to all child controls when group control changes
Has  Magic Number Test

======================================

Test:  should remove controls correctly after re-binding a form array
Has  Magic Number Test

======================================

Test:  should submit properly after removing controls on a re-bound array
Has  Magic Number Test

======================================

Test:  should insert controls properly on a re-bound array
Has  Magic Number Test

======================================

Test:  should support form arrays
Has  Magic Number Test

======================================

Test:  should support pushing new controls to form arrays
Has  Magic Number Test

======================================

Test:  should support form groups nested in form arrays
Has  Magic Number Test

======================================

Test:  should add disabled attribute to child controls when disable() is called on group
Has  Magic Number Test

======================================

Test:  Single level Control should emit changes for itself
Has  Magic Number Test

======================================

Test:  should not emit twice the same value
Has  Magic Number Test

======================================

Test:  Nested formControl should emit changes for itself and its parent
Has  Magic Number Test

======================================

Test:  Nested formControl children should emit pristine
Has  Magic Number Test

======================================

Test:  Nested formControl should emit dirty
Has  Magic Number Test

======================================

Test:  Nested formControl should emit touched
Has  Magic Number Test

======================================

Test:  Nested formControl should emit disabled
Has  Magic Number Test

======================================

Test:  Nested formControl should emit PENDING
Has  Magic Number Test

======================================

Test:  formControl should not emit when emitEvent is false
Has  Magic Number Test

======================================

Test:  formControl should emit an event when resetting a form
Has  Magic Number Test

======================================

Test:  formControl should emit an event when submitting a form
Has  Magic Number Test

======================================

Test:  should be able to remove a control as a result of another control being reset
Has  Conditional Test Logic

======================================

Test:  should not prevent the default action on forms with method="dialog"
Has  Conditional Test Logic

======================================

Test:  should warn once by default when using ngModel with formControlName
Has  Magic Number Test

======================================

Test:  should warn once by default when using ngModel with formControl
Has  Magic Number Test

======================================

Test:  should warn once for each instance when global provider is provided with "always"
Has  Magic Number Test

======================================

Test:  should not update the view when the value initially came from the view
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should use sync validators using bindings
Has  Magic Number Test

======================================

Test:  changes on bound properties should change the validation state of the form
Has  Magic Number Test

======================================

Test:  should support rebound controls with rebound validators
Has  Magic Number Test

======================================

Test:  should use async validators defined in the html
Has  Magic Number Test

======================================

Test:  async validator should not override result of sync validator
Has  Magic Number Test

======================================

Test:  should handle async validation changes in parent and child controls
Has  Magic Number Test

======================================

Test:  should cancel observable properly between validation runs
Has  Magic Number Test

======================================

Test:  should not activate minlength and maxlength validators if input is null
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not activate min and max validators if input is null
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should validate max
Has  Magic Number Test

======================================

Test:  should validate max for float number
Has  Magic Number Test

======================================

Test:  should apply max validation when control value is defined as a string
Has  Magic Number Test

======================================

Test:  should validate min
Has  Magic Number Test

======================================

Test:  should validate min for float number
Has  Magic Number Test

======================================

Test:  should apply min validation when control value is defined as a string
Has  Magic Number Test

======================================

Test:  should run min/max validation when constraints are represented as strings
Has  Magic Number Test

======================================

Test:  should run min/max validation for negative values
Has  Magic Number Test

======================================

Test:  should fire registerOnValidatorChange for validators attached to the formGroups
Has  Magic Number Test

======================================

Test:  should throw if formControlName is used without a control container
Has  Conditional Test Logic

======================================

Test:  should throw if formControlName, with an index, is used without a control container
Has  Conditional Test Logic

======================================

Test:  should throw, without indicating the affected form control, if formControlName is used without a control container
Has  Conditional Test Logic

======================================

Test:  should determine IME event handling depending on platform by default
Has  Conditional Test Logic

======================================

Test:  should clean up validators when FormGroup is replaced
Has  Magic Number Test

======================================

Test:  should clean up validators when FormControl inside FormGroup is replaced
Has  Magic Number Test

======================================

Test:  should call validators defined via `set[Async]Validators` after view init
Has  Magic Number Test

======================================

Test:  should cleanup validators on a control used for multiple `formControlName` directives
Has  Magic Number Test

======================================

Test:  should cleanup directive-specific callbacks only
Has  Magic Number Test

======================================

Test:  should clean up callbacks when FormControlDirective is destroyed (simple)
Has  Unknown Test

======================================

Test:  should clean up callbacks when FormGroupDirective is destroyed
Has  Unknown Test

======================================

Test:  should clean up when FormControl is destroyed (but parent FormGroup exists)
Has  Unknown Test

======================================

Test:  should clean up controls produced by *ngFor
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should clean up when FormArrayName is destroyed (but parent FormGroup exists)
Has  Unknown Test

======================================

Test:  should clean up when FormArrayName is destroyed (but parent FormGroup exists)
Has  Unknown Test

======================================

Test:  should clean up all child controls when FormGroup is destroyed
Has  Unknown Test

======================================

Test:  should clean up all child controls (with *ngFor) when FormArrayName is destroyed
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should clean up all child controls when FormGroupName is destroyed
Has  Unknown Test

======================================

Test:  should clean up all child controls when FormGroup is destroyed
Has  Unknown Test

======================================

Test:  should support ngModelGroup
Has  Magic Number Test

======================================

Test:  should set status classes with ngModel
Has  Exception Handling

======================================

Test:  should set status classes with ngModel and async validators
Has  Exception Handling

======================================

Test:  should set status classes with ngModelGroup and ngForm
Has  Exception Handling

======================================

Test:  should not create a template-driven form when ngNoForm is used
Has  Magic Number Test

======================================

Test:  should keep track of the ngModel value when together used with an ngFor inside a form
Has  Magic Number Test

======================================

Test:  should keep track of the ngModel value when together used with an ngFor inside an ngModelGroup
Has  Magic Number Test

======================================

Test:  should not register standalone ngModels with parent form
Has  Magic Number Test

======================================

Test:  should not prevent the default action on forms with method="dialog"
Has  Conditional Test Logic

======================================

Test:  should disable a custom control if disabled attr is added
Has  Exception Handling

======================================

Test:  should support dir validators using bindings
Has  Magic Number Test

======================================

Test:  should support optional fields with minlength validator
Has  Magic Number Test

======================================

Test:  changes on bound properties should change the validation state of the form
Has  Magic Number Test

======================================

Test:  should update control status
Has  Magic Number Test

======================================

Test:  should validate max
Has  Magic Number Test

======================================

Test:  should validate max for float number
Has  Magic Number Test

======================================

Test:  should apply max validation when control value is defined as a string
Has  Magic Number Test

======================================

Test:  should re-validate if max changes
Has  Magic Number Test

======================================

Test:  should validate min
Has  Magic Number Test

======================================

Test:  should validate min for float number
Has  Magic Number Test

======================================

Test:  should apply min validation when control value is defined as a string
Has  Magic Number Test

======================================

Test:  should re-validate if min changes
Has  Magic Number Test

======================================

Test:  should not include the min and max validators when using another directive with the same properties
Has  Magic Number Test

======================================

Test:  should not include the minLength and maxLength validators for null
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not include the min and max validators for null
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  undefined
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should validate min and max
Has  Magic Number Test

======================================

Test:  should apply min and max validation when control value is defined as a string
Has  Magic Number Test

======================================

Test:  should re-validate if min/max changes
Has  Magic Number Test

======================================

Test:  should run min/max validation for empty values 
Has  Magic Number Test

======================================

Test:  should run min/max validation for negative values
Has  Magic Number Test

======================================

Test:  should call registerOnValidatorChange as a part of a formGroup setup
Has  Magic Number Test

======================================

Test:  should determine IME event handling depending on platform by default
Has  Conditional Test Logic

======================================

Test:  should update the view when the model is set back to what used to be in the view
Has  Magic Number Test

======================================

Test:  supports inferred controls
Has  Unknown Test

======================================

Test:  supports explicit controls
Has  Unknown Test

======================================

Test:  supports explicit boolean controls
Has  Unknown Test

======================================

Test:  supports empty controls
Has  Unknown Test

======================================

Test:  supports nullable controls
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should create a nullable control without {nonNullable: true}
Has  Unknown Test

======================================

Test:  should not allow assignment to an incompatible control
Has  Unknown Test

======================================

Test:  is assignable to AbstractControl
Has  Unknown Test

======================================

Test:  is assignable to UntypedFormControl
Has  Unknown Test

======================================

Test:  supports inferred groups
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  supports explicit groups
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  supports explicit groups with boolean types
Has  Unknown Test

======================================

Test:  supports empty groups
Has  Unknown Test

======================================

Test:  supports groups with nullable controls
Has  Unknown Test

======================================

Test:  supports groups with the default type
Has  Magic Number Test

======================================

Test:  supports groups with explicit named interface types
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  supports groups with nested explicit named interface types
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  supports nested inferred groups
Has  Unknown Test

======================================

Test:  supports nested explicit groups
Has  Unknown Test

======================================

Test:  supports groups with a single optional control
Has  Unknown Test

======================================

Test:  supports groups with mixed optional controls
Has  Unknown Test

======================================

Test:  supports nested groups with optional controls
Has  Unknown Test

======================================

Test:  supports groups with inferred nested arrays
Has  Unknown Test

======================================

Test:  supports groups with explicit nested arrays
Has  Unknown Test

======================================

Test:  supports groups with an index type
Has  Unknown Test

======================================

Test:  should have strongly-typed get
Has  Unknown Test

======================================

Test:  is assignable to AbstractControl
Has  Unknown Test

======================================

Test:  is assignable to UntypedFormGroup
Has  Unknown Test

======================================

Test:  is assignable to UntypedFormGroup in a complex case
Has  Unknown Test

======================================

Test:  supports inferred records
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  supports explicit records
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  supports inferred arrays
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  supports explicit arrays
Has  Unknown Test

======================================

Test:  supports explicit arrays with boolean types
Has  Unknown Test

======================================

Test:  supports arrays with the default type
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  supports empty arrays
Has  Unknown Test

======================================

Test:  supports arrays with nullable controls
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  supports inferred nested arrays
Has  Unknown Test

======================================

Test:  supports explicit nested arrays
Has  Unknown Test

======================================

Test:  supports arrays with inferred nested groups
Has  Unknown Test

======================================

Test:  supports arrays with explicit nested groups
Has  Unknown Test

======================================

Test:  should have strongly-typed get
Has  Unknown Test

======================================

Test:  is assignable to UntypedFormArray
Has  Unknown Test

======================================

Test:  model classes support a complex, deeply nested case
Has  Unknown Test

======================================

Test:  on FormControls
Has  Magic Number Test

======================================

Test:  on FormGroups
Has  Magic Number Test

======================================

Test:  nullably from values
Has  Unknown Test

======================================

Test:  non-nullably from values
Has  Unknown Test

======================================

Test:  nullably from FormStates
Has  Unknown Test

======================================

Test:  non-nullably from FormStates
Has  Unknown Test

======================================

Test:  with array values
Has  Unknown Test

======================================

Test:  from objects with plain values
Has  Unknown Test

======================================

Test:  from objects with optional keys
Has  Unknown Test

======================================

Test:  from objects with FormControlState
Has  Unknown Test

======================================

Test:  from objects with ControlConfigs
Has  Unknown Test

======================================

Test:  from objects with FormControlStates nested inside ControlConfigs
Has  Unknown Test

======================================

Test:  from objects with ControlConfigs and validators
Has  Magic Number Test

======================================

Test:  from objects with ControlConfigs and validator lists
Has  Unknown Test

======================================

Test:  from objects with ControlConfigs and explicit types
Has  Unknown Test

======================================

Test:  nullably
Has  Unknown Test

======================================

Test:  non-nullably
Has  Unknown Test

======================================

Test:  from objects with direct FormGroups
Has  Unknown Test

======================================

Test:  from objects with builder FormGroups
Has  Unknown Test

======================================

Test:  from objects with builder FormRecords
Has  Unknown Test

======================================

Test:  from objects with builder FormArrays
Has  Unknown Test

======================================

Test:  from objects with plain values
Has  Unknown Test

======================================

Test:  from objects with FormControlState
Has  Unknown Test

======================================

Test:  from objects with ControlConfigs
Has  Unknown Test

======================================

Test:  from objects with ControlConfigs and validators
Has  Unknown Test

======================================

Test:  from objects with ControlConfigs and validator lists
Has  Unknown Test

======================================

Test:  from objects with ControlConfigs and explicit types
Has  Unknown Test

======================================

Test:  nullably
Has  Unknown Test

======================================

Test:  non-nullably
Has  Unknown Test

======================================

Test:  from objects with builder FormGroups
Has  Unknown Test

======================================

Test:  from objects with builder FormRecords
Has  Unknown Test

======================================

Test:  from objects with builder FormArrays
Has  Unknown Test

======================================

Test:  from arrays with plain values
Has  Unknown Test

======================================

Test:  from arrays with FormControlStates
Has  Unknown Test

======================================

Test:  from arrays with ControlConfigs
Has  Unknown Test

======================================

Test:  nullably
Has  Unknown Test

======================================

Test:  non-nullably
Has  Unknown Test

======================================

Test:  from arrays with direct FormArrays
Has  Unknown Test

======================================

Test:  from arrays with builder FormArrays
Has  Unknown Test

======================================

Test:  from arrays with builder FormGroups
Has  Unknown Test

======================================

Test:  from arrays with builder FormRecords
Has  Unknown Test

======================================

Test:  should work with a complex, deeply nested case
Has  Unknown Test

======================================

Test:  from objects with ControlConfigs and validators
Has  Magic Number Test

======================================

Test:  without distributing union types
Has  Unknown Test

======================================

Test:  is assignable with the typed version in both directions
Has  Unknown Test

======================================

Test:  is an escape hatch from a strongly-typed FormControl
Has  Unknown Test

======================================

Test:  is assignable with the typed version in both directions
Has  Unknown Test

======================================

Test:  is assignable to FormGroup
Has  Unknown Test

======================================

Test:  is an escape hatch from a strongly-typed FormGroup
Has  Unknown Test

======================================

Test:  is assignable with the typed version in both directions
Has  Unknown Test

======================================

Test:  should build untyped FormControls
Has  Magic Number Test

======================================

Test:  should build untyped FormGroups
Has  Magic Number Test

======================================

Test:  can be provided where a FormBuilder is expected and vice versa
Has  Unknown Test

======================================

Test:  should not error on an empty string
Has  Magic Number Test

======================================

Test:  should not error on null
Has  Magic Number Test

======================================

Test:  should not error on undefined
Has  Magic Number Test

======================================

Test:  should return null if NaN after parsing
Has  Magic Number Test

======================================

Test:  should return a validation error on small values
Has  Magic Number Test

======================================

Test:  should return a validation error on small values converted from strings
Has  Magic Number Test

======================================

Test:  should not error on small float number validation
Has  Magic Number Test

======================================

Test:  should not error on equal float values
Has  Magic Number Test

======================================

Test:  should return a validation error on big values
Has  Magic Number Test

======================================

Test:  should not error on big values
Has  Magic Number Test

======================================

Test:  should not error on equal values
Has  Magic Number Test

======================================

Test:  should not error on equal values when value is string
Has  Magic Number Test

======================================

Test:  should validate as expected when min value is a string
Has  Magic Number Test

======================================

Test:  should return null if min value is undefined
Has  Magic Number Test

======================================

Test:  should return null if min value is null
Has  Magic Number Test

======================================

Test:  should not error on an empty string
Has  Magic Number Test

======================================

Test:  should not error on null
Has  Magic Number Test

======================================

Test:  should not error on undefined
Has  Magic Number Test

======================================

Test:  should return null if NaN after parsing
Has  Magic Number Test

======================================

Test:  should not error on small float number validation
Has  Magic Number Test

======================================

Test:  should not error on equal float values
Has  Magic Number Test

======================================

Test:  should return a validation error on big values
Has  Magic Number Test

======================================

Test:  should return a validation error on big values
Has  Magic Number Test

======================================

Test:  should return a validation error on big values converted from strings
Has  Magic Number Test

======================================

Test:  should not error on small values
Has  Magic Number Test

======================================

Test:  should not error on equal values
Has  Magic Number Test

======================================

Test:  should not error on equal values when value is string
Has  Magic Number Test

======================================

Test:  should validate as expected when max value is a string
Has  Magic Number Test

======================================

Test:  should return null if max value is undefined
Has  Magic Number Test

======================================

Test:  should return null if max value is null
Has  Magic Number Test

======================================

Test:  should accept zero as valid
Has  Magic Number Test

======================================

Test:  should error on an empty array
Has  EmptyTest

======================================

Test:  should not error on a non-empty array
Has  EmptyTest
Has  Magic Number Test

======================================

Test:  should not error on an object containing a length attribute that is zero
Has  Magic Number Test

======================================

Test:  should error on false
Has  EmptyTest

======================================

Test:  should not error on true
Has  EmptyTest

======================================

Test:  should not error on an empty string
Has  EmptyTest

======================================

Test:  should not error on null
Has  EmptyTest

======================================

Test:  should error on invalid email
Has  EmptyTest

======================================

Test:  should not error on valid email
Has  EmptyTest

======================================

Test:  should not error on an empty string
Has  Magic Number Test

======================================

Test:  should not error on null
Has  Magic Number Test

======================================

Test:  should not error on undefined
Has  Magic Number Test

======================================

Test:  should not error on valid strings
Has  Magic Number Test

======================================

Test:  should error on short strings
Has  Magic Number Test

======================================

Test:  should not error when FormArray has valid length
Has  Magic Number Test

======================================

Test:  should error when FormArray has invalid length
Has  Magic Number Test

======================================

Test:  should always return null with numeric values
Has  Magic Number Test

======================================

Test:  should trigger validation for an object that contains numeric length property
Has  Magic Number Test

======================================

Test:  should return null when passing a boolean
Has  Magic Number Test

======================================

Test:  should not error on an empty string
Has  Magic Number Test

======================================

Test:  should not error on null
Has  Magic Number Test

======================================

Test:  should not error on undefined
Has  Magic Number Test

======================================

Test:  should not error on valid strings
Has  Magic Number Test

======================================

Test:  should error on long strings
Has  Magic Number Test

======================================

Test:  should not error when FormArray has valid length
Has  Magic Number Test

======================================

Test:  should error when FormArray has invalid length
Has  Magic Number Test

======================================

Test:  should always return null with numeric values
Has  Magic Number Test

======================================

Test:  should trigger validation for an object that contains numeric length property
Has  Magic Number Test

======================================

Test:  should return null when passing a boolean
Has  Magic Number Test

======================================

Test:  should not error on valid strings
Has  EmptyTest

======================================

Test:  should not error on "null" pattern
Has  EmptyTest

======================================

Test:  should not error on "undefined" pattern
Has  EmptyTest

======================================

Test:  should work with pattern string containing both boundary symbols
Has  EmptyTest

======================================

Test:  should work with pattern string containing only start boundary symbols
Has  EmptyTest

======================================

Test:  should work with pattern string containing only end boundary symbols
Has  EmptyTest

======================================

Test:  should work with pattern string not containing any boundary symbols
Has  EmptyTest

======================================

Test:  should run validators left to right
Has  Magic Number Test

======================================

Test:  should wait for all validators before setting errors
Has  Magic Number Test

======================================

Test:  should ignore the change event for <input type=text>
Has  Unknown Test

======================================

Test:  with basic use case
Has  Magic Number Test

======================================

Test:  when value is cleared in the UI
Has  Magic Number Test

======================================

Test:  should ignore the change event
Has  Unknown Test

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  should compare options using provided compareWith function
Has  Conditional Test Logic

======================================

Test:  should support re-assigning the options array with compareWith
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  with option values that are objects
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  when new options are added
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  when options are removed
Has  Magic Number Test

======================================

Test:  when option values have same content, but different identities
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should compare options using provided compareWith function
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should support re-assigning the options array with compareWith
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should support primitive values
Has  Conditional Test Logic

======================================

Test:  should support objects
Has  Conditional Test Logic

======================================

Test:  should compare options using provided compareWith function
Has  Conditional Test Logic

======================================

Test:  verify that native `selectedOptions` field is used while detecting the list of selected options
Has  Conditional Test Logic

======================================

Test:  should reflect state of model after option selected and new options subsequently added
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  should reflect state of model after option selected and then other options removed
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  should compare options using provided compareWith function
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should support basic functionality
Has  Magic Number Test

======================================

Test:  should support an initial undefined value
Has  Magic Number Test

======================================

Test:  should reset properly
Has  Magic Number Test

======================================

Test:  should properly set value to null and undefined
Has  Magic Number Test

======================================

Test:  should use formControlName to group radio buttons when name is absent
Has  Magic Number Test

======================================

Test:  should support removing controls from <type=radio>
Has  Conditional Test Logic

======================================

Test:  should differentiate controls on different levels with the same name
Has  Magic Number Test

======================================

Test:  should disable all radio buttons when disable() is called
Has  Magic Number Test

======================================

Test:  should disable all radio buttons when initially disabled
Has  Magic Number Test

======================================

Test:  should work with reusing controls
Has  Magic Number Test

======================================

Test:  should support basic functionality
Has  Magic Number Test

======================================

Test:  should support multiple named <type=radio> groups
Has  Magic Number Test

======================================

Test:  should support initial undefined value
Has  Magic Number Test

======================================

Test:  should support resetting properly
Has  Magic Number Test

======================================

Test:  should support setting value to null and undefined
Has  Magic Number Test

======================================

Test:  should disable radio controls properly with programmatic call
Has  Magic Number Test

======================================

Test:  with basic use case
Has  Magic Number Test

======================================

Test:  when value is cleared in the UI
Has  Magic Number Test

======================================

Test:  with basic use case
Has  Magic Number Test

======================================

Test:  should support standard writing to view and model
Has  Exception Handling

======================================

Test:  should run change detection and update the value
Has  Magic Number Test

======================================

Test:  should fix error when property does not exist on type
Has  Unknown Test

======================================

Test:  should fix a missing method when property does not exist on type
Has  Unknown Test

======================================

Test:  should not show fix all errors when there is only one diagnostic in the template but has two or more diagnostics in TCB
Has  Unknown Test

======================================

Test:  should fix all errors when property does not exist on type
Has  Unknown Test

======================================

Test:  should fix invalid banana-in-box error
Has  Unknown Test

======================================

Test:  should fix all invalid banana-in-box errors
Has  Unknown Test

======================================

Test:  for a new standalone component import
Has  Unknown Test

======================================

Test:  for a new NgModule-based component import
Has  Unknown Test

======================================

Test:  for an import of a component onto an ngModule
Has  Unknown Test

======================================

Test:  for a new standalone pipe import
Has  Unknown Test

======================================

Test:  for a transitive NgModule-based reexport
Has  Unknown Test

======================================

Test:  for a default exported component
Has  Unknown Test

======================================

Test:  for a default exported component and reuse the existing import declarations
Has  Unknown Test

======================================

Test:  for a default exported component and reuse the existing imported component name
Has  Unknown Test

======================================

Test:  should react to a change in an external template
Has  Magic Number Test

======================================

Test:  should handle broken imports during incremental build steps
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  detects source file change in between typecheck programs
Has  Magic Number Test

======================================

Test:  should be able to complete an interpolation
Has  Unknown Test

======================================

Test:  should be able to complete an empty interpolation
Has  Unknown Test

======================================

Test:  should be able to complete a property binding
Has  Unknown Test

======================================

Test:  should be able to complete an empty property binding
Has  Unknown Test

======================================

Test:  should return reference completions when available
Has  Unknown Test

======================================

Test:  should return variable completions when available
Has  Unknown Test

======================================

Test:  should return completions inside an event binding
Has  Unknown Test

======================================

Test:  should return completions inside an empty event binding
Has  Unknown Test

======================================

Test:  should return completions inside the RHS of a two-way binding
Has  Unknown Test

======================================

Test:  should not include the trailing quote inside the RHS of a two-way binding
Has  Unknown Test

======================================

Test:  should return completions inside an empty RHS of a two-way binding
Has  Unknown Test

======================================

Test:  should return completions of string literals, number literals, `true`, `false`, `null` and `undefined`
Has  Unknown Test

======================================

Test:  should return completions of string literals, number literals, `true`, `false`, `null` and `undefined` when the user tries to modify the symbol
Has  Unknown Test

======================================

Test:  should return property access completions
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should complete a string union types in binding without brackets
Has  Unknown Test

======================================

Test:  should return event completion
Has  Unknown Test

======================================

Test:  should return property access completions
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should return event completion
Has  Unknown Test

======================================

Test:  should return property access completions
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should return completions for both properties and events
Has  Unknown Test

======================================

Test:  should return property access completions in the property side of the binding
Has  Unknown Test

======================================

Test:  should return property access completions in the event side of the binding
Has  Unknown Test

======================================

Test:  should return property access completions in a two-way binding
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  inside if
Has  Unknown Test

======================================

Test:  inside switch
Has  Unknown Test

======================================

Test:  should return completions in a property access expression
Has  Unknown Test

======================================

Test:  should return completions in an empty property access expression
Has  Unknown Test

======================================

Test:  should return completions in a property write expression
Has  Unknown Test

======================================

Test:  should return completions in a method call expression
Has  Unknown Test

======================================

Test:  should return completions in an empty method call expression
Has  Unknown Test

======================================

Test:  should return completions in a safe property navigation context
Has  Unknown Test

======================================

Test:  should return completions in an empty safe property navigation context
Has  Unknown Test

======================================

Test:  should return completions in a safe method call context
Has  Unknown Test

======================================

Test:  should not return DOM completions for external template
Has  Unknown Test

======================================

Test:  should not return DOM completions for inline template
Has  Unknown Test

======================================

Test:  should return component completions not imported
Has  Magic Number Test

======================================

Test:  should return completions for an incomplete tag
Has  Unknown Test

======================================

Test:  should return completions with a blank open tag
Has  Unknown Test

======================================

Test:  should return completions with a blank open tag a character before
Has  Unknown Test

======================================

Test:  should return dom property completions in external template
Has  Unknown Test

======================================

Test:  should return completions for a new element property
Has  Unknown Test

======================================

Test:  should return event completion
Has  Unknown Test

======================================

Test:  should return event completion with empty parens
Has  Unknown Test

======================================

Test:  should return completions for a partial attribute
Has  Unknown Test

======================================

Test:  should return completions for a partial property binding
Has  Unknown Test

======================================

Test:  should return completions inside an event binding
Has  Unknown Test

======================================

Test:  should return directive input completions for a new attribute
Has  Unknown Test

======================================

Test:  should return directive input completions for a partial attribute
Has  Unknown Test

======================================

Test:  should return input completions for a partial property binding
Has  Unknown Test

======================================

Test:  should return completion for input coming from a host directive
Has  Unknown Test

======================================

Test:  should not return completion for hidden host directive input
Has  Unknown Test

======================================

Test:  should return completion for aliased host directive input
Has  Unknown Test

======================================

Test:  should return completion for aliased host directive input that has a different public name
Has  Unknown Test

======================================

Test:  should return structural directive completions for an empty attribute
Has  Unknown Test

======================================

Test:  should return structural directive completions for an existing non-structural attribute
Has  Unknown Test

======================================

Test:  should return structural directive completions for just the structural marker
Has  Unknown Test

======================================

Test:  should return input completions for a new attribute
Has  Unknown Test

======================================

Test:  should return animation names for the property binding
Has  Unknown Test

======================================

Test:  should return animation names when the property binding animation name is empty
Has  Unknown Test

======================================

Test:  should return the special animation control binding called @.disabled 
Has  Unknown Test

======================================

Test:  should return animation names for the event binding
Has  Unknown Test

======================================

Test:  should return animation names when the event binding animation name is empty
Has  Unknown Test

======================================

Test:  should return the animation phase for the event binding
Has  Unknown Test

======================================

Test:  should return the animation phase when the event binding animation phase is empty
Has  Unknown Test

======================================

Test:  should return input completions for a partial attribute
Has  Unknown Test

======================================

Test:  should return input completions for a partial property binding
Has  Unknown Test

======================================

Test:  should return output completions for an empty binding
Has  Unknown Test

======================================

Test:  should return output completions for a partial event binding
Has  Unknown Test

======================================

Test:  should return completions inside an LHS of a partially complete two-way binding
Has  Unknown Test

======================================

Test:  should return input completions for a binding property name
Has  Unknown Test

======================================

Test:  should return output completions for a binding property name
Has  Unknown Test

======================================

Test:  should return completion for output coming from a host directive
Has  Unknown Test

======================================

Test:  should not return completion for hidden host directive output
Has  Unknown Test

======================================

Test:  should return completion for aliased host directive output that has a different public name
Has  Unknown Test

======================================

Test:  should complete a pipe binding
Has  Unknown Test

======================================

Test:  should complete an empty pipe binding
Has  Unknown Test

======================================

Test:  should not return extraneous completions
Has  Magic Number Test

======================================

Test:  should complete a string union types in square brackets binding
Has  Unknown Test

======================================

Test:  should complete a string union types in binding without brackets
Has  Unknown Test

======================================

Test:  should complete a string union types in binding without brackets when the cursor at the start of the string
Has  Unknown Test

======================================

Test:  should complete a string union types in pipe
Has  Unknown Test

======================================

Test:  should complete a number union types
Has  Unknown Test

======================================

Test:  should be able to complete on nullable symbol
Has  Unknown Test

======================================

Test:  should be able to complete on NonNullable symbol
Has  Unknown Test

======================================

Test:  should not shift the start location when the user has input the optional chaining
Has  Unknown Test

======================================

Test:  should be able to complete for an empty attribute
Has  Unknown Test

======================================

Test:  should be able to complete for a partial attribute
Has  Unknown Test

======================================

Test:  should be able to complete for the event binding with the value is empty
Has  Unknown Test

======================================

Test:  should be able to complete for the event binding
Has  Unknown Test

======================================

Test:  should be able to complete for the dom event binding
Has  Unknown Test

======================================

Test:  should be able to complete for the property binding with the value is empty
Has  Unknown Test

======================================

Test:  should be able to complete for the property binding
Has  Unknown Test

======================================

Test:  should be able to complete for the dom property binding
Has  Unknown Test

======================================

Test:  should be able to complete for the two way binding with the value is empty
Has  Unknown Test

======================================

Test:  should be able to complete for the two way binding via
Has  Unknown Test

======================================

Test:  should be able to complete for the structural directive with the value is empty
Has  Magic Number Test

======================================

Test:  should be able to complete for the structural directive
Has  Unknown Test

======================================

Test:  should not be included in the completion for an attribute with a value
Has  Unknown Test

======================================

Test:  should not be included in the completion for a directive attribute without input
Has  Unknown Test

======================================

Test:  should complete a let declaration
Has  Unknown Test

======================================

Test:  should complete an empty let declaration with a terminating character
Has  Unknown Test

======================================

Test:  should complete a single let declaration without a terminating character
Has  Unknown Test

======================================

Test:  should complete a let declaration property in the global scope
Has  Unknown Test

======================================

Test:  should complete a shadowed let declaration property
Has  Unknown Test

======================================

Test:  gets definition for template reference in overridden template
Has  Magic Number Test

======================================

Test:  returns the pipe definitions when checkTypeOfPipes is false
Has  Magic Number Test

======================================

Test:  gets definitions for all inputs when attribute matches more than one
Has  Magic Number Test

======================================

Test:  gets definitions for all signal-inputs when attribute matches more than one
Has  Magic Number Test

======================================

Test:  gets definitions for all outputs when attribute matches more than one
Has  Magic Number Test

======================================

Test:  gets definitions for all model inputs when attribute matches more than one in a static attribute
Has  Magic Number Test

======================================

Test:  gets definitions for all model inputs when attribute matches more than one in a two-way binding
Has  Magic Number Test

======================================

Test:  should go to the pre-compiled style sheet
Has  Magic Number Test

======================================

Test:  gets definition for property of variable declared in template
Has  Magic Number Test

======================================

Test:  gets definition for a let declaration
Has  Magic Number Test

======================================

Test:  can get definitions for input
Has  Magic Number Test

======================================

Test:  can get definitions for component
Has  Magic Number Test

======================================

Test:  can get definitions
Has  Magic Number Test

======================================

Test:  should not produce error for a minimal component definition
Has  Magic Number Test

======================================

Test:  should report member does not exist
Has  Magic Number Test

======================================

Test:  should report diagnostics in inline templates
Has  Magic Number Test

======================================

Test:  should report member does not exist in external template
Has  Magic Number Test

======================================

Test:  should report a parse error in external template
Has  Magic Number Test

======================================

Test:  reports html parse errors along with typecheck errors as diagnostics
Has  Magic Number Test

======================================

Test:  should report parse errors of components defined in the same ts file
Has  Magic Number Test

======================================

Test:  reports a warning when the project configuration prevents good type inference
Has  Magic Number Test

======================================

Test:  should process a component that would otherwise require an inline TCB
Has  Magic Number Test

======================================

Test:  should exclude unused pipes that would otherwise require an inline TCB
Has  Magic Number Test

======================================

Test:  logs perf tracing
Has  Magic Number Test

======================================

Test:  does not produce diagnostics when pre-compiled file is found
Has  Magic Number Test

======================================

Test:  produces missing resource diagnostic for missing css
Has  Magic Number Test

======================================

Test:  should produce invalid banana in box warning
Has  Magic Number Test

======================================

Test:  should not produce invalid banana in box warning without `strictTemplates`
Has  Magic Number Test

======================================

Test:  should produce invalid banana in box warning in external html file
Has  Magic Number Test

======================================

Test:  should not produce invalid banana in box warning in external html file without `strictTemplates`
Has  Magic Number Test

======================================

Test:  generates diagnostic when the library does not export the host directive
Has  Magic Number Test

======================================

Test:  should have outlining spans for all defer block parts
Has  Magic Number Test

======================================

Test:  should have outlining spans for all connected if blocks
Has  Magic Number Test

======================================

Test:  should have outlining spans for all switch cases, including the main
Has  Magic Number Test

======================================

Test:  should have outlining spans for repeater and empty block
Has  Magic Number Test

======================================

Test:  finds location of external template
Has  Unknown Test

======================================

Test:  finds correct location when there are multiple components in one file
Has  Unknown Test

======================================

Test:  should find the typecheck block for an inline template
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should find the typecheck block for an external template
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should work for native elements
Has  Magic Number Test

======================================

Test:  should work for directives
Has  Magic Number Test

======================================

Test:  should work for components
Has  Magic Number Test

======================================

Test:  should work for structural directives
Has  Magic Number Test

======================================

Test:  should return binding for structural directive where key maps to a binding
Has  Magic Number Test

======================================

Test:  should work for directives with compound selectors
Has  Magic Number Test

======================================

Test:  should work for input providers
Has  Magic Number Test

======================================

Test:  should work for text inputs
Has  Magic Number Test

======================================

Test:  should work for structural directive inputs ngForTrackBy
Has  Magic Number Test

======================================

Test:  should work for structural directive inputs ngForOf
Has  Magic Number Test

======================================

Test:  should work for two-way binding providers
Has  Magic Number Test

======================================

Test:  should work for event providers
Has  Magic Number Test

======================================

Test:  should return the directive when the event is part of the selector
Has  Magic Number Test

======================================

Test:  should work for $event from native element
Has  Magic Number Test

======================================

Test:  should work for element reference uses
Has  Magic Number Test

======================================

Test:  should work for array members
Has  Magic Number Test

======================================

Test:  should work for a @let declaration
Has  Magic Number Test

======================================

Test:  should work for pipes
Has  Magic Number Test

======================================

Test:  should find members in a text interpolation
Has  Magic Number Test

======================================

Test:  should work for accessed property reads
Has  Magic Number Test

======================================

Test:  should find members in an attribute interpolation
Has  Magic Number Test

======================================

Test:  should find members of input binding
Has  Magic Number Test

======================================

Test:  should find members of event binding
Has  Magic Number Test

======================================

Test:  should work for method calls
Has  Magic Number Test

======================================

Test:  should work for accessed properties in writes
Has  Magic Number Test

======================================

Test:  should work for method call arguments
Has  Magic Number Test

======================================

Test:  should find members of two-way binding
Has  Magic Number Test

======================================

Test:  should find members in a structural directive
Has  Magic Number Test

======================================

Test:  should work for variables in structural directives
Has  Magic Number Test

======================================

Test:  should work for uses of members in structural directives
Has  Magic Number Test

======================================

Test:  should work for members in structural directives
Has  Magic Number Test

======================================

Test:  should work for object literals with shorthand declarations in an action
Has  Magic Number Test

======================================

Test:  should work for object literals with shorthand declarations in a data binding
Has  Magic Number Test

======================================

Test:  should be able to find a template from a url
Has  Magic Number Test

======================================

Test:  should be able to find a stylesheet from a url
Has  Magic Number Test

======================================

Test:  should be able to find a stylesheet from a style url
Has  Magic Number Test

======================================

Test:  should retrieve external template from latest snapshot
Has  Magic Number Test

======================================

Test:  should be set after getSemanticDiagnostics()
Has  Magic Number Test

======================================

Test:  can load test project from Bazel runfiles
Has  Conditional Test Logic

======================================

Test:  will return the cursor position
Has  Magic Number Test

======================================

Test:  will return -1 if cursor is not present
Has  Magic Number Test

======================================

Test:  will return the cursor position
Has  Magic Number Test

======================================

Test:  will return -1 if cursor is not present
Has  Magic Number Test

======================================

Test:  should locate incomplete tag
Has  Magic Number Test

======================================

Test:  should locate binding pipe without identifier
Has  Magic Number Test

======================================

Test:  should locate binding pipe without identifier
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should locate a @let value
Has  Magic Number Test

======================================

Test:  should visit numeric on conditions on defer blocks
Has  Magic Number Test

======================================

Test:  should return all typecheck files
Has  Magic Number Test

======================================

Test:  should work for native elements
Has  Magic Number Test

======================================

Test:  should return directives which match the element tag
Has  Magic Number Test

======================================

Test:  should work for directives
Has  Magic Number Test

======================================

Test:  should work for components
Has  Magic Number Test

======================================

Test:  should work for structural directives
Has  Magic Number Test

======================================

Test:  should work for directives with compound selectors
Has  Magic Number Test

======================================

Test:  should return something for input providers with non-primitive types
Has  Magic Number Test

======================================

Test:  should work for structural directive inputs ngForTrackBy
Has  Magic Number Test

======================================

Test:  should work for structural directive inputs ngForOf
Has  Unknown Test

======================================

Test:  should work for event providers
Has  Magic Number Test

======================================

Test:  should return the directive when the event is part of the selector
Has  Magic Number Test

======================================

Test:  should work for native event outputs
Has  Magic Number Test

======================================

Test:  should work for element references
Has  Magic Number Test

======================================

Test:  should work for directive references
Has  Magic Number Test

======================================

Test:  should work for array members
Has  Magic Number Test

======================================

Test:  should work for a let declaration
Has  Magic Number Test

======================================

Test:  should work for pipes
Has  Magic Number Test

======================================

Test:  should return nothing for primitives
Has  Magic Number Test

======================================

Test:  should work for accessed property reads
Has  Magic Number Test

======================================

Test:  should work for $event
Has  Magic Number Test

======================================

Test:  should work for method calls
Has  Magic Number Test

======================================

Test:  should work for accessed properties in writes
Has  Magic Number Test

======================================

Test:  should work for variables in structural directives
Has  Unknown Test

======================================

Test:  should work for uses of members in structural directives
Has  Unknown Test

======================================

Test:  should work for members in structural directives
Has  Unknown Test

======================================

Test:  should work for native elements
Has  Unknown Test

======================================

Test:  should work for directives which match native element tags
Has  Unknown Test

======================================

Test:  should work for directives
Has  Unknown Test

======================================

Test:  should work for directives with compound selectors, some of which are bindings
Has  Unknown Test

======================================

Test:  should work for data-let- syntax
Has  Unknown Test

======================================

Test:  should work for input providers
Has  Unknown Test

======================================

Test:  should work for bind- syntax
Has  Unknown Test

======================================

Test:  should work for structural directive inputs ngForTrackBy
Has  Unknown Test

======================================

Test:  should work for structural directive inputs ngForOf
Has  Unknown Test

======================================

Test:  should work for two-way binding providers
Has  Unknown Test

======================================

Test:  should work for signal-based two-way binding providers
Has  Unknown Test

======================================

Test:  should work for event providers
Has  Unknown Test

======================================

Test:  should work for on- syntax binding
Has  Unknown Test

======================================

Test:  should work for $event from EventEmitter
Has  Unknown Test

======================================

Test:  should work for $event from native element
Has  Unknown Test

======================================

Test:  should work for directive references
Has  Unknown Test

======================================

Test:  should work for ref- syntax
Has  Unknown Test

======================================

Test:  should work for $event from native element
Has  Unknown Test

======================================

Test:  should work for click output from native element
Has  Unknown Test

======================================

Test:  should work for ReadonlyArray members (#36191)
Has  Unknown Test

======================================

Test:  should work for const array members (#36191)
Has  Unknown Test

======================================

Test:  should work for safe keyed reads
Has  Unknown Test

======================================

Test:  should work for pipes
Has  Unknown Test

======================================

Test:  should find members in a text interpolation
Has  Unknown Test

======================================

Test:  should work for accessed property reads
Has  Unknown Test

======================================

Test:  should find members in an attribute interpolation
Has  Unknown Test

======================================

Test:  should find members of input binding
Has  Unknown Test

======================================

Test:  should find input binding on text attribute
Has  Unknown Test

======================================

Test:  should find members of event binding
Has  Unknown Test

======================================

Test:  should work for method calls
Has  Unknown Test

======================================

Test:  should work for accessed properties in writes
Has  Unknown Test

======================================

Test:  should work for method call arguments
Has  Unknown Test

======================================

Test:  should find members of two-way binding
Has  Unknown Test

======================================

Test:  should find members in a structural directive
Has  Unknown Test

======================================

Test:  should work for members in structural directives
Has  Unknown Test

======================================

Test:  should work for the $any() cast function
Has  Unknown Test

======================================

Test:  defer
Has  Unknown Test

======================================

Test:  defer with condition
Has  Unknown Test

======================================

Test:  placeholder
Has  Unknown Test

======================================

Test:  loading
Has  Unknown Test

======================================

Test:  error
Has  Unknown Test

======================================

Test:  viewport
Has  Unknown Test

======================================

Test:  immediate
Has  Unknown Test

======================================

Test:  idle
Has  Unknown Test

======================================

Test:  hover
Has  Unknown Test

======================================

Test:  timer
Has  Unknown Test

======================================

Test:  interaction
Has  Unknown Test

======================================

Test:  when
Has  Unknown Test

======================================

Test:  prefetch (when)
Has  Unknown Test

======================================

Test:  on
Has  Unknown Test

======================================

Test:  prefetch (on)
Has  Unknown Test

======================================

Test:  empty
Has  Unknown Test

======================================

Test:  track keyword
Has  Unknown Test

======================================

Test:  implicit variable assignment
Has  Unknown Test

======================================

Test:  implicit variable assignment in comma separated list
Has  Unknown Test

======================================

Test:  if block alias variable
Has  Unknown Test

======================================

Test:  should get quick info for a let declaration
Has  Unknown Test

======================================

Test:  should get quick info for the generic input of a directive that normally requires inlining
Has  Unknown Test

======================================

Test:  should find input binding on text attribute when strictAttributeTypes is false
Has  Unknown Test

======================================

Test:  can still get quick info when strictOutputEventTypes is false
Has  Unknown Test

======================================

Test:  should work for pipes even if checkTypeOfPipes is false
Has  Unknown Test

======================================

Test:  should still get quick info if there is an invalid css resource
Has  Magic Number Test

======================================

Test:  gets component member references from TS file and external template
Has  Magic Number Test

======================================

Test:  gets rename locations from TS file and external template
Has  Magic Number Test

======================================

Test:  gets references
Has  Magic Number Test

======================================

Test:  gets rename locations
Has  Magic Number Test

======================================

Test:  gets component member reference in ts file
Has  Magic Number Test

======================================

Test:  gets rename location in ts file
Has  Magic Number Test

======================================

Test:  gets member reference in ts file
Has  Magic Number Test

======================================

Test:  finds rename location in ts file
Has  Magic Number Test

======================================

Test:  find references
Has  Magic Number Test

======================================

Test:  gets member reference in ts file
Has  Magic Number Test

======================================

Test:  gets rename location in ts file
Has  Magic Number Test

======================================

Test:  get reference to member in ts file
Has  Magic Number Test

======================================

Test:  finds rename location in ts file
Has  Magic Number Test

======================================

Test:  gets reference to member type definition and initialization in component class
Has  Magic Number Test

======================================

Test:  get references in ts file
Has  Magic Number Test

======================================

Test:  finds rename location in ts file
Has  Magic Number Test

======================================

Test:  get reference to declaration in template
Has  Magic Number Test

======================================

Test:  finds rename location in template
Has  Magic Number Test

======================================

Test:  gets reference to declaration
Has  Magic Number Test

======================================

Test:  finds rename location in template
Has  Magic Number Test

======================================

Test:  should get references
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should get references
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should get references
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should get references
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should find references
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should find references
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should find references
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should find references
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should find references
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should find references
Has  Unknown Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  finds rename locations and rename info
Has  Magic Number Test

======================================

Test:  finds rename locations in base class
Has  Magic Number Test

======================================

Test:  should find references
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should find references
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should find references
Has  Magic Number Test

======================================

Test:  should work for text attributes
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should work from the TS input declaration
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should find references
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should find references
Has  Magic Number Test

======================================

Test:  should find references
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should find references
Has  Magic Number Test

======================================

Test:  should find references
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should find references
Has  Magic Number Test

======================================

Test:  should find rename locations
Has  Magic Number Test

======================================

Test:  should get references to both input and output for two-way binding
Has  Magic Number Test

======================================

Test:  should get references to model() input binding
Has  Magic Number Test

======================================

Test:  should find references
Has  Magic Number Test

======================================

Test:  gets references to all matching directives
Has  Magic Number Test

======================================

Test:  should be able to request references
Has  Magic Number Test

======================================

Test:  finds references
Has  Magic Number Test

======================================

Test:  gets references
Has  Magic Number Test

======================================

Test:  can find references and rename alias variable from @if block
Has  Magic Number Test

======================================

Test:  should handle an empty argument list
Has  Magic Number Test

======================================

Test:  should handle a single argument
Has  Magic Number Test

======================================

Test:  should handle a position within the first of two arguments
Has  Magic Number Test

======================================

Test:  should handle a position within the second of two arguments
Has  Magic Number Test

======================================

Test:  should handle a position within a new, EmptyExpr argument
Has  Magic Number Test

======================================

Test:  returns the pipe class as definition when checkTypeOfPipes is false
Has  Magic Number Test

======================================

Test:  return the definition for a signal input
Has  Magic Number Test

======================================

Test:  return the definition for an output
Has  Magic Number Test

======================================

Test:  return the definition for an output
Has  Magic Number Test

======================================

Test:  should return the definition for the property side of a two-way binding
Has  Magic Number Test

======================================

Test:  should return the definition for the event side of a two-way binding
Has  Magic Number Test

======================================

Test:  should return the definition of a two-way binding
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should render template literals as-is
Has  Magic Number Test

======================================

Test:  should strip placeholder names from message parts
Has  Magic Number Test

======================================

Test:  should ignore escaped placeholder name marker
Has  Magic Number Test

======================================

Test:  should render template literals as-is
Has  Magic Number Test

======================================

Test:  should render template literals with messages upper-cased
Has  Magic Number Test

======================================

Test:  should render template literals with expressions reversed
Has  Magic Number Test

======================================

Test:  should build a map of named placeholders to expressions
Has  Magic Number Test

======================================

Test:  should build a map of implied placeholders to expressions
Has  Magic Number Test

======================================

Test:  should return index of the end of block marker
Has  Magic Number Test

======================================

Test:  should throw an error if the translation contains placeholders that are not in the message
Has  Magic Number Test

======================================

Test:  (with identity translations) should render template literals as-is
Has  Magic Number Test

======================================

Test:  (with upper-casing translations) should render template literals with messages upper-cased
Has  Magic Number Test

======================================

Test:  (with translations to reverse expressions) should render template literals with expressions reversed
Has  Magic Number Test

======================================

Test:  (with translations to remove expressions) should render template literals with expressions removed
Has  Magic Number Test

======================================

Test:  should render template literals as-is
Has  Magic Number Test

======================================

Test:  should render template literals with messages upper-cased
Has  Magic Number Test

======================================

Test:  should render template literals with expressions reversed
Has  Magic Number Test

======================================

Test:  should render template literals with expressions removed
Has  Magic Number Test

======================================

Test:  should extract a message for each $localize template tag
Has  Magic Number Test

======================================

Test:  should extract translations from source code, and write as xmb format
Has  Conditional Test Logic

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  should extract translations from source code, and write as XLIFF 2 format
Has  Conditional Test Logic

======================================

Test:  should convert a set of parsed messages into an XML string
Has  Conditional Test Logic

======================================

Test:  should convert a set of parsed messages into an XML string
Has  Conditional Test Logic

======================================

Test:  should convert a set of parsed messages into an XML string
Has  Conditional Test Logic

======================================

Test:  should convert a set of parsed messages into an XML string
Has  Conditional Test Logic

======================================

Test:  should convert a set of parsed messages into an XML string
Has  Conditional Test Logic

======================================

Test:  should return an array of string literals and locations from a direct call to a tag function
Has  Magic Number Test

======================================

Test:  should return an array of string literals and locations from a downleveled tagged template
Has  Magic Number Test

======================================

Test:  should return an array of string literals and locations from a (Babel helper) downleveled tagged template
Has  Magic Number Test

======================================

Test:  should return an array of string literals and locations from a memoized downleveled tagged template
Has  Magic Number Test

======================================

Test:  should return an array of string literals and locations from a memoized (inlined Babel helper) downleveled tagged template
Has  Magic Number Test

======================================

Test:  should return an array of string literals and locations from a lazy load template helper
Has  Magic Number Test

======================================

Test:  should remove a lazy load template helper
Has  Magic Number Test

======================================

Test:  should return the substitutions and locations from a direct call to a tag function
Has  Magic Number Test

======================================

Test:  should return the substitutions and locations from a downleveled tagged template
Has  Magic Number Test

======================================

Test:  should return a TemplateStringsArray built from the template literal elements
Has  Magic Number Test

======================================

Test:  should return an array of string from an array expression
Has  Magic Number Test

======================================

Test:  should return a plain object containing the start, end and file of a NodePath
Has  Magic Number Test

======================================

Test:  should copy non-code files to the destination folders
Has  Magic Number Test

======================================

Test:  should translate and copy source-code files to the destination folders
Has  Magic Number Test

======================================

Test:  should translate and copy source-code files overriding the locales
Has  Magic Number Test

======================================

Test:  should merge translation files, if more than one provided, and translate source-code
Has  Magic Number Test

======================================

Test:  should transform and/or copy files to the destination folders
Has  Magic Number Test

======================================

Test:  should add missing translation to diagnostic errors if missingTranslation is set to "error"
Has  Magic Number Test

======================================

Test:  should add missing translation to diagnostic errors if missingTranslation is set to "warning"
Has  Magic Number Test

======================================

Test:  should add diagnostic error with code-frame information if the arguments to `$localize` are missing
Has  Magic Number Test

======================================

Test:  should add diagnostic error with code-frame information if the arguments to `$localize` are invalid
Has  Magic Number Test

======================================

Test:  should add diagnostic error with code-frame information if the first argument to `$localize` is not an array
Has  Magic Number Test

======================================

Test:  should add diagnostic error with code-frame information if raw message parts are not an expression
Has  Magic Number Test

======================================

Test:  should add diagnostic error with code-frame information if cooked message parts are not an expression
Has  Magic Number Test

======================================

Test:  should add diagnostic error with code-frame information if not all cooked message parts are strings
Has  Magic Number Test

======================================

Test:  should add diagnostic error with code-frame information if not all raw message parts are strings
Has  Magic Number Test

======================================

Test:  should add diagnostic error with code-frame information if not all substitutions are expressions
Has  Magic Number Test

======================================

Test:  should add missing translation to diagnostic errors if missingTranslation is set to "error"
Has  Magic Number Test

======================================

Test:  should add missing translation to diagnostic warnings if missingTranslation is set to "warning"
Has  Magic Number Test

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  should warn if the provided locales do not match the parsed locales
Has  Magic Number Test

======================================

Test:  should warn when a trans-unit has no translation target but does have a source
Has  Magic Number Test

======================================

Test:  should fail when a trans-unit has no translation target nor source
Has  Unknown Test

======================================

Test:  should fail when a trans-unit has no id attribute
Has  Unknown Test

======================================

Test:  should fail on duplicate trans-unit id
Has  Unknown Test

======================================

Test:  should fail on unknown message tags
Has  Unknown Test

======================================

Test:  should fail when a placeholder misses an id attribute
Has  Unknown Test

======================================

Test:  should provide a diagnostic warning when a trans-unit has no translation target but does have a source
Has  Magic Number Test

======================================

Test:  should provide a diagnostic error when a trans-unit has no translation target nor source
Has  Unknown Test

======================================

Test:  should provide a diagnostic error when a trans-unit has no id attribute
Has  Unknown Test

======================================

Test:  should provide a diagnostic error on duplicate trans-unit id
Has  Unknown Test

======================================

Test:  should provide a diagnostic error on unknown message tags
Has  Unknown Test

======================================

Test:  should provide a diagnostic error when a placeholder misses an id attribute
Has  Unknown Test

======================================

Test:  should throw when there are nested translationbundle tags
Has  Unknown Test

======================================

Test:  should throw when a translation has no id attribute
Has  Unknown Test

======================================

Test:  should throw on duplicate translation id
Has  Unknown Test

======================================

Test:  should throw on unknown message tags
Has  Unknown Test

======================================

Test:  should throw when a placeholder misses a name attribute
Has  Unknown Test

======================================

Test:  can get heroes
Has  Magic Number Test

======================================

Test:  GET should be a "cold" observable
Has  Magic Number Test

======================================

Test:  GET should wait until after delay to respond
Has  Magic Number Test

======================================

Test:  Should only initialize the db once
Has  Magic Number Test

======================================

Test:  can get heroes (w/ a different base path)
Has  Magic Number Test

======================================

Test:  should 404 when GET unknown collection (after delay)
Has  Magic Number Test

======================================

Test:  should return 1-item array for GET app/heroes/?id=1
Has  Magic Number Test

======================================

Test:  should return 1-item array for GET app/heroes?id=1
Has  Magic Number Test

======================================

Test:  should return undefined for GET app/heroes?id=not-found-id
Has  Magic Number Test

======================================

Test:  should return 404 for GET app/heroes/not-found-id
Has  Magic Number Test

======================================

Test:  can get nobodies (empty collection)
Has  Magic Number Test

======================================

Test:  can add a nobody with an id to empty nobodies collection
Has  Magic Number Test

======================================

Test:  should fail when add a nobody without an id to empty nobodies collection
Has  Magic Number Test

======================================

Test:  to empty (object db)
Has  EmptyTest
Has  Unknown Test

======================================

Test:  to empty (observable db)
Has  EmptyTest
Has  Unknown Test

======================================

Test:  to empty (promise db)
Has  EmptyTest
Has  Unknown Test

======================================

Test:  can get heroes
Has  Magic Number Test

======================================

Test:  can translate `foo/heroes` to `heroes` via `parsedRequestUrl` override
Has  Magic Number Test

======================================

Test:  can get villains
Has  Magic Number Test

======================================

Test:  should 404 when POST to villains
Has  Magic Number Test

======================================

Test:  should 404 when GET unknown collection
Has  Magic Number Test

======================================

Test:  should use genId override to add new hero, "Maxinius"
Has  Magic Number Test

======================================

Test:  should use genId override guid generator for a new nobody without an id
Has  Magic Number Test

======================================

Test:  to empty (object db)
Has  EmptyTest
Has  Unknown Test

======================================

Test:  to empty (observable db)
Has  EmptyTest
Has  Unknown Test

======================================

Test:  to empty (promise db)
Has  EmptyTest
Has  Unknown Test

======================================

Test:  can get heroes
Has  Magic Number Test

======================================

Test:  can get hero w/ id=1
Has  Magic Number Test

======================================

Test:  should 404 when hero id not found
Has  Magic Number Test

======================================

Test:  can add a hero
Has  Magic Number Test

======================================

Test:  can search for heroes by name containing "a"
Has  Magic Number Test

======================================

Test:  can update existing hero
Has  Magic Number Test

======================================

Test:  should have GET request header from test interceptor
Has  Magic Number Test

======================================

Test:  should have GET response header from test interceptor
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  can get heroes (no passthru)
Has  Magic Number Test

======================================

Test:  can GET passthru
Has  Magic Number Test

======================================

Test:  can ADD to passthru
Has  Magic Number Test

======================================

Test:  can get heroes (encapsulated)
Has  Magic Number Test

======================================

Test:  empty test so jasmine doesnt complain
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should support nested animation triggers
Has  Magic Number Test

======================================

Test:  should resolve the body|document|window nodes given their values as strings as input
Has  Magic Number Test

======================================

Test:  should store animations events passed to the default renderer and register them against the animation renderer
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should store animations properties set on the default renderer and set them also on the animation renderer
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should only create a trigger definition once even if the registered multiple times
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should flush and fire callbacks when the zone becomes stable
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should properly insert/remove nodes through the animation renderer that do not contain animations
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should only queue up dom removals if the element itself contains a valid leave animation
Has  Magic Number Test

======================================

Test:  should support nested animation triggers
Has  Magic Number Test

======================================

Test:  should resolve the body|document|window nodes given their values as strings as input
Has  Magic Number Test

======================================

Test:  should only create a trigger definition once even if the registered multiple times
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should flush and fire callbacks when the zone becomes stable
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should properly insert/remove nodes through the animation renderer that do not contain animations
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should only queue up dom removals if the element itself contains a valid leave animation
Has  Magic Number Test

======================================

Test:  should clear bootstrapped component contents when the `BrowserAnimationsModule` is imported
Has  Magic Number Test

======================================

Test:  should clear bootstrapped component contents when the animation engine is requested during initialization
Has  Magic Number Test

======================================

Test:  should clear standalone bootstrapped component contents when the animation engine is requested during initialization
Has  Magic Number Test

======================================

Test:  should clear bootstrapped component contents when async animations are used
Has  Magic Number Test

======================================

Test:  should flush and fire callbacks when the zone becomes stable
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should handle leave animation callbacks even if the element is destroyed in the process
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should keep change detection isolated for separately bootstrapped apps
Has  Magic Number Test

======================================

Test:  should allow bootstrapping multiple standalone components within the same app
Has  Magic Number Test

======================================

Test:  should allow bootstrapping non-standalone components within the same app
Has  Magic Number Test

======================================

Test:  should throw when trying to bootstrap a non-standalone component
Has  Exception Handling

======================================

Test:  should throw when trying to bootstrap a standalone directive
Has  Exception Handling

======================================

Test:  should throw when trying to bootstrap a non-annotated class
Has  Exception Handling

======================================

Test:  should reject the bootstrapApplication promise if an imported module throws
Has  Exception Handling
Has  Unknown Test

======================================

Test:  should enable animations when using provideAnimations()
Has  Magic Number Test

======================================

Test:  should use noop animations renderer when using provideNoopAnimations()
Has  Magic Number Test

======================================

Test:  should throw if bootstrapped Directive is not a Component
Has  Exception Handling

======================================

Test:  should throw if no element is found
Has  Exception Handling

======================================

Test:  should throw if no provider
Has  Unknown Test

======================================

Test:  should forward the error to promise when bootstrap fails
Has  Exception Handling

======================================

Test:  should invoke the default exception handler when bootstrap fails
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should set platform name to browser
Has  Exception Handling

======================================

Test:  should display hello world
Has  Exception Handling

======================================

Test:  should throw a descriptive error if BrowserModule is installed again via a lazily loaded module
Has  Exception Handling

======================================

Test:  should support multiple calls to bootstrap
Has  Exception Handling

======================================

Test:  should not crash if change detection is invoked when the root component is disposed
Has  Exception Handling

======================================

Test:  should unregister change detectors when components are disposed
Has  Exception Handling

======================================

Test:  should make the provided bindings available to the application component
Has  Exception Handling

======================================

Test:  should not override locale provided during bootstrap
Has  Exception Handling

======================================

Test:  should avoid cyclic dependencies when root component requires Lifecycle through DI
Has  Exception Handling

======================================

Test:  should run platform initializers
Has  Exception Handling

======================================

Test:  should allow provideZoneChangeDetection in bootstrapModule
Has  Unknown Test

======================================

Test:  should allow to pass schemas
Has  Exception Handling

======================================

Test:  should be triggered for all bootstrapped components in case change happens in one of them
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should work in isolation for each component bootstrapped individually
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should create a standalone injector for standalone components with ambient providers
Has  Exception Handling

======================================

Test:  should throw if `BrowserModule` is imported in the standalone bootstrap scenario
Has  Exception Handling

======================================

Test:  should throw if `BrowserModule` is imported indirectly in the standalone bootstrap scenario
Has  Exception Handling

======================================

Test:  should return all meta tags matching selector
Has  Magic Number Test

======================================

Test:  should not add meta tag if it is already present on the page and has the same attr
Has  Magic Number Test

======================================

Test:  should not add meta tag if it is already present on the page, even if the first tag with the same name has different other attributes
Has  Magic Number Test

======================================

Test:  should add meta tag if it is already present on the page and but has different attr
Has  Magic Number Test

======================================

Test:  should add meta tag if it is already present on the page and force true
Has  Magic Number Test

======================================

Test:  should inject Meta service when using BrowserModule
Has  EmptyTest

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should time change detection
Has  Unknown Test

======================================

Test:  should time change detection with recording
Has  Unknown Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  xmlns
Has  EmptyTest
Has  Unknown Test

======================================

Test:  xml
Has  EmptyTest
Has  Unknown Test

======================================

Test:  svg
Has  EmptyTest
Has  Unknown Test

======================================

Test:  xhtml
Has  EmptyTest
Has  Unknown Test

======================================

Test:  xlink
Has  EmptyTest
Has  Unknown Test

======================================

Test:  xmlns
Has  EmptyTest
Has  Unknown Test

======================================

Test:  xml
Has  EmptyTest
Has  Unknown Test

======================================

Test:  svg
Has  EmptyTest
Has  Unknown Test

======================================

Test:  xhtml
Has  EmptyTest
Has  Unknown Test

======================================

Test:  xlink
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should not error when removing a child without passing a parent
Has  Unknown Test

======================================

Test:  works for components without encapsulation emulated
Has  Magic Number Test

======================================

Test:  works for components without encapsulation none
Has  Magic Number Test

======================================

Test:  works for components without encapsulation emulated
Has  Magic Number Test

======================================

Test:  works for components without encapsulation none
Has  Magic Number Test

======================================

Test:  should create MathML elements
Has  Conditional Test Logic

======================================

Test:  should run unpatchedEvents handler outside of ngZone
Has  Magic Number Test

======================================

Test:  should only trigger one Change detection when bubbling with shouldCoalesceEventChangeDetection = true
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should only trigger one Change detection when bubbling with shouldCoalesceRunChangeDetection = true
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not drain micro tasks queue too early with shouldCoalesceEventChangeDetection=true
Has  Conditional Test Logic

======================================

Test:  should not drain micro tasks queue too early with shouldCoalesceRunChangeDetection=true
Has  Conditional Test Logic

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should call the loader provider only once
Has  Magic Number Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should allow the usage of <slot> elements
Has  Magic Number Test

======================================

Test:  should allow the usage of named <slot> elements
Has  Magic Number Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  undefined
Has  Unknown Test

======================================

Test:  should run normal tests
Has  Unknown Test

======================================

Test:  should run normal async tests
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should run async tests with tasks
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should run async tests with promises
Has  Exception Handling
Has  Unknown Test

======================================

Test:  should pass context to inject helper
Has  Unknown Test

======================================

Test:  should pass context to fakeAsync helper
Has  Unknown Test

======================================

Test:  should pass context to withModule helper - simple
Has  Unknown Test

======================================

Test:  should preserve context when async and inject helpers are combined
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should preserve context when fakeAsync and inject helpers are combined
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should wait until returned promises
Has  Exception Handling

======================================

Test:  should allow the use of fakeAsync
Has  Exception Handling

======================================

Test:  should allow use of "done"
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  should use set up directives and pipes
Has  Magic Number Test

======================================

Test:  should use set up directives and pipes
Has  Magic Number Test

======================================

Test:  should always pass to satisfy jasmine always wanting an `it` block under a `describe`
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should work
Has  Magic Number Test

======================================

Test:  should support SkipSelf
Has  Magic Number Test

======================================

Test:  should support multiple providers in a template
Has  Magic Number Test

======================================

Test:  should fail when an asynchronous error is thrown
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  throws an async error
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should fail when a returned promise is rejected
Has  Exception Handling

======================================

Test:  should fail with an error from a promise
Has  Exception Handling

======================================

Test:  should error on unknown bound properties on custom elements by default
Has  Magic Number Test

======================================

Test:  should resolve the Promise with the file content on success
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should reject the Promise on failure
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should run async tests with ResourceLoaders
Has  Exception Handling
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should allow the use of fakeAsync
Has  Exception Handling

======================================

Test:  should propagate events
Has  Magic Number Test

======================================

Test:  should not propagate events if stopPropagation is called
Has  Magic Number Test

======================================

Test:  should support *ngFor on <ng-container> nodes
Has  Magic Number Test

======================================

Test:  should support *ngFor on element nodes
Has  Magic Number Test

======================================

Test:  should support *ngFor on host component nodes
Has  Magic Number Test

======================================

Test:  should support compact serialization for *ngFor
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should support disjoint nodes
Has  Magic Number Test

======================================

Test:  should support translations that include additional elements
Has  Magic Number Test

======================================

Test:  should hydrate ICUs (simple)
Has  Magic Number Test

======================================

Test:  should hydrate when using the *ngFor directive
Has  Magic Number Test

======================================

Test:  should hydrate when using @for control flow
Has  Magic Number Test

======================================

Test:  should not reference IntersectionObserver on the server
Has  Magic Number Test

======================================

Test:  undefined
Has  Exception Handling

======================================

Test:  undefined
Has  Exception Handling

======================================

Test:  should reconcile *ngFor-generated views
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should trigger change detection after cleanup (immediate)
Has  Magic Number Test

======================================

Test:  should trigger change detection after cleanup (deferred)
Has  Magic Number Test

======================================

Test:  should project contents with *ngFor
Has  Magic Number Test

======================================

Test:  should support projecting contents outside of a current host element
Has  Conditional Test Logic

======================================

Test:  should handle projected containers inside other containers
Has  Magic Number Test

======================================

Test:  should throw an error when projecting DOM nodes via ViewContainerRef.createComponent API
Has  Exception Handling

======================================

Test:  should throw an error when projecting DOM nodes via createComponent function call
Has  Exception Handling

======================================

Test:  should support slots with fallback content
Has  Magic Number Test

======================================

Test:  should support mixed slots with and without fallback content
Has  Magic Number Test

======================================

Test:  should handle text node mismatch
Has  Exception Handling

======================================

Test:  should not crash when a node can not be found during hydration
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should handle element node mismatch
Has  Exception Handling

======================================

Test:  should handle <ng-container> node mismatch
Has  Exception Handling

======================================

Test:  undefined
Has  Exception Handling

======================================

Test:  should handle <ng-template> node mismatch
Has  Exception Handling

======================================

Test:  should handle node mismatches in nested components
Has  Exception Handling

======================================

Test:  should handle sibling count mismatch
Has  Exception Handling

======================================

Test:  should handle ViewContainerRef node mismatch
Has  Exception Handling

======================================

Test:  should handle a mismatch for a node that goes after a ViewContainerRef node
Has  Exception Handling

======================================

Test:  should handle a case when a node is not found (removed)
Has  Exception Handling

======================================

Test:  should handle a case when a node is not found (detached)
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should handle a case when a node is not found (invalid DOM)
Has  Exception Handling

======================================

Test:  should cleanup rendered case if none of the cases match on the client
Has  Conditional Test Logic

======================================

Test:  should hydrate for loop content
Has  Magic Number Test

======================================

Test:  undefined
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  undefined
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should handle different number of items rendered on the client and on the server
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should handle a reconciliation with swaps
Has  Magic Number Test

======================================

Test:  should handle multiple let declarations that depend on each other
Has  Magic Number Test

======================================

Test:  should handle a let declaration using a pipe that injects ChangeDetectorRef
Has  Magic Number Test

======================================

Test:  should handle let declarations referenced through multiple levels of views
Has  Magic Number Test

======================================

Test:  should allow multiple platform instances
Has  Exception Handling

======================================

Test:  adds styles with ng-app-id attribute
Has  Magic Number Test

======================================

Test:  allows subscription to the hash state
Has  Exception Handling

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  works with SVG elements
Has  Conditional Test Logic

======================================

Test:  works with animation
Has  Conditional Test Logic

======================================

Test:  should handle ViewEncapsulation.ShadowDom
Has  Conditional Test Logic

======================================

Test:  adds the `ng-server-context` attribute to host elements
Has  Conditional Test Logic

======================================

Test:  sanitizes the `serverContext` value
Has  Conditional Test Logic

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  uses `other` as the `serverContext` value when all symbols are removed after sanitization
Has  Conditional Test Logic

======================================

Test:  should handle false values on attributes
Has  Conditional Test Logic

======================================

Test:  should handle element property "name"
Has  Conditional Test Logic

======================================

Test:  should work with sanitizer to handle "innerHTML"
Has  Conditional Test Logic

======================================

Test:  should handle element property "hidden"
Has  Conditional Test Logic

======================================

Test:  should call render hook
Has  Conditional Test Logic

======================================

Test:  should call multiple render hooks
Has  Conditional Test Logic

======================================

Test:  should call async render hooks
Has  Conditional Test Logic

======================================

Test:  should call multiple async and sync render hooks
Has  Conditional Test Logic

======================================

Test:  undefined
Has  Conditional Test Logic

======================================

Test:  can make HttpClient requests
Has  Exception Handling

======================================

Test:  can use HttpInterceptor that injects HttpClient
Has  Exception Handling

======================================

Test:  adds transfer script tag when using renderModule
Has  Magic Number Test

======================================

Test:  adds transfer script tag when setting state during onSerialize
Has  Magic Number Test

======================================

Test:  should return the same url tree when no redirects
Has  Unknown Test

======================================

Test:  should add new segments when needed
Has  Unknown Test

======================================

Test:  should handle positional parameters
Has  Unknown Test

======================================

Test:  should pass matrix parameters
Has  Unknown Test

======================================

Test:  should handle preserve secondary routes
Has  Unknown Test

======================================

Test:  should redirect secondary routes
Has  Unknown Test

======================================

Test:  should use the configuration of the route redirected to
Has  Unknown Test

======================================

Test:  should support redirects with both main and aux
Has  Unknown Test

======================================

Test:  should support redirects with both main and aux (with a nested redirect)
Has  Unknown Test

======================================

Test:  should redirect wild cards
Has  Unknown Test

======================================

Test:  should support absolute redirects
Has  Unknown Test

======================================

Test:  should not create injector for Route if the route does not match
Has  Magic Number Test

======================================

Test:  should create injectors for partial Route route matches
Has  Magic Number Test

======================================

Test:  should support CanMatch providers on the route
Has  Magic Number Test

======================================

Test:  should load config on demand
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should load when all canLoad guards return true
Has  Unknown Test

======================================

Test:  should work with objects implementing the CanLoad interface
Has  Unknown Test

======================================

Test:  should pass UrlSegments to functions implementing the canLoad guard interface
Has  Magic Number Test

======================================

Test:  should pass UrlSegments to objects implementing the canLoad guard interface
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should work with absolute redirects
Has  Magic Number Test

======================================

Test:  should load the configuration only once
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should load the configuration of a wildcard route
Has  Magic Number Test

======================================

Test:  should not load the configuration of a wildcard route if there is a match
Has  Magic Number Test

======================================

Test:  should load the configuration after a local redirect from a wildcard route
Has  Magic Number Test

======================================

Test:  should load the configuration after an absolute redirect from a wildcard route
Has  Magic Number Test

======================================

Test:  should load all matching configurations of empty path, including an auxiliary outlets
Has  Magic Number Test

======================================

Test:  should not try to load any matching configuration if previous load completed
Has  Magic Number Test

======================================

Test:  loads only the first match when two Routes with the same outlet have the same path
Has  Magic Number Test

======================================

Test:  should load the configuration of empty root path if the entry is an aux outlet
Has  Conditional Test Logic

======================================

Test:  redirect from an empty path should work (local redirect)
Has  Unknown Test

======================================

Test:  redirect from an empty path should work (absolute redirect)
Has  Unknown Test

======================================

Test:  redirect from an empty path should work (nested case)
Has  Unknown Test

======================================

Test:  redirect to an empty path should work
Has  Unknown Test

======================================

Test:  should create a new url segment (non-terminal)
Has  Unknown Test

======================================

Test:  should create a new url segment (terminal)
Has  Unknown Test

======================================

Test:  should work with non-empty auxiliary path
Has  Unknown Test

======================================

Test:  should work with empty auxiliary path
Has  Unknown Test

======================================

Test:  should create a new child (non-terminal)
Has  Unknown Test

======================================

Test:  should create a new child (terminal)
Has  Unknown Test

======================================

Test:  should work only only primary outlet
Has  Unknown Test

======================================

Test:  should create a new child (non-terminal)
Has  Unknown Test

======================================

Test:  should not error when no children matching and no url is left
Has  Unknown Test

======================================

Test:  should not error when no children matching and no url is left (aux routes)
Has  Unknown Test

======================================

Test:  should use custom path matcher
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  should work when using absolute redirects
Has  Unknown Test

======================================

Test:  should work when using absolute redirects (wildcard)
Has  Unknown Test

======================================

Test:  with a simple function returning a string
Has  Unknown Test

======================================

Test:  with a simple function returning a UrlTree
Has  Unknown Test

======================================

Test:  with a function using inject and returning a UrlTree
Has  Unknown Test

======================================

Test:  can access query params and redirect using them
Has  Unknown Test

======================================

Test:  with a function using inject and returning a UrlTree with params
Has  Unknown Test

======================================

Test:  receives positional params from the current route
Has  Unknown Test

======================================

Test:  receives params from the parent route
Has  Unknown Test

======================================

Test:  receives data from the parent componentless route
Has  Unknown Test

======================================

Test:  has access to path params
Has  Unknown Test

======================================

Test:  does not fail with large configs
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should complete when initial navigation fails and initialNavigation = enabledBlocking
Has  Exception Handling

======================================

Test:  should finish navigation when initial navigation is enabledBlocking and component renavigates on render
Has  Unknown Test

======================================

Test:  should wait for redirect when initialNavigation = enabledBlocking
Has  Exception Handling

======================================

Test:  should wait for redirect with UrlTree when initialNavigation = enabledBlocking
Has  Exception Handling

======================================

Test:  should wait for resolvers to complete when initialNavigation = enabledBlocking
Has  Exception Handling

======================================

Test:  should NOT wait for resolvers to complete when initialNavigation = enabledNonBlocking
Has  Exception Handling

======================================

Test:  should NOT wait for resolvers to complete when initialNavigation is not set
Has  Exception Handling

======================================

Test:  should not run navigation when initialNavigation = disabled
Has  Exception Handling

======================================

Test:  should not init router navigation listeners if a non root component is bootstrapped
Has  Exception Handling

======================================

Test:  should reinit router navigation listeners if a previously bootstrapped root component is destroyed
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should restore the scrolling position
Has  Magic Number Test

======================================

Test:  should cleanup "popstate" and "hashchange" listeners
Has  Magic Number Test

======================================

Test:  can schedule a navigation from the NavigationEnd event #37460
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  should work when CanActivate returns false
Has  Magic Number Test

======================================

Test:  should work when CanDeactivate returns false
Has  Magic Number Test

======================================

Test:  should work when using `NavigationExtras.skipLocationChange`
Has  Magic Number Test

======================================

Test:  should work when using `NavigationExtras.replaceUrl`
Has  Magic Number Test

======================================

Test:  should work when CanLoad returns false
Has  Magic Number Test

======================================

Test:  should work when resolve empty
Has  Magic Number Test

======================================

Test:  should work when an error occurred during navigation
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should work when CanActivate redirects
Has  Magic Number Test

======================================

Test:  restores history correctly when component throws error in constructor and replaceUrl=true
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  restores history correctly when component throws error in constructor and skipLocationChange=true
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should work
Has  Magic Number Test

======================================

Test:  should work when CanActivate redirects
Has  Magic Number Test

======================================

Test:  should work when CanActivate redirects with UrlTree
Has  Magic Number Test

======================================

Test:  redirectTo with same url, and guard reject
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should create new state
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should reuse existing nodes when it can
Has  Magic Number Test

======================================

Test:  should handle componentless routes
Has  Magic Number Test

======================================

Test:  should consistently represent future and current state
Has  Magic Number Test

======================================

Test:  should error when navigating to the root segment with params
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should stringify positional parameters
Has  Magic Number Test

======================================

Test:  should throw when outlets is not the last command
Has  Unknown Test

======================================

Test:  should throw when too many ..
Has  Magic Number Test

======================================

Test:  can use "merge" as the default
Has  Magic Number Test

======================================

Test:  can use "perserve" as the default
Has  Magic Number Test

======================================

Test:  can override the default by providing a new option
Has  Magic Number Test

======================================

Test:  should not activate if route is changed
Has  Magic Number Test

======================================

Test:  should navigate to the current URL
Has  Unknown Test

======================================

Test:  should override default onSameUrlNavigation with extras
Has  Unknown Test

======================================

Test:  should override default onSameUrlNavigation with extras
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should set the restoredState to null when executing imperative navigations
Has  Conditional Test Logic

======================================

Test:  should set history.state if passed using imperative navigation
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should set history.state when navigation with browser back and forward
Has  Conditional Test Logic

======================================

Test:  should navigate correctly when using `Location#historyGo
Has  Magic Number Test

======================================

Test:  should not error if state is not {[key: string]: any}
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not pollute browser history when replaceUrl is set to true
Has  Magic Number Test

======================================

Test:  should deactivate outlet children with componentless parent
Has  Magic Number Test

======================================

Test:  should work between aux outlets under two levels of empty path parents
Has  Magic Number Test

======================================

Test:  should not wait for prior navigations to start a new navigation
Has  Magic Number Test

======================================

Test:  should eagerly update the URL
Has  Conditional Test Logic

======================================

Test:  should eagerly update the URL
Has  Magic Number Test

======================================

Test:  should eagerly update URL after redirects are applied
Has  Conditional Test Logic

======================================

Test:  should set `state`
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  can renavigate to same URL during in-flight navigation
Has  Magic Number Test

======================================

Test:  should navigate back and forward
Has  Conditional Test Logic

======================================

Test:  should navigate when locations changes
Has  Magic Number Test

======================================

Test:  should reset location if a navigation by location is successful
Has  Magic Number Test

======================================

Test:  should skip duplicate location events
Has  Magic Number Test

======================================

Test:  can render a 404 page without changing the URL
Has  Magic Number Test

======================================

Test:  should accurately track currentNavigation
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should ignore null and undefined query params
Has  Magic Number Test

======================================

Test:  should cancel in-flight navigations
Has  Exception Handling

======================================

Test:  should handle failed navigations gracefully
Has  Exception Handling

======================================

Test:  can redirect from error handler with RouterModule.forRoot
Has  Conditional Test Logic

======================================

Test:  can redirect from error handler
Has  Conditional Test Logic

======================================

Test:  should not break navigation if an error happens in NavigationErrorHandler
Has  Unknown Test

======================================

Test:  should dispatch NavigationError after the url has been reset back
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should reset the url with the right state when navigation errors
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should not trigger another navigation when resetting the url back due to a NavigationError
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should dispatch NavigationCancel after the url has been reset back
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not swallow errors from browser state update
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should emit an event when an outlet gets activated
Has  Magic Number Test

======================================

Test:  should update url and router state before activating components
Has  Magic Number Test

======================================

Test:  should provide resolved data
Has  Magic Number Test

======================================

Test:  should handle errors
Has  Exception Handling

======================================

Test:  should handle empty errors
Has  Exception Handling

======================================

Test:  should not navigate when all resolvers return empty result
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should not navigate when at least one resolver returns empty result
Has  Exception Handling

======================================

Test:  should not navigate when all resolvers for a child route from forChild() returns empty result
Has  Exception Handling

======================================

Test:  should not navigate when at least one resolver for a child route from forChild() returns empty result
Has  Exception Handling

======================================

Test:  should include target snapshot in NavigationError when resolver throws
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should preserve resolved data
Has  Magic Number Test

======================================

Test:  should override route static data with resolved data
Has  Magic Number Test

======================================

Test:  should not override inherited resolved data with inherited static data
Has  Magic Number Test

======================================

Test:  should not override nested route static data when both are using resolvers
Has  Magic Number Test

======================================

Test:  should not override child route's static data when wrapper is using resolved data and the child route static data
Has  Magic Number Test

======================================

Test:  should allow guards alter data resolved by routes
Has  Magic Number Test

======================================

Test:  should rerun resolvers when the urls segments of a wildcard route change
Has  Magic Number Test

======================================

Test:  can resolve symbol keys
Has  Magic Number Test

======================================

Test:  should not throw when commands is null or undefined
Has  Magic Number Test

======================================

Test:  for anchor elements
Has  Unknown Test

======================================

Test:  for non-anchor elements
Has  Unknown Test

======================================

Test:  should update Navigation object after redirects are applied
Has  Conditional Test Logic

======================================

Test:  should not break the back button when trigger by location change
Has  Magic Number Test

======================================

Test:  works
Has  Magic Number Test

======================================

Test:  works
Has  Magic Number Test

======================================

Test:  works
Has  Conditional Test Logic

======================================

Test:  works with root url
Has  Conditional Test Logic

======================================

Test:  should resolve navigateByUrl promise after redirect finishes
Has  Exception Handling

======================================

Test:  can redirect while changing state object
Has  Magic Number Test

======================================

Test:  should rerun guards and resolvers when params change
Has  Magic Number Test

======================================

Test:  should rerun guards and resolvers when query params change
Has  Magic Number Test

======================================

Test:  should always rerun guards and resolvers
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should rerun rerun guards and resolvers when path params change
Has  Magic Number Test

======================================

Test:  should rerun when a parent segment changes
Has  Magic Number Test

======================================

Test:  should rerun rerun guards and resolvers when path or query params change
Has  Magic Number Test

======================================

Test:  should allow a predicate function to determine when to run guards and resolvers
Has  Magic Number Test

======================================

Test:  works
Has  Magic Number Test

======================================

Test:  works
Has  Exception Handling

======================================

Test:  works with componentless routes
Has  Magic Number Test

======================================

Test:  should use correct component to deactivate forChild route
Has  Magic Number Test

======================================

Test:  should not create a route state if navigation is canceled
Has  Magic Number Test

======================================

Test:  works
Has  Exception Handling

======================================

Test:  should not load children when CanLoad returns false
Has  Magic Number Test

======================================

Test:  should support navigating from within the guard
Has  Magic Number Test

======================================

Test:  should support returning UrlTree from within the guard
Has  Magic Number Test

======================================

Test:  should resolve navigateByUrl promise after CanLoad executes
Has  Exception Handling

======================================

Test:  should execute CanLoad only once
Has  Magic Number Test

======================================

Test:  cancels guard execution when a new navigation happens
Has  Magic Number Test

======================================

Test:  should only execute canLoad guards of routes being activated
Has  Magic Number Test

======================================

Test:  should execute canLoad guards
Has  Magic Number Test

======================================

Test:  should redirect with UrlTree if higher priority guards have resolved
Has  Magic Number Test

======================================

Test:  should redirect with UrlTree if UrlTree is lower priority
Has  Magic Number Test

======================================

Test:  cancels guard execution when a new navigation happens
Has  Magic Number Test

======================================

Test:  can run functional guards serially
Has  Magic Number Test

======================================

Test:  should allow redirection in NavigationStart
Has  Magic Number Test

======================================

Test:  should stop emitting events after the router is destroyed
Has  Magic Number Test

======================================

Test:  should resolve navigation promise with false after the router is destroyed
Has  Exception Handling

======================================

Test:  should create a single instance of lazy-loaded modules
Has  Magic Number Test

======================================

Test:  should emit RouteConfigLoadStart and RouteConfigLoadEnd event when route is lazy loaded
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  throws an error when forRoot() is used in a lazy context
Has  Exception Handling

======================================

Test:  should render loadComponent named outlet with children
Has  Magic Number Test

======================================

Test:  error emit an error when cannot load a config
Has  Exception Handling

======================================

Test:  should emit an error when the lazily-loaded config is not valid
Has  Exception Handling

======================================

Test:  should work
Has  Magic Number Test

======================================

Test:  should not preload when canLoad is present and does not execute guard
Has  Magic Number Test

======================================

Test:  should allow navigation to modules with no routes
Has  Unknown Test

======================================

Test:  should work
Has  Magic Number Test

======================================

Test:  should handle the case when the router takes only the primary url
Has  Magic Number Test

======================================

Test:  should not remove parts of the URL that are not handled by the router when "eager"
Has  Magic Number Test

======================================

Test:  should emit an event when an outlet gets attached/detached
Has  Magic Number Test

======================================

Test:  should support attaching & detaching fragments
Has  Magic Number Test

======================================

Test:  should not try to detach the outlet of a route that does not get to attach a component
Has  Magic Number Test

======================================

Test:  should return true if all values are true
Has  Unknown Test

======================================

Test:  should return false if observables to the left of false have produced a value
Has  Unknown Test

======================================

Test:  should ignore results for unresolved sets of Observables
Has  Unknown Test

======================================

Test:  should return UrlTree if higher priority guards have resolved
Has  Unknown Test

======================================

Test:  should return false even with UrlTree if UrlTree is lower priority
Has  Unknown Test

======================================

Test:  should return UrlTree even after a false if the false is lower priority
Has  Unknown Test

======================================

Test:  should return the highest priority UrlTree
Has  Unknown Test

======================================

Test:  should ignore invalid values
Has  Unknown Test

======================================

Test:  should propagate errors
Has  Unknown Test

======================================

Test:  should take only the first emitted value of every resolver
Has  Magic Number Test

======================================

Test:  should cancel navigation if 1 of 2 resolvers does not emit
Has  Magic Number Test

======================================

Test:  should run resolvers in different parts of the tree
Has  Magic Number Test

======================================

Test:  should update children inherited data when resolvers run
Has  Magic Number Test

======================================

Test:  should work
Has  Unknown Test

======================================

Test:  should support secondary routes
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should set url segment and index properly
Has  Magic Number Test

======================================

Test:  should match routes in the depth first order
Has  Unknown Test

======================================

Test:  should use outlet name when matching secondary routes
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should handle non top-level secondary routes
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should sort routes by outlet name
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should support matrix parameters
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should set static data
Has  Magic Number Test

======================================

Test:  should inherit componentless route's data
Has  Magic Number Test

======================================

Test:  should not inherit route's data if it has component
Has  Magic Number Test

======================================

Test:  should not inherit route's data if it has loadComponent
Has  Magic Number Test

======================================

Test:  should inherit route's data if paramsInheritanceStrategy is 'always'
Has  Magic Number Test

======================================

Test:  should work
Has  Unknown Test

======================================

Test:  should match when terminal
Has  Unknown Test

======================================

Test:  should work (nested case)
Has  Unknown Test

======================================

Test:  should inherit params
Has  Unknown Test

======================================

Test:  should match (non-terminal)
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should match (non-terminal) when both primary and secondary and primary has a child
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should match (terminal)
Has  Magic Number Test

======================================

Test:  should match (non-terminal)
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should match (terminal)
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should work only only primary outlet
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should work when split is at the root level
Has  Magic Number Test

======================================

Test:  should match (non-terminal)
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should work when outlet is a child of empty path parent
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should work for outlets adjacent to empty path
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should work with named outlets both adjecent to and as a child of empty path
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should work with children outlets within two levels of empty parents
Has  Magic Number Test

======================================

Test:  should not persist a primary segment beyond the boundary of a named outlet match
Has  Unknown Test

======================================

Test:  should support simple wildcards
Has  Unknown Test

======================================

Test:  should work
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should inherit params until encounters a normal route
Has  Unknown Test

======================================

Test:  should inherit all params if paramsInheritanceStrategy is 'always'
Has  Unknown Test

======================================

Test:  should not throw when no children matching
Has  Unknown Test

======================================

Test:  should not throw when no children matching (aux routes)
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should use custom path matcher
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  should work with terminal route
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  should work with child terminal route
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  should set isActive right after looking at its children -- #18983
Has  Conditional Test Logic

======================================

Test:  duplicate navigation to same url
Has  Magic Number Test

======================================

Test:  works with a duplicate popstate/hashchange navigation (as seen in firefox)
Has  Magic Number Test

======================================

Test:  navigation works when a redirecting NavigationCancel event causes another synchronous navigation
Has  Magic Number Test

======================================

Test:  should copy config to avoid mutations of user-provided objects
Has  Magic Number Test

======================================

Test:  should run
Has  Magic Number Test

======================================

Test:  should run from top to bottom
Has  Magic Number Test

======================================

Test:  should not run for unchanged routes
Has  Magic Number Test

======================================

Test:  should skip multiple unchanged routes but fire for all changed routes
Has  Magic Number Test

======================================

Test:  does not modify tabindex if already set on non-anchor element
Has  Magic Number Test

======================================

Test:  null, removes tabIndex and does not navigate
Has  Magic Number Test

======================================

Test:  undefined, removes tabIndex and does not navigate
Has  Magic Number Test

======================================

Test:  should coerce boolean input values
Has  Conditional Test Logic

======================================

Test:  should coerce boolean input values
Has  Conditional Test Logic

======================================

Test:  should preserve `NavigationExtras.replaceUrl` when redirecting from guard using urlTree
Has  Magic Number Test

======================================

Test:  should work when CanActivate redirects
Has  Magic Number Test

======================================

Test:  should not load children
Has  Magic Number Test

======================================

Test:  should work
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  without reloading loaded modules
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  and cope with the loader throwing exceptions during module load but allow retry
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  and cope with the loader throwing exceptions but allow retry
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  without autoloading loading submodules
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  and close the preload obsservable 
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  with overlapping loads from navigation and the preloader
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  cope with factory fail from broken modules
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should work
Has  Magic Number Test

======================================

Test:  should work
Has  Magic Number Test

======================================

Test:  should work
Has  Unknown Test

======================================

Test:  throws error when loadComponent is not standalone
Has  Magic Number Test

======================================

Test:  should recover from errors
Has  Magic Number Test

======================================

Test:  works when there is both loadComponent and loadChildren
Has  Magic Number Test

======================================

Test:  loadComponent does not block loadChildren
Has  Magic Number Test

======================================

Test:  loads nested components
Has  Magic Number Test

======================================

Test:  defaults to disabled
Has  Magic Number Test

======================================

Test:  should scroll to the top
Has  Magic Number Test

======================================

Test:  should scroll to the stored position on popstate
Has  Magic Number Test

======================================

Test:  should work (scrollPositionRestoration is disabled)
Has  Magic Number Test

======================================

Test:  should work (scrollPositionRestoration is enabled)
Has  Magic Number Test

======================================

Test:  work
Has  Magic Number Test

======================================

Test:  should return children
Has  Magic Number Test

======================================

Test:  should return path from root
Has  Magic Number Test

======================================

Test:  should return children
Has  Magic Number Test

======================================

Test:  should return path from root
Has  Magic Number Test

======================================

Test:  should parse secondary segments with an = in the name
Has  Magic Number Test

======================================

Test:  should parse segments with matrix parameters when the name contains an =
Has  Magic Number Test

======================================

Test:  should parse segments that end with an =
Has  Magic Number Test

======================================

Test:  should parse segments that only contain an =
Has  Magic Number Test

======================================

Test:  should parse segments with matrix parameter values containing an =
Has  Magic Number Test

======================================

Test:  should parse top-level nodes with only secondary segment
Has  Magic Number Test

======================================

Test:  should parse nodes with only secondary segment
Has  Magic Number Test

======================================

Test:  should encode/decode path segments and parameters
Has  Magic Number Test

======================================

Test:  should parse encoded parens in matrix params
Has  Magic Number Test

======================================

Test:  should encode minimal special characters plus parens and semi-colon in matrix params
Has  Magic Number Test

======================================

Test:  should encode special characters in the path the same as matrix params
Has  Magic Number Test

======================================

Test:  should return the root of the tree
Has  Magic Number Test

======================================

Test:  should return the parent of a node
Has  Magic Number Test

======================================

Test:  should return the parent of a node (second child)
Has  Magic Number Test

======================================

Test:  should return the children of a node
Has  Magic Number Test

======================================

Test:  should return the first child of a node
Has  Magic Number Test

======================================

Test:  should return the siblings of a node
Has  Magic Number Test

======================================

Test:  should return the path to the root
Has  Magic Number Test

======================================

Test:  are not available in node environment
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should skip initial transition
Has  Conditional Test Logic

======================================

Test:  should have the correct event order when using view transitions
Has  Magic Number Test

======================================

Test:  should not create a view transition if only the fragment changes
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  throws error if routing throws
Has  Unknown Test

======================================

Test:  throws an error if the routed component instance does not match the one required
Has  Unknown Test

======================================

Test:  throws an error if navigation fails but expected a component instance
Has  Unknown Test

======================================

Test:  waits for redirects using router.navigate
Has  Magic Number Test

======================================

Test:  should get the $rootScope from AngularJS and set an $on watch on $locationChangeStart
Has  Magic Number Test

======================================

Test:  should navigate by url every time $locationChangeStart is broadcasted
Has  Magic Number Test

======================================

Test:  should allow configuration to work with hash-based routing
Has  Magic Number Test

======================================

Test:  should work correctly on browsers that do not start pathname with `/`
Has  Exception Handling

======================================

Test:  should not duplicate navigations triggered by Angular router
Has  Magic Number Test

======================================

Test:  generates a correct config
Has  Magic Number Test

======================================

Test:  assigns files to the first matching asset-group (unaffected by file-system access delays)
Has  Magic Number Test

======================================

Test:  uses default `navigationUrls` if not provided
Has  Magic Number Test

======================================

Test:  throws if the obsolete `versionedFiles` is used
Has  Exception Handling

======================================

Test:  generates a correct config with `cacheOpaqueResponses`
Has  Magic Number Test

======================================

Test:  generates a correct config with `cacheQueryOptions`
Has  Magic Number Test

======================================

Test:  doesn't exceed concurrency limit
Has  Magic Number Test

======================================

Test:  can access the registration when it comes before subscription
Has  Unknown Test

======================================

Test:  can access the registration when it comes after subscription
Has  Unknown Test

======================================

Test:  gives disabled NgswCommChannel when navigator.serviceWorker is undefined
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  gives enabled NgswCommChannel when browser supports SW and enabled option is true
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  calls `PushManager.subscribe()` (with appropriate options)
Has  Magic Number Test

======================================

Test:  rejects if currently not subscribed to push notifications
Has  Exception Handling

======================================

Test:  calls `PushSubscription.unsubscribe()`
Has  Magic Number Test

======================================

Test:  rejects if `PushSubscription.unsubscribe()` fails
Has  Exception Handling

======================================

Test:  rejects if `PushSubscription.unsubscribe()` returns false
Has  Exception Handling

======================================

Test:  does not emit on `SwPush.subscription` on failure
Has  Exception Handling

======================================

Test:  emits on worker-driven changes (i.e. when the controller changes)
Has  Magic Number Test

======================================

Test:  emits on subscription changes (i.e. when subscribing/unsubscribing)
Has  Magic Number Test

======================================

Test:  does not crash on subscription to observables
Has  Exception Handling
Has  Unknown Test

======================================

Test:  gives an error when registering
Has  Exception Handling
Has  Unknown Test

======================================

Test:  gives an error when unsubscribing
Has  Exception Handling
Has  Unknown Test

======================================

Test:  can be instantiated
Has  Unknown Test

======================================

Test:  does not crash on subscription to observables
Has  Exception Handling
Has  Unknown Test

======================================

Test:  gives an error when checking for updates
Has  Exception Handling
Has  Unknown Test

======================================

Test:  gives an error when activating updates
Has  Exception Handling
Has  Unknown Test

======================================

Test:  communicates back and forth via update check
Has  Unknown Test

======================================

Test:  detects an actual update
Has  Unknown Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  defaults to registering the SW when the app stabilizes (under 30s)
Has  Magic Number Test

======================================

Test:  defaults to registering the SW after 30s if the app does not stabilize sooner
Has  Magic Number Test

======================================

Test:  registers the SW when the app stabilizes with `registerWhenStable:<timeout>`
Has  Magic Number Test

======================================

Test:  registers the SW after `timeout` if the app does not stabilize with `registerWhenStable:<timeout>`
Has  Magic Number Test

======================================

Test:  registers the SW asap (asynchronously) before the app stabilizes with `registerWhenStable:0`
Has  Magic Number Test

======================================

Test:  registers the SW only when the app stabilizes with `registerWhenStable:`
Has  Magic Number Test

======================================

Test:  registers the SW only when the app stabilizes with `registerWhenStable`
Has  Magic Number Test

======================================

Test:  registers the SW after the specified delay with `registerWithDelay:<delay>`
Has  Magic Number Test

======================================

Test:  registers the SW asap (asynchronously) with `registerWithDelay:`
Has  Magic Number Test

======================================

Test:  registers the SW asap (asynchronously) with `registerWithDelay`
Has  Magic Number Test

======================================

Test:  caches a basic request
Has  Magic Number Test

======================================

Test:  refreshes after awhile
Has  Magic Number Test

======================================

Test:  still matches if search differs but ignoreSearch is enabled
Has  Unknown Test

======================================

Test:  falls back on the cache when server times out
Has  Magic Number Test

======================================

Test:  refreshes ahead
Has  Magic Number Test

======================================

Test:  caches opaque responses on refresh by default
Has  Magic Number Test

======================================

Test:  does not cache opaque responses when configured not to do so
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  CacheQueryOptions are passed through when falling back to cache
Has  Magic Number Test

======================================

Test:  claims all clients, after activation
Has  Magic Number Test

======================================

Test:  cleans up old `@angular/service-worker` caches, after activation
Has  Magic Number Test

======================================

Test:  handles actual errors from the browser
Has  Magic Number Test

======================================

Test:  checks for updates on restart
Has  Magic Number Test

======================================

Test:  checks for updates on navigation
Has  Magic Number Test

======================================

Test:  does not make concurrent checks for updates on navigation
Has  Magic Number Test

======================================

Test:  cleans up properly on restart
Has  Magic Number Test

======================================

Test:  cleans up properly when failing to load stored state
Has  Magic Number Test

======================================

Test:  bypasses the ServiceWorker on `ngsw-bypass` parameter
Has  Unknown Test

======================================

Test:  does not unregister or change state when status code is 503 (service unavailable)
Has  Magic Number Test

======================================

Test:  expire according to Cache-Control headers
Has  Magic Number Test

======================================

Test:  survive serialization
Has  Magic Number Test

======================================

Test:  get carried over during updates
Has  Magic Number Test

======================================

Test:  should delete other caches even if deleting one of them fails
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  enters degraded mode when update has a bad index
Has  Magic Number Test

======================================

Test:  executes scheduled work on time
Has  Magic Number Test

======================================

Test:  waits for multiple tasks to complete serially
Has  Magic Number Test

======================================

Test:  does not execute work until timeout passes with no triggers
Has  Magic Number Test

======================================

Test:  executes tasks after max delay even with newer triggers
Has  Magic Number Test

======================================

Test:  initializes without crashing
Has  Unknown Test

======================================

Test:  persists the cache across restarts
Has  Magic Number Test

======================================

Test:  throws if the server-side content does not match the manifest hash
Has  Magic Number Test

======================================

Test:  should return an array of node collections for each selector
Has  Magic Number Test

======================================

Test:  should collect up unmatched nodes for the wildcard selector
Has  Magic Number Test

======================================

Test:  should add testabilities hook when creating components
Has  Magic Number Test

======================================

Test:  should remove the testability hook when destroy a component
Has  Magic Number Test

======================================

Test:  should return false for primitive values
Has  Magic Number Test

======================================

Test:  should return false if `.then` is not a function
Has  Exception Handling

======================================

Test:  should return true if `.then` is a function
Has  Exception Handling

======================================

Test:  should call all callbacks once resolved
Has  Exception Handling

======================================

Test:  should call callbacks immediately if already resolved
Has  Exception Handling

======================================

Test:  should ignore subsequent calls to `resolve()`
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should resolve immediately if the provided values are not thenable
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should wait for any thenables to resolve
Has  Exception Handling

======================================

Test:  should have AngularJS loaded
Has  EmptyTest
Has  Magic Number Test

======================================

Test:  should destroy the AngularJS app when `PlatformRef` is destroyed
Has  Magic Number Test

======================================

Test:  should output an error message to the console and re-throw
Has  Magic Number Test

======================================

Test:  should not break if a $digest is already in progress
Has  Magic Number Test

======================================

Test:  should interleave scope and component expressions
Has  Magic Number Test

======================================

Test:  should propagate changes to a downgraded component inside the ngZone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should bind properties, events
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should support two-way binding and event listener
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should initialize inputs in time for `ngOnChanges`
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should properly run cleanup when ng1 directive is destroyed
Has  Magic Number Test

======================================

Test:  should bind properties, events
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should bind optional properties
Has  Magic Number Test

======================================

Test:  should bind properties, events in controller when bindToController is not used
Has  Magic Number Test

======================================

Test:  should bind properties, events in link function
Has  Magic Number Test

======================================

Test:  should support templateUrl fetched from $httpBackend
Has  Magic Number Test

======================================

Test:  should support templateUrl as a function
Has  Magic Number Test

======================================

Test:  should support controller with controllerAs
Has  Conditional Test Logic

======================================

Test:  should call `$onChanges()` on binding destination
Has  Magic Number Test

======================================

Test:  should destroy `componentScope`
Has  Magic Number Test

======================================

Test:  should emit `$destroy` on `$element` and descendants
Has  Magic Number Test

======================================

Test:  should clear data on `$element` and descendants
Has  Magic Number Test

======================================

Test:  should clear dom listeners on `$element` and descendants`
Has  Magic Number Test

======================================

Test:  should run the pre-linking after instantiating the controller
Has  Magic Number Test

======================================

Test:  should handle deferred bootstrap
Has  Magic Number Test

======================================

Test:  should propagate return value of resumeBootstrap
Has  Magic Number Test

======================================

Test:  should wait for ng2 testability
Has  Magic Number Test

======================================

Test:  should be able to test ng1 components that use ng2 components
Has  Magic Number Test

======================================

Test:  should not break if a $digest is already in progress
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should interleave scope and component expressions
Has  Exception Handling

======================================

Test:  should propagate changes to a downgraded component inside the ngZone
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should instantiate ng2 in ng1 template and project content
Has  Exception Handling

======================================

Test:  should correctly project structural directives
Has  Exception Handling

======================================

Test:  should instantiate ng1 in ng2 template and project content
Has  Exception Handling

======================================

Test:  should support multi-slot projection
Has  Exception Handling

======================================

Test:  should bind properties, events
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should bind properties to onpush components
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should support two-way binding and event listener
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should run change-detection on every digest (by default)
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should not run change-detection on every digest when opted out
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should still run normal Angular change-detection regardless of `propagateDigest`
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should initialize inputs in time for `ngOnChanges`
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should bind to ng-model
Has  Exception Handling

======================================

Test:  should properly run cleanup when ng1 directive is destroyed
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should properly run cleanup with multiple levels of nesting
Has  Exception Handling

======================================

Test:  should destroy the AngularJS app when `PlatformRef` is destroyed
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should work when compiled outside the dom (by fallback to the root ng2.injector)
Has  Exception Handling

======================================

Test:  should allow attribute selectors for downgraded components
Has  Exception Handling

======================================

Test:  should allow attribute selectors for components in ng2
Has  Exception Handling

======================================

Test:  should respect hierarchical dependency injection for ng2
Has  Exception Handling

======================================

Test:  should be compiled synchronously, if possible
Has  Exception Handling

======================================

Test:  should work with ng2 lazy loaded components
Has  Exception Handling

======================================

Test:  should throw if `downgradedModule` is specified
Has  Exception Handling

======================================

Test:  should downgrade a standalone component using NgModule APIs
Has  Exception Handling

======================================

Test:  should support manually setting up a root module for all downgraded modules
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should correctly traverse the injector tree of downgraded components
Has  Magic Number Test

======================================

Test:  should correctly traverse the injector tree of downgraded components (from different modules)
Has  Magic Number Test

======================================

Test:  should support downgrading a component and propagate inputs
Has  Magic Number Test

======================================

Test:  should propagate input changes inside the Angular zone
Has  Magic Number Test

======================================

Test:  should wire up the component for change detection
Has  Magic Number Test

======================================

Test:  should wire up nested, asynchronously instantiated components for change detection
Has  Magic Number Test

======================================

Test:  should run the lifecycle hooks in the correct order
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should properly run cleanup when a downgraded component is destroyed
Has  Magic Number Test

======================================

Test:  should only retrieve the Angular zone once (and cache it for later use)
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should destroy the AngularJS app when `PlatformRef` is destroyed
Has  Magic Number Test

======================================

Test:  should throw if no downgraded module is included
Has  Magic Number Test

======================================

Test:  should throw if the corresponding downgraded module is not included
Has  Magic Number Test

======================================

Test:  should throw if `downgradedModule` is not specified and there are multiple downgraded modules
Has  Magic Number Test

======================================

Test:  should have AngularJS loaded
Has  EmptyTest
Has  Magic Number Test

======================================

Test:  should verify UpgradeAdapter example
Has  Exception Handling

======================================

Test:  should downgrade ng2 service to ng1
Has  Exception Handling

======================================

Test:  should upgrade ng1 service to ng2
Has  Exception Handling

======================================

Test:  should initialize the upgraded injector before application run blocks are executed
Has  Exception Handling

======================================

Test:  should allow resetting angular at runtime
Has  Exception Handling

======================================

Test:  should handle deferred bootstrap
Has  Magic Number Test

======================================

Test:  should propagate return value of resumeBootstrap
Has  Magic Number Test

======================================

Test:  should wait for ng2 testability
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should not wait for $interval
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should support `template` (string)
Has  Exception Handling

======================================

Test:  should support `template` (function)
Has  Exception Handling

======================================

Test:  should pass $element to `template` function and not $attrs
Has  Exception Handling

======================================

Test:  should support `templateUrl` (string) fetched from `$templateCache`
Has  Exception Handling

======================================

Test:  should support `templateUrl` (function) fetched from `$templateCache`
Has  Exception Handling

======================================

Test:  should pass $element to `templateUrl` function and not $attrs
Has  Exception Handling

======================================

Test:  should support empty templates
Has  Exception Handling

======================================

Test:  should support `@` bindings
Has  Exception Handling

======================================

Test:  should support `<` bindings
Has  Exception Handling

======================================

Test:  should support `=` bindings
Has  Exception Handling

======================================

Test:  should support `&` bindings
Has  Exception Handling

======================================

Test:  should bind properties, events
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should bind optional properties
Has  Exception Handling

======================================

Test:  should bind properties, events to scope when bindToController is not used
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should compile the ng1 template in the correct DOM context
Has  Exception Handling

======================================

Test:  should run the pre-linking after instantiating the controller
Has  Exception Handling

======================================

Test:  should run the pre-linking function before linking
Has  Exception Handling

======================================

Test:  should run the post-linking function after linking (link: object)
Has  Exception Handling

======================================

Test:  should run the post-linking function after linking (link: function)
Has  Exception Handling

======================================

Test:  should run the post-linking function before `$postLink`
Has  Exception Handling

======================================

Test:  should support `controllerAs`
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should support `bindToController` (boolean)
Has  Exception Handling

======================================

Test:  should support `bindToController` (object)
Has  Exception Handling

======================================

Test:  should support `controller` as string
Has  Exception Handling

======================================

Test:  should insert the compiled content before instantiating the controller
Has  Exception Handling

======================================

Test:  should resolve to its own controller if falsy
Has  Exception Handling

======================================

Test:  should be available to children
Has  Exception Handling

======================================

Test:  should throw if required controller cannot be found
Has  Exception Handling

======================================

Test:  should not throw if missing required controller is optional
Has  Exception Handling

======================================

Test:  should assign resolved values to the controller instance (if `require` is not object)
Has  Exception Handling

======================================

Test:  should assign resolved values to the controller instance (if `require` is object)
Has  Exception Handling

======================================

Test:  should assign to controller before calling `$onInit()`
Has  Exception Handling

======================================

Test:  should use the key as name if the required controller name is omitted
Has  Exception Handling

======================================

Test:  should support single-slot transclusion
Has  Exception Handling

======================================

Test:  should support single-slot transclusion with fallback content
Has  Exception Handling

======================================

Test:  should support multi-slot transclusion
Has  Exception Handling

======================================

Test:  should support default slot (with fallback content)
Has  Exception Handling

======================================

Test:  should support optional transclusion slots (with fallback content)
Has  Exception Handling

======================================

Test:  should throw if a non-optional slot is not filled
Has  Exception Handling

======================================

Test:  should support structural directives in transcluded content
Has  Exception Handling

======================================

Test:  should call `$onChanges()` on binding destination (prototype)
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should call `$onChanges()` on binding destination (instance)
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should call `$onInit()` on controller
Has  Exception Handling

======================================

Test:  should not call `$onInit()` on scope
Has  Exception Handling

======================================

Test:  should call `$postLink()` on controller
Has  Exception Handling

======================================

Test:  should not call `$postLink()` on scope
Has  Exception Handling

======================================

Test:  should call `$doCheck()` on controller
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should not call `$doCheck()` on scope
Has  Exception Handling

======================================

Test:  should call `$onDestroy()` on controller
Has  Exception Handling

======================================

Test:  should not call `$onDestroy()` on scope
Has  Exception Handling

======================================

Test:  should be called in order `$onChanges()` > `$onInit()` > `$doCheck()` > `$postLink()`
Has  Exception Handling

======================================

Test:  should destroy `$componentScope`
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should emit `$destroy` on `$element` and descendants
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should clear data on `$element` and descendants`
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should clear dom listeners on `$element` and descendants`
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should clean up `$doCheck()` watchers from the parent scope
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should support ng2 > ng1 > ng2 (no inputs/outputs)
Has  Exception Handling

======================================

Test:  should support ng2 > ng1 > ng2 (with inputs/outputs)
Has  Exception Handling

======================================

Test:  should support ng2 > ng1 > ng2 > ng1 (with `require`)
Has  Exception Handling

======================================

Test:  should upgrade to a standalone component in NgModule-bootstrapped application
Has  Exception Handling

======================================

Test:  should bind onEventType listeners
Has  Magic Number Test

======================================

Test:  test whether addListener is patched
Has  Conditional Test Logic

======================================

Test:  should respect removeEventListener
Has  Magic Number Test

======================================

Test:  should handler removing onmessage
Has  Magic Number Test

======================================

Test:  should intercept XHRs and treat them as MacroTasks
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not trigger Zone callback of internal onreadystatechange
Has  Conditional Test Logic

======================================

Test:  should invoke xhr task even onload listener throw error
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should allow canceling of an XMLHttpRequest
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should allow aborting an XMLHttpRequest after its completed
Has  Conditional Test Logic
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should preserve other setters
Has  Exception Handling

======================================

Test:  should preserve static constants
Has  Magic Number Test

======================================

Test:  should keep taskcount correctly when abort was called multiple times before request is done
Has  Conditional Test Logic

======================================

Test:  should close xhr request if error happened when connect
Has  Conditional Test Logic

======================================

Test:  should trigger readystatechange if xhr request trigger cors error
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should invoke task if xhr request trigger cors error
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should be in the zone when use XMLHttpRequest.addEventListener
Has  Conditional Test Logic
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should return origin listener when call xhr.onreadystatechange
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should allow you to override alert/prompt/confirm
Has  Conditional Test Logic

======================================

Test:  should patch all possible on properties on native prototype
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  should patch all possible on properties on element
Has  Unknown Test

======================================

Test:  should patch all possible on properties on svg element
Has  Unknown Test

======================================

Test:  should patch all possible on properties on media element
Has  Unknown Test

======================================

Test:  should patch all possible on properties on frameset element
Has  Unknown Test

======================================

Test:  should patch all possible on properties on body
Has  Unknown Test

======================================

Test:  should patch all possible on properties on Frame
Has  Unknown Test

======================================

Test:  should patch all possible on properties on marquee element
Has  Unknown Test

======================================

Test:  should patch all possible on properties on Window
Has  Unknown Test

======================================

Test:  should patch all possible on properties on xhr
Has  Unknown Test

======================================

Test:  should patch all possible on properties on worker
Has  Unknown Test

======================================

Test:  should patch all possible on properties on websocket
Has  Exception Handling
Has  Unknown Test
Has  Redundant Print

======================================

Test:  get window onerror should not throw error
Has  Exception Handling

======================================

Test:  window.onerror callback signature should be (message, source, lineno, colno, error)
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should ignore duplicate handler
Has  Unknown Test

======================================

Test:  should be able to add/remove same handler with mix options and capture
Has  Unknown Test

======================================

Test:  should be able to add different handlers for same event
Has  Unknown Test

======================================

Test:  should support addEventListener with AddEventListenerOptions once setting
Has  Magic Number Test

======================================

Test:  should support addEventListener with AddEventListenerOptions once setting and capture
Has  Magic Number Test

======================================

Test:  should support add multiple listeners with AddEventListenerOptions once setting and same capture after normal listener
Has  Magic Number Test

======================================

Test:  should support add multiple listeners with AddEventListenerOptions once setting and mixed capture after normal listener
Has  Magic Number Test

======================================

Test:  should support add multiple listeners with AddEventListenerOptions once setting before normal listener
Has  Magic Number Test

======================================

Test:  should support add multiple listeners with AddEventListenerOptions once setting with same capture before normal listener
Has  Magic Number Test

======================================

Test:  should support add multiple listeners with AddEventListenerOptions once setting with mixed capture before normal listener
Has  Magic Number Test

======================================

Test:  should change options to boolean if not support passive
Has  Conditional Test Logic

======================================

Test:  should change options to boolean if not support passive on HTMLElement
Has  Conditional Test Logic

======================================

Test:  should be passive with global variable defined
Has  Unknown Test

======================================

Test:  should not be passive without global variable defined
Has  Unknown Test

======================================

Test:  should be passive with global variable defined even without passive options
Has  Unknown Test

======================================

Test:  should be passive with global variable defined even without passive options and with capture
Has  Unknown Test

======================================

Test:  should be passive with global variable defined with capture option
Has  Unknown Test

======================================

Test:  should not be passive with global variable defined with passive false option
Has  Unknown Test

======================================

Test:  should be passive with global variable defined and also unpatched
Has  Unknown Test

======================================

Test:  should not be passive without global variable defined and also unpatched
Has  Unknown Test

======================================

Test:  should support remove event listener by call zone.cancelTask directly
Has  Magic Number Test

======================================

Test:  should support remove event listener by call zone.cancelTask directly with capture=true
Has  Magic Number Test

======================================

Test:  should support remove event listeners by call zone.cancelTask directly with multiple listeners
Has  Magic Number Test

======================================

Test:  should support remove event listeners by call zone.cancelTask directly with multiple listeners with same capture=true
Has  Magic Number Test

======================================

Test:  should support remove event listeners by call zone.cancelTask directly with multiple listeners with mixed capture
Has  Magic Number Test

======================================

Test:  should support remove event listeners via AbortController
Has  Magic Number Test

======================================

Test:  should support remove event listeners with AbortController
Has  Magic Number Test

======================================

Test:  should not break remove event listeners with AbortController
Has  Magic Number Test

======================================

Test:  should support remove multiple event listeners with the same AbortController
Has  Magic Number Test

======================================

Test:  should support passing `AbortController` directly to `addEventListener`
Has  Magic Number Test

======================================

Test:  should store the remove abort listener on the task itself and not the task data
Has  Magic Number Test

======================================

Test:  should not add event listeners with aborted signal
Has  Magic Number Test

======================================

Test:  should remove event listeners with timeout signal
Has  Magic Number Test

======================================

Test:  should support reschedule eventTask
Has  Conditional Test Logic

======================================

Test:  should be able to remove eventListener during eventListener callback
Has  Magic Number Test

======================================

Test:  should be able to remove eventListener during eventListener callback with capture=true
Has  Magic Number Test

======================================

Test:  should be able to remove handleEvent eventListener during eventListener callback
Has  Magic Number Test

======================================

Test:  should be able to remove handleEvent eventListener during eventListener callback with capture=true
Has  Magic Number Test

======================================

Test:  should be able to remove multiple eventListeners during eventListener callback
Has  Magic Number Test

======================================

Test:  should be able to remove multiple eventListeners during eventListener callback with capture=true
Has  Magic Number Test

======================================

Test:  should be able to remove part of other eventListener during eventListener callback
Has  Magic Number Test

======================================

Test:  should be able to remove part of other eventListener during eventListener callback with capture=true
Has  Magic Number Test

======================================

Test:  should be able to remove all beforeward and afterward eventListener during eventListener callback
Has  Magic Number Test

======================================

Test:  should be able to remove all beforeward and afterward eventListener during eventListener callback with capture=true
Has  Magic Number Test

======================================

Test:  should be able to remove part of beforeward and afterward eventListener during eventListener callback
Has  Magic Number Test

======================================

Test:  should be able to remove part of beforeward and afterward eventListener during eventListener callback with capture=true
Has  Magic Number Test

======================================

Test:  should be able to remove all beforeward eventListener during eventListener callback
Has  Magic Number Test

======================================

Test:  should be able to remove all beforeward eventListener during eventListener callback with capture=true
Has  Magic Number Test

======================================

Test:  should be able to remove part of beforeward eventListener during eventListener callback
Has  Magic Number Test

======================================

Test:  should be able to remove part of beforeward eventListener during eventListener callback with capture=true
Has  Magic Number Test

======================================

Test:  should be able to remove all eventListeners during first eventListener callback
Has  Magic Number Test

======================================

Test:  should be able to remove all eventListeners during first eventListener callback with capture=true
Has  Magic Number Test

======================================

Test:  should be able to remove all eventListeners during middle eventListener callback
Has  Magic Number Test

======================================

Test:  should be able to remove all eventListeners during middle eventListener callback with capture=true
Has  Magic Number Test

======================================

Test:  should be able to remove all eventListeners during last eventListener callback
Has  Magic Number Test

======================================

Test:  should be able to remove all eventListeners during last eventListener callback with capture=true
Has  Magic Number Test

======================================

Test:  should be able to get eventListeners of specified event form EventTarget
Has  Magic Number Test

======================================

Test:  should be able to get all eventListeners form EventTarget without eventName
Has  Magic Number Test

======================================

Test:  should be able to remove all listeners of specified event form EventTarget
Has  Magic Number Test

======================================

Test:  should be able to remove all listeners of specified event form EventTarget with capture=true
Has  Magic Number Test

======================================

Test:  should be able to remove all listeners of specified event form EventTarget with mixed capture
Has  Magic Number Test

======================================

Test:  should be able to remove all listeners of all events form EventTarget
Has  Magic Number Test

======================================

Test:  should be able to remove listener which was added outside of zone 
Has  Magic Number Test

======================================

Test:  should be able to remove all listeners which were added inside of zone 
Has  Magic Number Test

======================================

Test:  should support window.addEventListener(unhandledrejection)
Has  Conditional Test Logic

======================================

Test:  should support window.addEventListener(rejectionhandled)
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should support multiple window.addEventListener(unhandledrejection)
Has  Conditional Test Logic

======================================

Test:  HTMLCanvasElement.toBlob should be a ZoneAware MacroTask
Has  Magic Number Test

======================================

Test:  ResizeObserver callback should be able to in different zones which when they were observed
Has  Conditional Test Logic

======================================

Test:  navigator.mediaDevices.getUserMedia should in zone
Has  Exception Handling
Has  Redundant Print

======================================

Test:  should work with formAssociatedCallback
Has  Conditional Test Logic

======================================

Test:  should not throw when defining length on an array
Has  Magic Number Test

======================================

Test:  should not be able to change a frozen desc
Has  Exception Handling

======================================

Test:  should not throw error when try to defineProperty with a frozen obj
Has  Exception Handling

======================================

Test:  should work when addEventListener / removeEventListener are called in the global context
Has  Magic Number Test

======================================

Test:  should be able to deregister the same event twice
Has  Unknown Test

======================================

Test:  should work for getCurrentPosition
Has  Magic Number Test

======================================

Test:  should work for watchPosition
Has  Magic Number Test

======================================

Test:  should bind to same zone when called recursively
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should have browser specified property
Has  Conditional Test Logic

======================================

Test:  should always have stack property even without throw
Has  Magic Number Test

======================================

Test:  should show zone names in stack frames and remove extra frames
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  Error with new which occurs in setTimeout callback should not have zone frames visible
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  Error without new which occurs in setTimeout callback should not have zone frames visible
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  Error with new which cause by promise rejection should not have zone frames visible
Has  Exception Handling
Has  Unknown Test

======================================

Test:  Error without new which cause by promise rejection should not have zone frames visible
Has  Exception Handling
Has  Unknown Test

======================================

Test:  Error with new which occurs in eventTask callback should not have zone frames visible
Has  Unknown Test

======================================

Test:  Error without new which occurs in eventTask callback should not have zone frames visible
Has  Unknown Test

======================================

Test:  Error with new which occurs in longStackTraceZone should not have zone frames and longStackTraceZone frames visible
Has  Unknown Test

======================================

Test:  Error without new which occurs in longStackTraceZone should not have zone frames and longStackTraceZone frames visible
Has  Unknown Test

======================================

Test:  should be able to generate zone free stack even NativeError stack is readonly
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should pretend to be a native code
Has  Magic Number Test

======================================

Test:  should make sure that new Promise is instance of Promise
Has  Magic Number Test

======================================

Test:  should allow subclassing without Symbol.species
Has  Exception Handling

======================================

Test:  should allow subclassing without Symbol.species if properties are copied (SystemJS case)
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should allow subclassing with Symbol.species
Has  Exception Handling

======================================

Test:  should allow subclassing with own then
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  Symbol.species should return ZoneAwarePromise
Has  Exception Handling

======================================

Test:  should intercept scheduling of resolution and then
Has  Exception Handling

======================================

Test:  should allow sync resolution of promises
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should allow sync resolution of promises returning promises
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should work with .then
Has  Exception Handling

======================================

Test:  should work with .finally with resolved promise
Has  Magic Number Test

======================================

Test:  should work with .finally with rejected promise
Has  Magic Number Test

======================================

Test:  should work with Promise.resolve
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should work with Promise.reject
Has  Magic Number Test

======================================

Test:  should reject and recover promise
Has  Exception Handling

======================================

Test:  should reject if chained promise does not catch promise
Has  Exception Handling

======================================

Test:  should notify Zone.onHandleError if no one catches promise
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should resolve the value
Has  Exception Handling

======================================

Test:  should resolve the value
Has  Exception Handling

======================================

Test:  should resolve with the sync then operation
Has  Exception Handling

======================================

Test:  should resolve generators
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should reject if the Promise subclass rejects
Has  Exception Handling

======================================

Test:  should resolve if the Promise subclass resolves
Has  Conditional Test Logic
Has  Unknown Test

======================================

Test:  undefined parameters
Has  Exception Handling

======================================

Test:  invalid iterable
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  empty parameters
Has  Exception Handling

======================================

Test:  non promises parameters
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  mixed parameters, non promise first
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  mixed parameters, promise first
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  all ok promises
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  all promises, first rejected
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  all promises, second rejected
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  all rejected promises
Has  Exception Handling

======================================

Test:  no promise values
Has  Exception Handling

======================================

Test:  all fulfilled
Has  Exception Handling

======================================

Test:  all rejected
Has  Exception Handling

======================================

Test:  mixed
Has  Exception Handling

======================================

Test:  mixed should in zone
Has  Exception Handling

======================================

Test:  poisoned .then
Has  Exception Handling

======================================

Test:  invoke the subclass
Has  Magic Number Test

======================================

Test:  should ignore second resolve
Has  Exception Handling

======================================

Test:  should ignore second resolve
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should ignore second reject
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should ignore resolve after reject
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should ignore reject after resolve
Has  Exception Handling

======================================

Test:  should resolve
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should reject
Has  Exception Handling

======================================

Test:  is untested for node as the fetch implementation is experimental
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should work for text response
Has  Exception Handling

======================================

Test:  should work for json response
Has  Exception Handling

======================================

Test:  should work for blob response
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should work for arrayBuffer response
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should throw error when send crendential
Has  Exception Handling

======================================

Test:  fetch should be considered as macroTask
Has  Exception Handling

======================================

Test:  Response.json() should be considered as macroTask
Has  Exception Handling

======================================

Test:  cancel fetch should invoke onCancelTask
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  cancel fetchTask should trigger abort
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should execute microtasks enqueued in the root zone
Has  Magic Number Test

======================================

Test:  should correctly scheduleMacroTask microtasks vs macrotasks
Has  Magic Number Test

======================================

Test:  should execute Promise wrapCallback in the zone where they are scheduled
Has  Exception Handling

======================================

Test:  undefined
Has  Exception Handling

======================================

Test:  should go through scheduleTask
Has  Exception Handling

======================================

Test:  should notify Zone.onHandleError if promise is uncaught
Has  Exception Handling

======================================

Test:  should print original information when a primitive value is used for rejection
Has  Magic Number Test

======================================

Test:  should work with setInterval
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not cancel the task after invoke the setInterval callback
Has  Magic Number Test

======================================

Test:  should intercept setTimeout
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should allow canceling of fns registered with setTimeout
Has  Magic Number Test

======================================

Test:  should allow cancelation of fns registered with setTimeout after invocation
Has  Magic Number Test

======================================

Test:  should allow cancelation of fns while the task is being executed
Has  Unknown Test

======================================

Test:  should allow cancelation of fns registered with setTimeout during invocation
Has  Unknown Test

======================================

Test:  should return the original timeout Id
Has  Conditional Test Logic

======================================

Test:  should allow cancelation by numeric timeout Id
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should pass invalid values through
Has  Unknown Test

======================================

Test:  task should transit from scheduling to unknown when zoneSpec onScheduleTask callback throw error
Has  Exception Handling

======================================

Test:  task should transit from running to scheduled when task.callback throw error
Has  Exception Handling

======================================

Test:  task should transit from canceling to unknown when zoneSpec.onCancelTask throw error before task running
Has  Exception Handling

======================================

Test:  task should transit from canceling to unknown when zoneSpec.onCancelTask throw error in running state
Has  Exception Handling

======================================

Test:  task should transit from notScheduled to scheduled if zoneSpec.onHasTask throw error when scheduleTask
Has  Exception Handling

======================================

Test:  task should transit to notScheduled state if zoneSpec.onHasTask throw error when task is canceled
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  task should transit from scheduling to unknown when zoneSpec onScheduleTask callback throw error
Has  Exception Handling

======================================

Test:  task should transit from running to noScheduled when task.callback throw error
Has  Exception Handling

======================================

Test:  task should transit from canceling to unknown when zoneSpec.onCancelTask throw error before task running
Has  Exception Handling

======================================

Test:  task should transit from canceling to unknown when zoneSpec.onCancelTask throw error in running state
Has  Exception Handling

======================================

Test:  task should transit from notScheduled to scheduling then to scheduled if zoneSpec.onHasTask throw error when scheduleTask
Has  Exception Handling

======================================

Test:  task should transit to notScheduled state if zoneSpec.onHasTask throw error after task.callback being invoked
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  task should transit to notScheduled state if zoneSpec.onHasTask throw error when task is canceled before running
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  task should transit from scheduling to unknown when zoneSpec onScheduleTask callback throw error
Has  Exception Handling

======================================

Test:  task should transit from running to scheduled when task.callback throw error
Has  Exception Handling

======================================

Test:  task should transit from canceling to unknown when zoneSpec.onCancelTask throw error before task running
Has  Exception Handling

======================================

Test:  task should transit from canceling to unknown when zoneSpec.onCancelTask throw error in running state
Has  Exception Handling

======================================

Test:  task should transit from notScheduled to scheduled if zoneSpec.onHasTask throw error when scheduleTask
Has  Exception Handling

======================================

Test:  task should transit to notScheduled state if zoneSpec.onHasTask throw error when task is canceled
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  task should transit from scheduling to unknown when zoneSpec onScheduleTask callback throw error
Has  Exception Handling

======================================

Test:  task should transit from running to notScheduled when task.callback throw error
Has  Exception Handling

======================================

Test:  task should transit from notScheduled to scheduling then to scheduled if zoneSpec.onHasTask throw error when scheduleTask
Has  Exception Handling

======================================

Test:  task should transit to notScheduled state if zoneSpec.onHasTask throw error after task.callback being invoked
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should not throw error if Promise is not a function
Has  Exception Handling

======================================

Test:  MutationObserver toString should be the same with native version
Has  Conditional Test Logic

======================================

Test:  should return handleId.toString if handleId is available
Has  Conditional Test Logic
Has  Exception Handling

======================================

Test:  should patch target where the method is defined
Has  Magic Number Test

======================================

Test:  should not patch property which is not configurable
Has  Conditional Test Logic

======================================

Test:  should patch target if it overrides a patched method
Has  Magic Number Test

======================================

Test:  should not patch target if does not override a patched method
Has  Magic Number Test

======================================

Test:  non configurable property desc should be patched
Has  Magic Number Test

======================================

Test:  non writable property desc should not be patched
Has  Magic Number Test

======================================

Test:  readonly property desc should not be patched
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  non writable method should not be patched
Has  Magic Number Test

======================================

Test:  readonly method should not be patched
Has  Magic Number Test

======================================

Test:  should throw if argument is not a function
Has  Magic Number Test

======================================

Test:  should prevent double cancellation
Has  Exception Handling

======================================

Test:  should not throw when all is OK
Has  Unknown Test

======================================

Test:  should throw error if ZoneAwarePromise has been overwritten
Has  Exception Handling

======================================

Test:  bluebird promise then method should be in zone and treated as microTask
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise catch method should be in zone and treated as microTask
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise spread method should be in zone
Has  Magic Number Test

======================================

Test:  bluebird promise finally method should be in zone
Has  Magic Number Test

======================================

Test:  bluebird promise join method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise try method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise method method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise resolve method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise reject method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise all method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise props method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise any method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise some method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise map method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise reduce method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise filter method should be in zone
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise each method should be in zone
Has  Exception Handling

======================================

Test:  bluebird promise mapSeries method should be in zone
Has  Exception Handling

======================================

Test:  bluebird promise race method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise using/disposer method should be in zone
Has  Exception Handling

======================================

Test:  bluebird promise promisify method should be in zone and treated as microTask
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise promisifyAll method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise fromCallback method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise delay method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise timeout method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise tap method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise call method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise get method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise return method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise throw method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise catchReturn method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise catchThrow method should be in zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  bluebird promise reflect method should be in zone
Has  Conditional Test Logic

======================================

Test:  bluebird should be able to run into different zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should be able to chain promise
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should catch rejected chained bluebird promise
Has  Exception Handling

======================================

Test:  should catch rejected chained global promise
Has  Exception Handling

======================================

Test:  should catch rejected bluebird promise
Has  Exception Handling

======================================

Test:  should catch rejected global promise
Has  Exception Handling

======================================

Test:  cordova.exec() should be patched as macroTask
Has  Conditional Test Logic

======================================

Test:  should cope with pending tests, which have no test body
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should wait for promise to resolve
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  it
Has  Unknown Test

======================================

Test:  test
Has  Unknown Test

======================================

Test:  it
Has  Unknown Test

======================================

Test:  it with done
Has  Unknown Test

======================================

Test:  test
Has  Unknown Test

======================================

Test:  setSystemTime should set FakeDate.currentFakeTime
Has  Magic Number Test

======================================

Test:  runAllTicks should run all microTasks
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  runAllTimers should run all macroTasks
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  advanceTimersByTime should act as tick
Has  Magic Number Test

======================================

Test:  runOnlyPendingTimers should run all macroTasks and ignore new spawn macroTasks
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  advanceTimersToNextTimer should trigger correctly
Has  Magic Number Test

======================================

Test:  clearAllTimers should clear all macroTasks
Has  Magic Number Test

======================================

Test:  getTimerCount should get the count of macroTasks correctly
Has  Magic Number Test

======================================

Test:  runAllTicks should run all microTasks
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  runAllTimers should run all macroTasks
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  advanceTimersByTime should act as tick
Has  Magic Number Test

======================================

Test:  runOnlyPendingTimers should run all macroTasks and ignore new spawn macroTasks
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  advanceTimersToNextTimer should trigger correctly
Has  Magic Number Test

======================================

Test:  clearAllTimers should clear all macroTasks
Has  Magic Number Test

======================================

Test:  getTimerCount should get the count of macroTasks correctly
Has  Magic Number Test

======================================

Test:  setSystemTime should set FakeDate.currentRealTime
Has  Magic Number Test

======================================

Test:  runAllTicks should run all microTasks
Has  Magic Number Test

======================================

Test:  runAllTimers should run all macroTasks
Has  Magic Number Test

======================================

Test:  advanceTimersByTime should act as tick
Has  Magic Number Test

======================================

Test:  advanceTimersToNextTimer should trigger correctly
Has  Magic Number Test

======================================

Test:  clearAllTimers should clear all macroTasks
Has  Magic Number Test

======================================

Test:  getTimerCount should get the count of macroTasks correctly
Has  Magic Number Test

======================================

Test:  test
Has  Unknown Test

======================================

Test:  should wait for promise to resolve
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should support prepareStackTrace
Has  Magic Number Test

======================================

Test:  should not add additional stacktrace from Zone when use prepareStackTrace
Has  Magic Number Test

======================================

Test:  console methods should run in root zone
Has  Exception Handling
Has  Redundant Print

======================================

Test:  crypto randomBytes method should be patched as tasks
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  crypto pbkdf2 method should be patched as tasks
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should register listeners in the current zone
Has  Magic Number Test

======================================

Test:  should remove listeners properly
Has  Unknown Test

======================================

Test:  should remove listeners by calling off properly
Has  Unknown Test

======================================

Test:  should remove All listeners properly
Has  Magic Number Test

======================================

Test:  remove All listeners should return event emitter
Has  Magic Number Test

======================================

Test:  should remove All listeners properly even without a type parameter
Has  Magic Number Test

======================================

Test:  should remove once listener after emit
Has  Magic Number Test

======================================

Test:  should remove once listener properly before listener triggered
Has  Unknown Test

======================================

Test:  should trigger removeListener when remove all listeners with eventname 
Has  Magic Number Test

======================================

Test:  should trigger removeListener when remove all listeners without eventname
Has  Magic Number Test

======================================

Test:  should not enter endless loop when register uncaughtException to process
Has  Unknown Test

======================================

Test:  should be able to addEventListener with symbol eventName
Has  Magic Number Test

======================================

Test:  fs.watchFile has been patched as eventTask
Has  Magic Number Test

======================================

Test:  fs.exists should work with util.promisify
Has  Exception Handling

======================================

Test:  fs.realpath should work with util.promisify
Has  Exception Handling

======================================

Test:  fs.realpath.native should work with util.promisify
Has  Exception Handling

======================================

Test:  fs.read should work with util.promisify
Has  Exception Handling

======================================

Test:  fs.write should work with util.promisify
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  http.request should be patched as eventTask
Has  Magic Number Test

======================================

Test:  process.nextTick should be executed before macroTask and promise
Has  Magic Number Test

======================================

Test:  process.nextTick should be treated as microTask
Has  Magic Number Test

======================================

Test:  should support process.on(rejectionHandled)
Has  Exception Handling

======================================

Test:  should support multiple process.on(unhandledRejection)
Has  Magic Number Test

======================================

Test:  util.promisify should work with setTimeout
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  util.promisify should work with setImmediate
Has  Exception Handling

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  undefined
Has  Magic Number Test

======================================

Test:  should contain all files
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should bind EventTarget.addEventListener
Has  Magic Number Test

======================================

Test:  should bind onEventType listeners
Has  Magic Number Test

======================================

Test:  should bind EventTarget.addEventListener
Has  Conditional Test Logic

======================================

Test:  should bind onEventType listeners
Has  Conditional Test Logic

======================================

Test:  should bind EventTarget.addEventListener
Has  Magic Number Test

======================================

Test:  should bind onEventType listeners
Has  Magic Number Test

======================================

Test:  audit func callback should run in the correct zone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  buffer func callback should run in the correct zone
Has  Conditional Test Logic

======================================

Test:  bufferCount func callback should run in the correct zone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  bufferTime func callback should run in the correct zone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  bufferToggle func callback should run in the correct zone
Has  Conditional Test Logic

======================================

Test:  bufferWhen func callback should run in the correct zone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  catch func callback should run in the correct zone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  retry func callback should run in the correct zone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  elementAt func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  every func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  filter func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  find func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  findIndex func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  first func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  groupBy func callback should run in the correct zone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  ignoreElements func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  isEmpty func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  last func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  map func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  mapTo func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  max func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  max with comparer func callback should run in the correct zone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  min func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  min with comparer func callback should run in the correct zone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  reduce func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  scan func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  repeat func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  single func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  skip func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  skipWhile func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  startWith func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  combineLatest func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  combineLatest func callback should run in the correct zone with project function
Has  Magic Number Test

======================================

Test:  concat func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  concatAll func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  concatMap func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  concatMapTo func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  count func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  debounce func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  debounceTime func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  delay func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  delayWhen func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  distinct func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  distinctUntilChanged func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  distinctUntilKeyChanged func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  do func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  pairwise func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  partition func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  pluck func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  expand func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  merge func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  mergeAll func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  mergeMap func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  mergeMapTo func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  switch func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  switchMap func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  switchMapTo func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  multicast func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  race func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  retryWhen func callback should run in the correct zone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  sample func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  take func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  takeLast func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  takeWhile func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  timeout func callback should run in the correct zone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  promise should run in the correct zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  window func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  windowCount func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  windowToggle func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  windowWhen func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  scheduler asap should run in correct zone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  scheduler asap error should run in correct zone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  combineLatest func should run in the correct zone
Has  Magic Number Test

======================================

Test:  combineLatest func with project function should run in the correct zone
Has  Magic Number Test

======================================

Test:  should run methods in the zone of declaration
Has  Magic Number Test

======================================

Test:  should run in the zone when subscribe is called to the same Subject
Has  Magic Number Test

======================================

Test:  concat func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  concat func callback should run in the correct zone with scheduler
Has  Magic Number Test

======================================

Test:  defer func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  forkjoin func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  forkjoin func callback with selector should run in the correct zone
Has  Magic Number Test

======================================

Test:  from array should run in the correct zone
Has  Magic Number Test

======================================

Test:  from promise object should run in the correct zone
Has  Magic Number Test

======================================

Test:  fromPromise func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  interval func callback should run in the correct zone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  never func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  of func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  range func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  range func callback should run in the correct zone with scheduler
Has  Magic Number Test

======================================

Test:  should retry max 3 times
Has  Magic Number Test

======================================

Test:  timer func callback should run in the correct zone
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  zip func callback should run in the correct zone
Has  Magic Number Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should call finish after a setTimeout is done
Has  Magic Number Test

======================================

Test:  should call finish after microtasks are done
Has  Exception Handling

======================================

Test:  should call finish after both micro and macrotasks are done
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should call finish after both macro and microtasks are done
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should not call done multiple times in sync test
Has  Magic Number Test

======================================

Test:  should not call done multiple times in async test with nested zone
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  undefined
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should call finish after an event task is done asynchronously
Has  Magic Number Test

======================================

Test:  should wait for XHRs to complete
Has  Conditional Test Logic

======================================

Test:  should fail if an xhr fails
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should not fail if setInterval is used and canceled
Has  Unknown Test

======================================

Test:  should fail if an error is thrown asynchronously
Has  Magic Number Test

======================================

Test:  should be able to detect non zone aware async task in promise
Has  Conditional Test Logic
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should automatically done after async tasks finished
Has  Magic Number Test

======================================

Test:  should automatically done after all nested async tasks finished
Has  Magic Number Test

======================================

Test:  should automatically done after multiple async tasks finished
Has  Magic Number Test

======================================

Test:  should automatically done after async tasks finished
Has  Magic Number Test

======================================

Test:  should automatically done after async tasks finished
Has  Magic Number Test

======================================

Test:  should automatically done after all nested async tasks finished
Has  Magic Number Test

======================================

Test:  should automatically done after multiple async tasks finished
Has  Magic Number Test

======================================

Test:  should automatically done after async tasks finished
Has  Magic Number Test

======================================

Test:  should automatically done after async tasks finished
Has  Magic Number Test

======================================

Test:  should get date diff correctly
Has  Magic Number Test

======================================

Test:  should tick correctly
Has  Magic Number Test

======================================

Test:  should mock date correctly
Has  Magic Number Test

======================================

Test:  should handle new Date correctly
Has  Magic Number Test

======================================

Test:  should handle setTimeout correctly
Has  Magic Number Test

======================================

Test:  should tick correctly
Has  Magic Number Test

======================================

Test:  should tick correctly without fakeAsync
Has  Magic Number Test

======================================

Test:  should mock date correctly
Has  Magic Number Test

======================================

Test:  should mock date correctly without fakeAsync
Has  Magic Number Test

======================================

Test:  should handle new Date correctly
Has  Magic Number Test

======================================

Test:  should handle new Date correctly without fakeAsync
Has  Magic Number Test

======================================

Test:  should handle setTimeout correctly
Has  Magic Number Test

======================================

Test:  should handle setTimeout correctly without fakeAsync
Has  Magic Number Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should run
Has  Exception Handling

======================================

Test:  should rethrow the exception on flushMicroTasks for error thrown in Promise callback
Has  Exception Handling

======================================

Test:  should run chained thens
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should run Promise created in Promise
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should run queued zero duration timer on zero tick
Has  Magic Number Test

======================================

Test:  should default to processNewMacroTasksSynchronously if providing other flags
Has  Magic Number Test

======================================

Test:  should not queue new macro task on tick with processNewMacroTasksSynchronously=false
Has  Magic Number Test

======================================

Test:  should run queued timer after sufficient clock ticks
Has  Magic Number Test

======================================

Test:  should run doTick callback even if no work ran
Has  Magic Number Test

======================================

Test:  should run queued timer created by timer callback
Has  Magic Number Test

======================================

Test:  should run queued timer only once
Has  Magic Number Test

======================================

Test:  should not run cancelled timer
Has  Magic Number Test

======================================

Test:  should clear internal timerId cache
Has  Magic Number Test

======================================

Test:  should run periodic timers
Has  Magic Number Test

======================================

Test:  should pass arguments to periodic timers
Has  Magic Number Test

======================================

Test:  should not run cancelled periodic timer
Has  Magic Number Test

======================================

Test:  should be able to cancel periodic timers from a callback
Has  Magic Number Test

======================================

Test:  should process microtasks before timers
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should process micro-tasks created in timers before next timers
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should throw the exception from tick for error thrown in timer callback
Has  Magic Number Test

======================================

Test:  should throw the exception from tick for error thrown in periodic timer callback
Has  Magic Number Test

======================================

Test:  should be able to resume processing timer callbacks after handling an error
Has  Magic Number Test

======================================

Test:  should flush all pending timers
Has  Magic Number Test

======================================

Test:  should flush nested timers
Has  Magic Number Test

======================================

Test:  should advance intervals
Has  Magic Number Test

======================================

Test:  should not wait for intervals
Has  Magic Number Test

======================================

Test:  should process micro-tasks created in timers before next timers
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should throw the exception from tick for error thrown in timer callback
Has  Magic Number Test

======================================

Test:  accepts a custom limit
Has  Magic Number Test

======================================

Test:  can flush periodic timers if flushPeriodic is true
Has  Magic Number Test

======================================

Test:  can flush multiple periodic timers if flushPeriodic is true
Has  Magic Number Test

======================================

Test:  can flush till the last periodic task is processed
Has  Magic Number Test

======================================

Test:  should schedule a requestAnimationFrame with timeout of 16ms
Has  Magic Number Test

======================================

Test:  does not count as a pending timer
Has  Magic Number Test

======================================

Test:  should cancel a scheduled requestAnimationFrame
Has  Magic Number Test

======================================

Test:  is not flushed when flushPeriodic is false
Has  Magic Number Test

======================================

Test:  is flushed when flushPeriodic is true
Has  Magic Number Test

======================================

Test:  should pass timestamp as parameter
Has  Magic Number Test

======================================

Test:  should throw an exception if an XHR is initiated in the zone
Has  Conditional Test Logic

======================================

Test:  should be able to schedule microTask with additional arguments
Has  Conditional Test Logic

======================================

Test:  should support custom non perodic macroTask
Has  Magic Number Test

======================================

Test:  should support custom non perodic macroTask by global flag
Has  Magic Number Test

======================================

Test:  should support custom perodic macroTask
Has  Magic Number Test

======================================

Test:  should wait for promise to resolve
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should get date diff correctly
Has  Magic Number Test

======================================

Test:  should new Date with parameter correctly
Has  Magic Number Test

======================================

Test:  should get Date.UTC() correctly
Has  Magic Number Test

======================================

Test:  should call Date.parse() correctly
Has  Magic Number Test

======================================

Test:  should get date diff correctly
Has  Magic Number Test

======================================

Test:  should flush microtasks before returning
Has  Exception Handling

======================================

Test:  should run asynchronous code
Has  Exception Handling

======================================

Test:  should run chained thens
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should run Promise created in Promise
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should complain if the test throws an exception during async calls
Has  Exception Handling

======================================

Test:  should run queued zero duration timer on zero tick
Has  Magic Number Test

======================================

Test:  should run queued timer after sufficient clock ticks
Has  Magic Number Test

======================================

Test:  should run queued timer only once
Has  Magic Number Test

======================================

Test:  should not run cancelled timer
Has  Magic Number Test

======================================

Test:  should throw an error on dangling timers
Has  Magic Number Test

======================================

Test:  should throw an error on dangling periodic timers
Has  Magic Number Test

======================================

Test:  should run periodic timers
Has  Magic Number Test

======================================

Test:  should not run cancelled periodic timer
Has  Magic Number Test

======================================

Test:  should be able to cancel periodic timers from a callback
Has  Magic Number Test

======================================

Test:  should clear periodic timers
Has  Magic Number Test

======================================

Test:  should process microtasks before timers
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should process micro-tasks created in timers before next timers
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should flush tasks
Has  Magic Number Test

======================================

Test:  should flush multiple tasks
Has  Magic Number Test

======================================

Test:  should move periodic tasks
Has  Magic Number Test

======================================

Test:  should get date diff correctly
Has  Magic Number Test

======================================

Test:  should new Date with parameter correctly
Has  Magic Number Test

======================================

Test:  should get Date.UTC() correctly
Has  Magic Number Test

======================================

Test:  should call Date.parse() correctly
Has  Magic Number Test

======================================

Test:  should allow fakeAsync zone to retroactively set a zoneSpec outside of fakeAsync
Has  Exception Handling

======================================

Test:  should produce long stack traces
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should produce long stack traces for optimized eventTask
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should not overwrite long stack traces data for different optimized eventTasks
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should produce long stack traces when has uncaught error in promise
Has  Exception Handling
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should produce long stack traces when handling error in promise
Has  Exception Handling
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should not produce long stack traces if Error.stackTraceLimit = 0
Has  Conditional Test Logic
Has  Magic Number Test
Has  Unknown Test

======================================

Test:  should assert that it is in or out of ProxyZone
Has  Conditional Test Logic

======================================

Test:  should trigger hasTask when invoke
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should fail on Promise.then
Has  Exception Handling

======================================

Test:  should fail on setTimeout
Has  Magic Number Test

======================================

Test:  should work with event tasks
Has  Exception Handling
Has  Magic Number Test

======================================

Test:  should pass
Has  EmptyTest
Has  Unknown Test

======================================

Test:  should track tasks
Has  Conditional Test Logic
Has  Magic Number Test

======================================

Test:  should capture task creation stacktrace
Has  Magic Number Test

======================================

Test:  should track periodic task until it is canceled
Has  Magic Number Test

======================================

Statistics:
Conditional Test Logic : 514
EmptyTest : 158
Exception Handling : 601
Magic Number Test : 4984
Unknown Test : 1462
Redundant Print : 6
Sleepy Test : 0

Tests with smells:
should display proper breadcrumb structure based on navigation state
should display breadcrumb links when navigation item has got path
should call clipboard service when clicked on copy source code
should not copy lines marked as deleted when code snippet contains diff
should display provided navigation structure
should emit linkClicked when user clicked on link
undefined
should display items to provided level
should navigate to active item when user pressed Enter
should display list of the search results when results exist
should render items when tableOfContentItems has value
should append level class to element
should display example viewer in multi file mode when user clicks expand
should render Icon component when content has <docs-icon> element
should render Breadcrumb component when content has <docs-breadcrumb> element
should render ToC
should set file extensions as tab names when all files have different extension
should generate correct code content for multi file mode when it is expanded
should set file names as tab names when there is at least one duplication
should call clipboard service when clicked on copy example link
should docsClickOutside be emitted when user click outside `content` element
should render description correctly
should transform links
creates card containers containing multiple cards
properly shows the diff of two provided file paths
should create a nav container with all of the docs pills inside
should create a list item for each step
should create an iframe in a container
create an ordered list container around the docs-steps
should make the docs anchors unreachable by tab
increments when multiple duplicate header names are found
should be able to parse heading with a valid tag in a code block
should wrap lists in custom classes
should create an svg for each mermaid code block
should create table of content list with h2 and h3 when h2 and h3 headings exists
should not display in ToC h2,h3 without ids
should not display in ToC h2,h3 which are childrens of docs-example-viewer
should call scrollToPosition([0, 0]) once scrollToTop was invoked
should subscribe to window uncaught errors and report them
should report errors to analytics by dispatching `gtag` and `ga` events
should cope with the super handler throwing an error
should augment an error object with version info
should send a non-object, non-string error stringified to analytics
should render tabs based on filenames order
should change file content when clicking on an unselected tab
should not change file content when clicking on a selected tab
should change file content when clicking on unselected tab while creating a new file
start creating a new file, select an existing tab, should not change file content when return back on a new file tab
should not allow to delete a required file
should keep openFiles order
should not have hiddenFiles in openFiles on reveal and reset answer
should not have duplicate files in openFiles on reveal and reset answer
should keep openFiles order on reveal and reset answer
should fetch tutorial source code and config and set signals
should throw an error if the tutorial files cannot be fetched
should not set shouldReinstallDependencies if project did not change
should trigger shouldReInstallDependencies if new metadata has different dependencies
should trigger shouldReInstallDependencies if new metadata has dependencies and previous dependencies were empty
should not trigger shouldReInstallDependencies if new metadata has same dependencies
should set files to delete on project change if previous project has unused files
should set no files to delete on project change if previous project has same files as new project
should not set files to delete if project did not change
should set error message when install dependencies resolve exitCode not equal to 0
should delete files on project change
should set iframe src on init
should render the correct loading element based on loadingStep
should return true when user try to execute allowed commands
should call resizeToFitParent on window resize
should read files from directory when a glob pattern is found
should only contain type definitions files
should skip library if its package.json can not be found
should render list of all APIs of provided group
should display deprecated icon for deprecated API
should display star icon for featured API
should render tabs for all elements with tab attribute
should display members cards when API tab is active
should display both Deprecated and Non-deprecated APIs when includeDeprecated toggle is set to true
should display both Non-deprecated APIs when includeDeprecated toggle is set to false
should display only items which contains provided query when query is not empty
should display only class items when user selects Class in the Type select
should reset the reveal answer
should reveal the answer on button click
should not reveal the answer when button is disabled
should verify paths
should hide/show content
should resolve and display promise
should work properly
should list out the current collection of items
works
times out with a list of tasks
should work with ngOnChanges
should populate the UI with initial values
should update the validation status
should add inputs programmatically
should set the value programmatically
should show the error when name is invalid
should set the value when changing the domain model
update model and other buttons as the UI value changes
should populate the initial selection
should update the model when the value changes in the UI
should initially select the placeholder option
should update the domain model as you type
should report the validity correctly
testing a guard
does something
has a test
also has a test
has another test
uses the db
should render the `ng2-heroes` component
should render 3 ng1-hero components
should remove a hero when the "Remove" button is pressed
should initially not render the heroes
should toggle the heroes when clicking the "show/hide" button
should add a new hero when clicking the "add" button
should remove a hero when clicking its "remove" button
should correctly bootstrap multiple downgraded modules
should be open
should be closed
should log animation events
should be inactive with a blue background
should be active with an orange background
should remove the hero from the list when clicked
should filter down the list when a search is performed
should display an Aria button
should be able to select green highlight
should have 10 lists each containing the string Teapot
should have button
unauthorized user should have multiple unauthorized heroes
unauthorized user should have no secret heroes
unauthorized user should have no authorized heroes listed
authorized user should have multiple authorized heroes 
authorized user should have multiple authorized heroes with tree-shakeable HeroesService
authorized user should have secret heroes
authorized user should have no unauthorized heroes listed
should submit form
should hide the item img
should have form buttons
should have error at start
should have disabled submit button
should produce "required" error after clearing name
should produce "at least 4 characters" error when name="x"
resetting name to valid name again should clear errors
should hide form after submit
should produce "no bob" error after setting name to "Bobby"
should be ok again with valid name
should display correct title
should display the ICU plural expression
should display the ICU select expression
should display the nested expression
should add 123 to the parent list
should delete item
should log buy the item
should save item for later
should display Current customer: Maria
should display The sum of 1 + 1 is not 4.
should display Expression Context
should display a list of customers
should open correctly
should show 4 heroes
should be able to chain and compose pipes
should support flying heroes (pure) 
should support flying heroes (impure) 
should show an async hero message
should display four phone pictures
should display Disabled button
should display Binding to a property of a directive
should display blue
should display Your item is: lamp
should display Your item is: parentItem
should display a ul
should display a ul containing phone
should display Malicious content
should add an alias field when the Add Alias button is clicked
should update the displayed form value when form inputs are updated
shows basic flower emoji
shows basic leaf emoji
shows tulip in host child
saves changed crisis details
saves changed hero details
sees preloaded modules
sees the secondary route
should display Crisis Center button
should display Heroes button
should show a list of links
should create component
has top heroes
can switch to Heroes view
displays correctly styled buttons
first div should show hero name with *ngIf
first li should show hero name with *ngFor
ngSwitch have two <happy-hero> instances
should toggle *ngIf="hero" with a button
appUnless should show 3 paragraph (A)s and (B)s at the start
appUnless should show 1 paragraph (B) after toggling condition
should log a Calling 123 ... message
should be able to use interpolation with a calculation
should two-way bind to sizer
should navigate to "Dashboard" immediately
should navigate to "About" on click
should navigate to "About" w/ browser location URL change
should navigate to "Heroes" on click
can navigate to "Heroes" w/ browser location URL change
can get RouterLinks from template
can click Heroes link in template
should NOT have heroes before calling OnInit
should NOT have heroes immediately after OnInit
should HAVE heroes after HeroService gets them
should HAVE heroes
should DISPLAY heroes
should run normal test
should run normal async test
should run async test with task
should run async test with successful promise
should run async test with failed promise
should run async test with successful delayed Observable
should run timeout callback with delay after call tick with millis
should run new macro task callback with delay after call tick with millis
should not run new macro task callback with delay after call tick with millis
should get Date diff correctly in fakeAsync
should get Date diff correctly in fakeAsync with rxjs scheduler
should auto enter fakeAsync
should wait until promise.then is called
#getPromiseValue should return value from a promise
#getValue should return stubbed value from a spy
test should wait for ValueService.getPromiseValue
should allow the use of fakeAsync
should create a nested component bound to inputs/outputs
should support entering text in input box (ngModel)
can examine attached directives and listeners
can access template local variables as references
child component called OnChanges once
changed parent value flows to child
changed child value flows to parent
should have called `getHero`
should save stub hero change
should display 1st hero's name
should display heroes
should navigate to selected hero detail on click
should return expected heroes (HttpClient called once)
should be OK returning no heroes
should turn 404 into a user-friendly error
should return expected heroes (called multiple times)
should turn 404 error into user-facing error
can test multiple requests
can test for 404 error
should be able to generate blob data from canvas
should have three highlighted elements
should have `HighlightDirective` in 1st <h2> providerTokens
should change font size texts
emits inspector event
should emit a selectedFrame when emitSelectedFrame is called
should emit getLatestComponentExplorerView event on refresh with view query no properties
should not call application operations view source if no frames are detected
should not call application operations view source if a frame is selected that does not have a unique url on the page
should call application operations view source if a frame is selected that has a unique url on the page
should not call application operations select dom element if no frames are detected
should not call application operations select dom element if a frame is selected that does not have a unique url on the page
should call application operations select dom element if a frame is selected that has a unique url on the page
should not call application operations inspect if no frames are detected
should not call application operations inspect if a frame is selected that does not have a unique url on the page
should call application operations inspect if a frame is selected that has a unique url on the page
should return new and old items
should not return comment nodes when not requested
should not break nesting with nested comment nodes
should index a forest
should register directive inputs, outputs, and state
should detect changes in the collection
should return empty filter if the query is invalid
should return proper result with duration
should return proper result with source
should return proper result with composite filters
should ignore invalid operators
should consider decimal values in durations queries with a ms suffix
should consider negation
should filter results with a source query
should filter results with a duration query
should work with composite selectors
should work with invalid arguments
should work with negation
should work with negation and composite expressions
add frame for simple case
add frame for deeply nested records
should merge frames when nesting matches
should merge frames when nesting does not match
calculates value with  no lifecycle hooks
calculates value with 0 change detection and existing lifecycle hooks
calculates value with non 0 change detection and one lifecycle hook
calculates value with non 0 change detection and multiple lifecycle hooks
has only components
has only directives
has a component and a directive
has a component and multiple directives
should calculate the framerate from passed duration
should add frame when contentScriptConnected event is emitted
should remove frame when contentScriptDisconnected event is emitted
should add event listeners to window on start inspecting
should remove event listeners from window on stop inspecting
should cancel events from mouse after start inspecting
should extract trees without structural directives
should skip nodes without directives
should go all the way to the root element to look up for nodes
should show hydration overlay with svg
should show hydration overlay without svg (too small)
should show hydration overlay and selected component overlay at the same time 
should show overlay
should work with empty queries
should collect not specified but existing props below level
both getters and setters should be readonly
should return the precise path requested
both setter and getter would get a (...) as preview
should recognize Ivy apps
should return true for empty arrays
should return true for arrays with equal value numbers
should return true for arrays with equal value strings
should return true for arrays with equal value booleans
should return false for arrays of different numbers
should return false for arrays of different strings
should return false for arrays of different booleans
should return false for arrays with different values
should return false for arrays with different lengths
should setup tab object in the tab manager
should set frame connection as enabled when an enableFrameConnection message is recieved
should pipe messages from the content script and devtools script to each other when the content script frame is enabled
should not pipe messages from the content script and devtools script to each other when the content script frame is disabled
should set backendReady when the contentPort recieves the backendReady message
should set tab.devtools to null when the devtoolsPort disconnects
should setup message and disconnect listeners on devtools and content script ports
should set the correct frame connection as enabled when an enableFrameConnection message is recieved
should pipe messages from the correct content script and devtools script when that content script frame is enabled
should properly query for greet components
should emit an event for the click output
should pass
should display "Hello Foo!" via name attribute
should work for update
should work for create
should work for ng2
should run for ng2
should render and interact to update and detect changes
should render and run noop change detection
should run create benchmark
should run update benchmark
should run detect changes benchmark
should work for createOnly
should work for destroy
should work for createDestroy
should work for detectChanges
should wait via frameworkStabilizer
should work
should load in the templateUrl relative to the my-cmp component
should load in the styleUrls relative to the my-cmp component
should map sources
should build the AST without any errors and warnings
should throw an error if not all offsets are between 0 and 1
should produce a balanced series of keyframes given a sequence of animate steps
should fill in missing starting steps when a starting `style()` value is not used
should merge successive style() calls together before an animate() call
should not merge in successive style() calls to the previous animate() keyframe
should not produce extra timelines when multiple sequences are used within each other
should create a new timeline after a sequence if group() or keyframe() commands are used within
should push the start of a sequence if a delay option is provided
should allow a float-based delay value to be used
should allow params to be substituted even if they are not defaulted in a reusable animation
should substitute in timing values
should allow multiple substitutions to occur within the same style value
should substitute in values that are defined as parameters for inner areas of a sequence
should substitute in values that are defined as parameters for reusable animations
should produce a sub timeline when `keyframes()` is used within a sequence
should propagate inner keyframe style data to the parent timeline if used afterwards
should feed in starting data into inner keyframes if used in an style step beforehand
should combine the starting time + the given delay as the delay value for the animated keyframes
should not leak in additional styles used later on after keyframe styles have already been declared
should respect offsets if provided directly within the style data
should respect offsets if provided directly within the style metadata type
should properly tally style data within a group() for use in a follow-up animate() step
should support groups with nested sequences
should respect delays after group entries
should respect delays after multiple calls to group()
should push the start of a group if a delay option is provided
should delay the query operation if a delay option is provided
should properly combine an easing value with a delay into a set of three keyframes
should allow easing values to exist for each animate() step
should produce a top-level timeline only for the duration that is set as before a group kicks in
should offset group() and keyframe() timelines with a delay which is the current time of the previous player when called
should create an empty animation if there are zero animation steps
should produce an animation from start to end between the to and from styles if there are animate steps in between
should produce an animation from start to end between the to and from styles if there are animate steps in between with an easing value
should group errors together for an animation trigger
should throw an error when a transition within a trigger contains an invalid expression
should throw an error if an animation alias is used that is not yet supported
should construct a trigger based on the states and transition data
should allow multiple state values to use the same styles
should find the first transition that matches
should find a transition with a `*` value
should support bi-directional transition expressions
should support multiple transition statements in one string
should support transition-level animation variable params
should substitute variable params provided directly within the transition match
should match `true` and `false` given boolean values
should match `1` and `0` given boolean values
should match `true` and `false` state styles on a `1 <=> 0` boolean transition given boolean values
should match `1` and `0` state styles on a `true <=> false` boolean transition given boolean values
should alias the :enter transition as void => *
should alias the :leave transition as * => void
should normalize number-based dimensional properties to use a `px` suffix if missing
should not normalize non-dimensional properties with `px` values, but only convert them to string
should allow `perspective` to be a numerical property
should animate a timeline
should normalize the style values that are animateTransitioned within an a timeline animation
should normalize `*` values
should invoke a transition based on a property change
should not queue an animation if the property value has not changed at all
should cleanup all inner state that's tied to an element once removed
should create and recreate a namespace for a host element with the same component source
should clear child node data when a parent node with leave transition is removed
should listen to the onStart operation for the animation
should listen to the onDone operation for the animation
should retain event listeners and call them for successive animation state changes
should only fire event listener changes for when the corresponding trigger changes state
should allow a listener to be deregistered, but only after a flush occurs
should trigger a listener callback with an AnimationEvent argument
should persist the styles on the element as actual styles once the animation is complete
should allow two animation transitions with different triggers to animate in parallel
should cancel a previously running animation when a follow-up transition kicks off on the same trigger
should pass in the previously running players into the follow-up transition player when cancelled
should cancel all existing players if a removal animation is set to occur
should default to using styling from the `*` state if a matching state is not found
should treat `void` as `void`
should normalize the style values that are animateTransitioned within an a transition animation
should throw an error when normalization fails within a transition animation
should still apply state-styling to an element even if it is not yet inserted into the DOM
should allow setting position before animation is started
should continue playing animations from setPosition
should getPosition of an empty group
should getPosition of a single player in a group
should getPosition based on the longest player in the group
should listen on start and done on the animation builder's player after it has been reset
should be able to build
should schedule a microtask and not call an async timeout
should merge descriptions
should merge all beginMeasure calls
should not force gc and mark the timeline
should force gc and mark the timeline
should mark and aggregate events in between the marks
should mark and aggregate events since navigationStart
should ignore navigationStart if ignoreNavigation is set
should restart timing
should loop and aggregate until the end mark is present
should store events after the end mark for the next call
should measure forced gc
should restart after the forced gc if needed
should calculate mean frame time
should throw if no start event
should throw if no end event
should throw if trying to capture twice
should throw if trying to capture when frame capture is disabled
should throw if frame capture is enabled, but nothing is captured
should calculate best and worst frame time
should calculate percentage of smoothness to be good
should calculate percentage of smoothness to be bad
should report a single interval
should sum up multiple intervals
should ignore not started intervals
should ignore not ended intervals
should ignore nested intervals
should ignore events from different processed as the start mark
should mark a run as invalid if the start and end marks are different
should support scriptTime metric
should support renderTime metric
should support renderTimeInScript metric
should support gcTime/gcAmount metric
should support majorGcTime metric
should support gcTimeInScript metric
should support pureScriptTime = scriptTime-gcTime-renderTime
should report received data since last navigationStart
should report count of requests sent since last navigationStart
should report micro metrics
should ignore micro metrics that were not specified
should report micro metric averages
should stop measuring when all properties have numeric values
should print the sample id, description and table header
should print a table row
should print the table footer and stats when there is a valid sample
should print the coefficient of variation only when it is meaningful
should write all data into a file
should reportMeasureValues to all
should reportSample to call
should set SampleDescription.id
should merge SampleDescription.description
should fill SampleDescription.metrics from the Metric
should provide Options.EXECUTE
should provide Options.PREPARE
should provide Options.MICRO_METRICS
should overwrite providers per sample call
should call the prepare and execute callbacks using WebDriverAdapter.waitFor
should call prepare, beginMeasure, execute, endMeasure for every iteration
should call execute, endMeasure for every iteration if there is no prepare callback
should only collect metrics for execute and ignore metrics from prepare
should call the validator for every execution and store the valid sample
should report the metric values
should calculate the mean
should calculate the standard deviation
should calculate the coefficient of variation
should calculate the regression slope
should return sampleSize and metric as description
should return null while the completeSample is smaller than the given size
should return null while the regression slope is < 0
should return the last sampleSize runs when the regression slope is ==0
should return the last sampleSize runs when the regression slope is >0
should return sampleSize as description
should return the last sampleSize runs when it has at least the given size
should provide the extension that matches the capabilities
should throw if there is no match
should force gc via window.gc()
should clear the perf logs and mark the timeline via performance.mark() on the first call
should mark the timeline via performance.mark() on the second call
should mark the timeline via performance.mark()
should mark the timeline via performance.mark() with start and end of a test
should normalize times to ms and forward ph and pid event properties
should normalize "tdur" to "dur"
should report FunctionCall events as "script"
should report EvaluateScript events as "script"
should report minor gc
should report minor gc with GC amount
should report major gc
should report major gc with GC amount
should ignore FunctionCalls from webdriver
should ignore FunctionCalls with empty scriptName
should report navigationStart
should report receivedData
should report sendRequest
should execute a dummy script before reading them
should report ImplThreadRenderingStats as frame event
should not report ImplThreadRenderingStats with zero frames
should throw when ImplThreadRenderingStats contains more than one frame
should report begin timestamps
should report end timestamps
should throw an error on buffer overflow
should mark the timeline via console.time()
should mark the timeline via console.timeEnd()
should mark the timeline via console.time() and console.timeEnd()
should report FunctionCall records as "script"
should report begin time
should walk children
with string params
with an array of string params
with number params
with an array of number params
with boolean params
with an array of boolean params
with an array of params of different types
that returns a stream of events
with a json body of 0
with body
without body
with properly set method and callback
emits status immediately
should be able to retry
handles a text response
handles a json response
handles a blank json response
handles a json error response
handles a json error response with XSSI prefix
handles a json string response
handles a json response with an XSSI prefix
handles a blob with a mime type
emits real errors via the error path
are emitted for download progress
include ResponseHeader with headers and status
from the response URL
from X-Request-URL header if the response URL is not present
falls back on Request.url if neither are available
by normalizing 0 status to 200 if a body is present
by leaving 0 status as 0 if a body is not present
handles a request with callback call wrapped in promise
handles an error response properly
prevents the script from executing when the request is cancelled
when request method is not JSONP
when response type is not json
when headers are set in request
when callback is never called
allows interceptors to inject HttpClient
should configure HttpClient
should not be enabled by default
should be enabled when using withJsonpSupport()
should have independent HTTP setups if not explicitly specified
should connect child to parent configuration if specified
withFetch
should not warn if fetch is not configured when running in a browser
should warn during SSR if fetch is not configured
handles numbers as json
accepts a falsy body
should stop storing HTTP calls in `TransferState` after application becomes stable
should skip cache when specified
should not cache headers
should cache with headers
should not cache POST by default
should cache POST with the transferCache option
should not cache request that requires authorization by default
should not cache request that requires proxy authorization by default
should cache POST with the differing body in string form
should cache POST with the differing body in object form
should cache POST with the differing body in URLSearchParams form
should skip storing in transfer cache when platform is browser
should cache because of global filter
should not cache because of global filter
should cache without headers because overridden
should cache normally when there is no mapping defined for the origin
avoids abort a request when fetch operation is completed
are emitted for upload progress
are emitted when both upload and download progress are available
are emitted even if length is not computable
do not cause headers to be re-parsed on main response
from XHR.responsesURL
from X-Request-URL header if XHR.responseURL is not present
does not re-parse if document.cookie has not changed
re-parses if document.cookie changes
throws if no request matches
throws if no request matches the exact parameters
throws if no request matches with several requests received
throws if there are open requests when verify is called
should clean up when the directive is destroyed
should add classes specified in an object literal
should add classes specified in an object literal without change in class names
should add and remove classes based on changes in object literal values
should add and remove classes based on changes to the expression object
should add and remove classes based on reference changes to the expression object
should remove active classes when expression evaluates to null
should remove active classes when expression evaluates to undefined
should allow multiple classes per expression
should split by one or more spaces between classes
should add classes specified in a list literal
should add and remove classes based on changes to the expression
should add and remove classes when a reference changes
should take initial classes into account when a reference changes
should ignore empty or blank class names
should trim blanks from class names
should allow multiple classes per item in arrays
should add and remove classes if the set instance changed
should add classes specified in a string literal
should remove active classes when switching from string to null
should remove active classes when switching from string to undefined
should take initial classes into account when switching from string to null
should take initial classes into account when switching from string to undefined
should ignore empty and blank strings
should co-operate with the class attribute
should co-operate with the interpolated class attribute
should co-operate with the interpolated class attribute when interpolation changes
should co-operate with the class attribute and binding to it
should co-operate with the class attribute and class.name binding
should co-operate with initial class and class attribute binding when binding changes
should not write to the native node unless the bound expression has changed
should not write to the native node when values are the same (obj reference change)
should not write to the native node when values are the same (array reference change)
should not add css class when bound initial class is removed by ngClass binding
should not add css class when static initial class is removed by ngClass binding
should mix class and ngClass bindings with the same value
should reflect initial elements
should reflect added elements
should reflect removed elements
should reflect moved elements
should reflect a mix of all changes (additions/removals/moves)
should iterate over an array of objects
should gracefully handle nulls
should gracefully handle ref changing to null and back
should works with duplicates
should repeat over nested arrays
should repeat over nested arrays with no intermediate element
should repeat over nested ngIf that are the last node in the ngFor template
should allow of saving the collection
should display indices correctly
should display count correctly
should display first item correctly
should display last item correctly
should display even items correctly
should display odd items correctly
should allow to use a custom template
should use a default template if a custom one is null
should use a custom template when both default and a custom one are present
should console.warn if trackBy is not a function
should track by identity when trackBy is to `null` or `undefined`
should update implicit local variable on view
should move items around and keep them updated 
should handle added and removed items properly when tracking by index
should be available as a standalone directive
should be available as a standalone directive using an `NgFor` alias
should work in a template attribute
should toggle node when condition changes
should handle nested if correctly
should update several nodes with if
should not add the element twice if the condition goes from truthy to truthy
should create `<link>` element when the image priority attr is true
should not create a preload `<link>` element when src is already preloaded.
should error when the number of preloaded images is larger than the limit
should not hit max preload limit when not on the server
should set `loading` and `fetchpriority` attributes before `src`
should throw if `ngSrc` contains a `blob:` URL
should throw for empty ngSrcSet
should throw for invalid ngSrcSet
should throw if ngSrcset exceeds the density cap
should throw if ngSrcset exceeds the density cap with multiple digits
should log a warning if the priority attribute is used too often
should warn if a large inline placeholder is supplied
should throw if the placeholder height exceeds the threshold
should throw if the placeholder width exceeds the threshold
should log a warning if there is no preconnect link for a priority image
should not log a warning if there is no preconnect link, but the image is not set as a priority
should log a warning if there is a preconnect, but it doesn't match the priority image
should log a warning if there is no matching preconnect link for a priority image, but there is a preload tag
should not log a warning if there is a matching preconnect link for a priority image (with an extra `/` at the end)
should warn if there is no image loader but using Imgix URL
should warn if there is no image loader but using ImageKit URL
should warn if there is no image loader but using Cloudinary URL
should warn if there is no image loader but using Netlify URL
should NOT warn if there is a custom loader but using CDN URL
should warn if there is no image loader but `ngSrcset` is present
should warn if there is no image loader but `loaderParams` is present
should set `src` using the image loader provided via the `IMAGE_LOADER` token to compose src URL
should use the image loader to update `src` if `ngSrc` updated
should use the image loader to update `srcset` if `ngSrc` updated
should pass absolute URLs defined in the `ngSrc` to custom image loaders provided via the `IMAGE_LOADER` token
should pass data payload from loaderParams to custom image loaders
should pass nested data payloads from loaderParams to custom image loaders
should pass data payload from loaderParams to loader when generating srcsets
should pass data payload from loaderParams to loader when generating responsive srcsets
should set `src` to an image URL that does not include a default width parameter
should display the template according to the exact value
should display the template according to the exact numeric value
should not throw when ngPluralCase contains expressions
should be applicable to <ng-container> elements
should display the template according to the category
should default to other when no matches are found
should prioritize value matches over category matches
should add styles specified in an object literal
should add and change styles specified in an object expression
should remove styles with a null expression
should remove styles with an undefined expression
should add and remove styles specified using style.unit notation
should add and remove styles which names are not dash-cased
should update styles using style.unit notation when unit changes
should change styles specified in an object expression
should remove styles when deleting a key in an object expression
should co-operate with the style attribute
should co-operate with the style.[styleName]="expr" special-case in the compiler
should correctly update style with units (.px) when the model is set to number
should handle CSS variables
should switch amongst when values
should switch amongst when values with fallback to default
should support multiple whens with the same value
should use === to match cases
should create the default case if there is no other case
should allow defaults before cases
should support nested NgSwitch on ng-container with ngTemplateOutlet
should accept the component as the context
should do nothing if templateRef is `null`
should insert content specified by TemplateRef
should clear content if TemplateRef becomes `null`
should swap content if TemplateRef changes
should display template if context is `null`
should reflect initial context and changes
should reflect user defined `$implicit` property in the context
should reflect context re-binding
should not try to update null / undefined context when context changes but template stays the same
should not try to update null / undefined context when template changes
should not try to update context on undefined view
should be able to specify an injector
should re-render if the injector changes
should override providers from parent component using custom injector
should support int
should format each component correctly
should format common multi component patterns
should format invalid in IE ISO date
should format invalid in Safari ISO date
should format correctly with iso strings that contain time
should not assume UTC for iso strings in Safari if the timezone is not defined
should remove bidi control characters
should not round fractional seconds
should return correct value for numbers
should throw if minFractionDigits is explicitly higher than maxFractionDigits
should return the correct format for es-US
should support non-normalized locales
should support any currency code name
should round to the default number of digits if no digitsInfo
should return the correct value
should return the full short list of days after manipulations
should return the full abbreviated list of month after manipulations
should return plural cases for the provided locale
should return the correct values for the "en" locale
should return the correct values for the "ro" locale
should return the correct values for the "sr" locale
should return the default value for a locale with no rule
should return plural category
should return discrete cases
should fallback to other when the case is not present
should report an error when the "other" category is not present
should construct an image loader with the given path
should load a low quality image when a placeholder is requested
should work after using location.historyGo()
should add registered functions to urlChangeListeners
should unregister a URL change listener and unsubscribe from URL changes when the root view is removed
should only notify listeners once when multiple listeners are registered
disposes
push URL
replace URL
push URL with state
replace URL with state
push URL with hashchange
replace URL with hashchange
push URL with info
replace URL with info
push URL with handler
replace URL with handler
deferred commit
deferred commit early resolve
deferred commit during dispatch throws
deferred commit with immediate throws
deferred commit twice throws
deferred commit resolves on finished
push with interruption
replace with interruption
push with handler reject
replace with reject
traverses back
traverses forward
traverses back with hashchange
traverses forward with hashchange
traverses with info
traverses with history state
traverses with handler
traverses with interruption
traverses with reject
traverses to non-existent
back
back with info
back out of bounds
forward
forward with info
forward out of bounds
traversal current entry
second traversal to same entry
queues traverses
queues traverses after navigate
push URL with history state
replace URL with history state
go back
go forward
go back with hashchange
go back with history state
go forward with hashchange
go with handler
go with interruption
go with reject
go synchronously
go out of bounds
go queues
go queues both directions
go queues with back
go queues with forward
go after synchronous navigate
should return the latest available value
should return same value when nothing has changed since the last call
should dispose of the existing subscription when subscribing to a new observable
should request a change detection check upon receiving a new value
should not track signal reads in subscriptions
should dispose of the existing subscription
should infer the type from the subscribable
should not support numbers
should support ISO string
should use "mediumDate" as the default format if no format is provided
should give precedence to the passed in format
should not support bad arguments
should be available as a standalone pipe
should return an empty text if value is null or undefined
should work with mutable objects
should transform a basic dictionary
should order by alpha
should order by numerical
should order by numerical and alpha
should reorder when compareFn changes
should transform a basic Map
should order by complex types with compareFn
should sort undefined keys to the end
should sort null keys to the end
should sort strings in alpha ascending
should sort numbers in numerical ascending
should sort boolean in false (0) -> true (1)
should sort numbers as strings in numerical ascending
should use the injected default currency code if none is provided
should warn if you are using the v4 signature
should support strings
should support lists
should support readonly lists
should not support other objects
should return null if the value is null
should return null if the value is undefined
should return all items after START index when START is positive and END is omitted
should return last START items when START is negative and END is omitted
should return all items between START and END index when START and END are positive
should return all items between START and END from the end when START and END are negative
should return an empty value if START is greater than END
should return an empty value if START greater than input length
should return entire input if START is negative and greater than input length
should not modify the input list
should work with mutable arrays
should still allow scrolling if scrollRestoration is not writable
should scroll when element with matching id is found
should scroll when anchor with matching name is found
should not scroll when no matching element is found
should scroll when element with matching id is found inside the shadow DOM
should scroll when anchor with matching name is found inside the shadow DOM
should support state
should provide common getters
path() should not break on numeric values
path() should allow using 0 as path
search() should accept object
search() should copy object
search() should remove multiple parameters
search() should accept numeric keys
search() should handle single value
hash() should accept numeric parameter
hash() should allow using 0
should set $$state and return itself
should set state
should allow to set both URL and state
should allow to mix state and various URL functions
should add registered functions to changeListeners
should visit every node
should tokenize a simple identifier
should tokenize "this"
should tokenize a dotted identifier
should tokenize a private identifier
should tokenize a property access with private identifier
should tokenize an operator
should tokenize an indexed operator
should tokenize a safe indexed operator
should tokenize numbers
should tokenize numbers within index ops
should tokenize simple quoted strings
should tokenize quoted strings with escaped quotes
should tokenize a string
should tokenize undefined
should ignore whitespace
should tokenize quoted string
should tokenize escaped quoted string
should tokenize unicode
should tokenize relation
should tokenize statements
should tokenize function invocation
should tokenize simple method invocations
should tokenize method invocation
should tokenize safe function invocation
should tokenize a safe method invocations
should tokenize number
should tokenize number with exponent
should return exception for invalid exponent
should tokenize number starting with a dot
should throw error on invalid unicode
should tokenize ?. as operator
should tokenize ?? as operator
should tokenize number with separator
should tokenize number starting with an underscore as an identifier
should throw error for invalid number separators
should parse numbers
should parse strings
should parse null
should parse undefined
should parse unary - and + expressions
should parse unary ! expressions
should parse postfix ! expression
should parse multiplicative expressions
should parse additive expressions
should parse relational expressions
should parse equality expressions
should parse strict equality expressions
should parse expressions
should parse grouped expressions
should ignore comments in expressions
should retain // in string literals
should parse an empty string
should parse array
should parse map
should only allow identifier, string, or keyword as map key
should parse property shorthand declarations
should not allow property shorthand declaration on quoted properties
should not infer invalid identifiers as shorthand property declarations
should parse field access
should error for private identifiers with implicit receiver
should only allow identifier or keyword as member names
should parse safe field access
should parse incomplete safe field accesses
should parse property writes
should recover on empty rvalues
should recover on incomplete rvalues
should recover on missing properties
should error on writes after a property write
should parse calls
should parse an EmptyExpr with a correct span for a trailing empty argument
should parse safe calls
should parse keyed reads
should parse safe keyed reads
should recover on missing keys
should recover on incomplete expression keys
should recover on unterminated keys
should recover on incomplete and unterminated keys
should parse keyed writes
should report on safe keyed writes
should error on writes after a keyed write
should recover on parenthesized empty rvalues
should parse ternary/conditional expressions
should report incorrect ternary operator syntax
should support field assignments
should report on safe field assignments
should support array updates
should error when using pipes
should report when encountering interpolation
should report an unexpected token
should report reasonable error for unconsumed tokens
should report a missing expected token
should parse pipes
should parse an incomplete pipe with a source span that includes trailing whitespace
should only allow identifier or keyword as formatter names
should not crash when prefix part is not tokenizable
should report chain expressions
should report assignment
should parse conditional expression
should ignore comments in bindings
should expose object shorthand information in AST
should parse key and value
should store the templateUrl
should report unexpected token when encountering interpolation
should not parse malformed interpolations as strings
should parse no prefix/suffix interpolation
should parse interpolation inside quotes
should parse interpolation with interpolation characters inside quotes
should parse interpolation with escaped quotes
should parse interpolation with escaped backslashes
should report empty interpolation expressions
should produce an empty expression ast for empty interpolations
should parse expression with newline characters
should support custom interpolation
should ignore comments in interpolation expressions
should retain // in single quote strings
should retain // in double quote strings
should ignore comments after string literals
should retain // in complex strings
should retain // in nested, unterminated strings
should ignore quotes inside a comment
should report when encountering pipes
should report when encountering field write
should throw if a pipe is used inside a conditional
should throw if a pipe is used inside a call
should throw if a pipe is used inside a call to a property access
should throw if a pipe is used inside a call to a safe property access
should throw if a pipe is used inside a property access
should throw if a pipe is used inside a keyed read expression
should throw if a pipe is used inside a safe property read
should throw if a pipe is used inside a non-null assertion
should throw if a pipe is used inside a prefix not expression
should throw if a pipe is used inside a binary expression
should wrap a literal primitive
should be able to recover from an extra paren
should be able to recover from an extra bracket
should be able to recover from a missing )
should be able to recover from a missing ]
should be able to recover from a missing selector
should be able to recover from a missing selector in a array literal
should retain the offsets of an interpolation
should retain the offsets into the expression AST of interpolations
should support arbitrary string size
should work on well known inputs with meaning
should merge empty messages
should console.warn if we use i18n comments
should merge empty attributes
should parse the translations only once
should translate templates
should translate templates (with CRLF line endings)
should visit all nodes
should be able to parse non-angular xtb files without error
should translate html-like plain text
should translate a message with placeholder referencing messages
should use the original message or throw when a translation is not found
should report missing translation with MissingTranslationStrategy.Warning
should report missing referenced message
should work regardless the namespace
should parse root level text nodes
should parse text nodes inside regular elements
should parse text nodes inside <ng-template> elements
should parse CDATA
should normalize line endings within CDATA
should parse root level elements
should parse elements inside of regular elements
should parse elements inside  <ng-template> elements
should support void elements
should close void elements on text nodes
should support optional end tags
should support nested elements
should not wraps elements in a required parent
should support explicit namespace
should support implicit namespace
should propagate the namespace
should match closing tags case sensitive
should support self closing void elements
should support self closing foreign elements
should ignore LF immediately after textarea, pre and listing
should normalize line endings in text
should parse element with JavaScript keyword tag name
should parse attributes on regular elements case sensitive
should parse attributes containing interpolation
should parse attributes containing unquoted interpolation
should parse bound inputs with expressions containing newlines
should parse attributes containing encoded entities
should decode HTML entities in interpolated attributes
should normalize line endings within attribute values
should parse attributes without values
should parse attributes on svg elements case sensitive
should parse attributes on <ng-template> elements
should support namespace
should support a prematurely terminated interpolation in attribute
should preserve comments
should normalize line endings within comments
should parse out expansion forms
should normalize line-endings in expansion forms in inline templates if `i18nNormalizeLineEndingsInICUs` is true
should not normalize line-endings in ICU expressions in external templates when `i18nNormalizeLineEndingsInICUs` is not set
should normalize line-endings in expansion forms in external templates if `i18nNormalizeLineEndingsInICUs` is true
should parse out nested expansion forms
should normalize line endings in nested expansion forms for inline templates, when `i18nNormalizeLineEndingsInICUs` is true
should not normalize line endings in nested expansion forms for inline templates, when `i18nNormalizeLineEndingsInICUs` is not defined
should not normalize line endings in nested expansion forms for external templates, when `i18nNormalizeLineEndingsInICUs` is not set
should support ICU expressions with cases that contain numbers
should parse a block
should parse a block with an HTML element
should parse a block containing mixed plain text and HTML
should parse nested blocks
should infer namespace through block boundary
should parse an empty block
should parse a block with void elements
should close void elements used right before a block
should report an unclosed block
should report an unexpected block close
should report unclosed tags inside of a block
should report an unexpected closing tag inside a block
should store the source locations of blocks
should parse an incomplete block with no parameters
should parse a let declaration that is nested in a parent
should store the location
should set the start and end source spans
should decode HTML entities in interpolations
should support interpolations in text
should not set the end source span for void elements
should not set the end source span for multiple void elements
should not set the end source span for standalone void elements
should set the end source span for standalone self-closing elements
should set the end source span for self-closing elements
should not include leading trivia from the following node of an element in the end source
should not set the end source span for elements that are implicitly closed
should support expansion form
should not report a value span for an attribute without a value
should report a value span for an attribute with a value
should report a value span for an unquoted attribute value
should visit text nodes
should visit element nodes
should report unexpected closing tags
gets correct close tag for parent when a child is not closed
should parse and report incomplete tags after the tag name
should parse and report incomplete tags after attribute
should parse and report incomplete tags after quote
should report subsequent open tags without proper close tag
should report closing tag for void elements
should report self closing html element
should also report lexer errors
should remove whitespaces (space, tab, new line) between elements
should remove whitespaces from child text nodes
should remove whitespaces from the beginning and end of a template
should convert &ngsp; to a space and preserve it
should replace multiple whitespaces with one space
should remove whitespace inside of blocks
should not replace &nbsp;
should not replace sequences of &nbsp;
should not replace single tab and newline with spaces
should preserve single whitespaces between interpolations
should preserve whitespaces around interpolations
should preserve whitespaces around ICU expansions
should preserve whitespaces inside <pre> elements
should skip whitespace trimming in <textarea>
should handle the plural expansion form
should handle nested expansion forms
should correctly set source code positions
should handle other special forms
should parse an expansion form as a tag single child
should parse an expansion forms inside of blocks
should only process the text within the range
should take into account preceding (non-processed) lines and columns
should not normalize line-endings in ICU expressions when `i18nNormalizeLineEndingsInICUs` is not defined
should not normalize line endings in nested expansion forms when `i18nNormalizeLineEndingsInICUs` is not defined
should add source files to the source map
should generate a valid mapping
should be able to shift the content
should use the default source file for the first character
should use an explicit mapping for the first character
should map leading segment without span
should handle indent
should coalesce identical span
should generate unique argument names
should not add more than one strict mode statement if there is already one present
should throw when mappings are added out of order
should throw when adding segments before any line is created
should throw when adding segments referencing unknown sources
should throw when adding segments with a source url but no position
should handle comment in interpolation
should handle whitespace in interpolation
should handle whitespace and comment in interpolation
should handle comment in an action binding
should provide absolute offsets with arbitrary whitespace
should provide absolute offsets of an expression in a bound text
should provide absolute offsets of an expression in a bound event
should provide absolute offsets of an expression in a bound attribute
should provide absolute offsets of an expression in a template attribute
should provide absolute offsets of a binary expression
should provide absolute offsets of expressions in a binary expression
should provide absolute offsets of a conditional
should provide absolute offsets of expressions in a conditional
should provide absolute offsets of a chain
should provide absolute offsets of expressions in a chain
should provide absolute offsets of a function call
should provide absolute offsets of expressions in a function call
should provide absolute offsets of an implicit receiver
should provide absolute offsets of an interpolation
should provide absolute offsets of expressions in an interpolation
should handle HTML entity before interpolation
should handle many HTML entities and many interpolations
should handle interpolation in attribute
should handle interpolation preceded by HTML entity in attribute
should handle many interpolation with HTML entities in attribute
should provide absolute offsets of a keyed read
should provide absolute offsets of expressions in a keyed read
should provide absolute offsets of a keyed write
should provide absolute offsets of expressions in a keyed write
should provide absolute offsets of a literal primitive
should provide absolute offsets of a literal array
should provide absolute offsets of expressions in a literal array
should provide absolute offsets of a literal map
should provide absolute offsets of expressions in a literal map
should provide absolute offsets of a method call
should provide absolute offsets of expressions in a method call
should provide absolute offsets of a non-null assert
should provide absolute offsets of expressions in a non-null assert
should provide absolute offsets of a pipe
should provide absolute offsets expressions in a pipe
should provide absolute offsets of a property read
should provide absolute offsets of expressions in a property read
should provide absolute offsets of a property write
should provide absolute offsets of an accessed property write
should provide absolute offsets of expressions in a property write
should provide absolute offsets of a "not" prefix
should provide absolute offsets of expressions in a "not" prefix
should provide absolute offsets of a safe method call
should provide absolute offsets of expressions in safe method call
should provide absolute offsets of a safe property read
should provide absolute offsets of expressions in safe property read
should work for simple cases
should work with multiple bindings
is correct for variables and placeholders
is correct for object literals with shorthand property declarations
is correct for text nodes
is correct for elements with attributes
is correct for elements with attributes without value
is correct for self-closing elements with trailing whitespace
is correct for bound text nodes
is correct for bound properties
is correct for bound properties without value
is correct for bound properties via bind- 
is correct for bound properties via {{...}}
is correct for bound properties via data-
is correct for bound properties via @
is correct for bound properties via animation-
is correct for bound properties via @ without value
is correct for * directives
is correct for <ng-template>
is correct for reference via #...
is correct for reference with name
is correct for reference via ref-...
is correct for reference via data-ref-...
is correct for variables via let-...
is correct for variables via data-let-...
is correct for attributes
is correct for bound attributes
is correct for attribute and bound attributes
is correct for variables via let ...
is correct for variables via as ...
is correct for event names case sensitive
is correct for bound events via on-
is correct for bound events via data-on-
is correct for bound events and properties via [(...)]
is correct for bound events and properties via bindon-
is correct for bound events and properties via data-bindon-
is correct for bound events via @
is correct for references via #...
is correct for references with name
is correct for references via ref-
is correct for references via data-ref-
is correct for nested ICUs
is correct for deferred blocks
is correct for switch blocks
is correct for loop blocks
is correct for if blocks
is correct for a let declaration
should create valid text span on Element with adjacent start and end tags
should parse incomplete tags terminated by EOF
should parse incomplete tags terminated by another tag
should parse text nodes
should parse elements with attributes
should parse ngContent
should parse ngContent when it contains WS only
should parse ngContent regardless the namespace
should parse bound text nodes
should parse mixed case bound properties
should parse bound properties via bind- 
should parse bound properties via {{...}}
should parse dash case bound properties
should parse dotted name bound properties
should not normalize property names via the element schema
should parse mixed case bound attributes
should parse and dash case bound classes
should parse mixed case bound classes
should parse mixed case bound styles
should support * directives
should support <ng-template>
should support <ng-template> regardless the namespace
should support <ng-template> with structural directive
should support reference via #...
should support reference via ref-...
should parse variables via let-...
should parse attributes
should parse bound attributes
should support attribute and bound attributes
should parse variables via let ...
should parse variables via as ...
should parse bound events with a target
should parse event names case sensitive
should parse bound events via on-
should parse bound events and properties via [(...)]
should parse bound events and properties via bindon-
should parse bound events and properties via [(...)] with non-null operator
should parse property reads bound via [(...)]
should parse keyed reads bound via [(...)]
should report unsupported expressions in two-way bindings
should parse references via #...
should parse references via ref-
should parse camel case references
should parse ngContent without selector
should parse ngContent with a specific selector
should parse ngContent with a selector
should parse ngProjectAs as an attribute
should parse ngContent with children
should ignore <script> elements
should ignore <style> elements
should keep <link rel="stylesheet"> elements if they have an absolute url
should keep <link rel="stylesheet"> elements if they have no uri
should ignore <link rel="stylesheet"> elements if they have a relative uri
should ignore bindings on children of elements with ngNonBindable
should keep nested children of elements with ngNonBindable
should ignore <script> elements inside of elements with ngNonBindable
should ignore <style> elements inside of elements with ngNonBindable
should ignore <link rel="stylesheet"> elements inside of elements with ngNonBindable
should parse a simple deferred block
should parse a deferred block with a `when` trigger
should parse a deferred block with a single `on` trigger
should parse a deferred block with multiple `on` triggers
should parse a deferred block with a non-parenthesized trigger at the end
should parse a deferred block with `when` and `on` triggers
should allow new line after trigger name
should parse a deferred block with a timer set in seconds
should parse a deferred block with a timer with a decimal point
should parse a deferred block with a timer that has no units
should parse a deferred block with a hover trigger
should parse a deferred block with an interaction trigger
should parse a deferred block with connected blocks
should parse a deferred block with comments between the connected blocks
should parse a loading block with parameters
should parse a placeholder block with parameters
should parse a deferred block with prefetch triggers
should allow arbitrary number of spaces after the `prefetch` keyword
should parse a complete example
should treat blocks as plain text inside ngNonBindable
should parse triggers with implied target elements
should parse a switch block
should parse a switch block when preserveWhitespaces is enabled
should parse a switch block with optional parentheses
should parse a nested switch block
should parse a switch block containing comments
should parse a for loop block
should parse a for loop block with optional parentheses
should parse a for loop block with let parameters
should parse a for loop block with newlines in its let parameters
should parse nested for loop blocks
should parse a for loop block with a function call in the `track` expression
should parse a for loop block with newlines in its expression
should parse for loop block expression containing new lines
should parse an if block
should parse an if block with optional parentheses
should parse nested if blocks
should parse an else if block with multiple spaces
should parse an else if block with a tab between `else` and `if`
should parse an if block containing comments between the branches
should parse unknown blocks
should parse a let declaration
should produce a text node when @let is used inside ngNonBindable
should bind a simple template
should match directives when binding a simple template
should match directives on namespaced elements
should not match directives intended for an element on a microsyntax template
should extract top-level defer blocks
should extract nested defer blocks and associated pipes
should extract nested defer blocks and associated directives
serializeI18nPlaceholderBlock()
generates with description
generates with no description suppressed
should compute source-spans when serializing text with interpolation for `$localize()`
should compute source-spans when serializing content with HTML tags for `$localize()`
should create the correct source-spans when there are two placeholders next to each other
should create the correct placeholder source-spans when there is skipped leading whitespace
should include an array of HTML comment nodes on the returned R3 AST
generate a new schema
should normalize the given dimensional CSS style value to contain a PX value when numeric
should not normalize any values that are of zero
should stringify all non dimensional numeric style values
should have no overlap between `IFRAME_SECURITY_SENSITIVE_ATTRS` and `SECURITY_SCHEMA`
should select by element name case sensitive
should select by class name case insensitive
should select by attr name case sensitive independent of the value
should support "." in attribute names
should support "$" in attribute names
should select by attr name only once if the value is from the DOM
should select by attr name case sensitive and value case insensitive
should select by element name, class name and attribute name with value
should select by many attributes and independent of the value
should select independent of the order in the css selector
should not select with a matching :not selector
should select with a non matching :not selector
should match * with :not selector
should match with multiple :not selectors
should select with one match in a list
should not select twice with two matches in a list
should detect attr names with escaped $
should detect :not
should throw when nested :not
should detect lists of selectors
should detect lists of selectors with :not
should handle (scope or not) animation definition containing some names which do not have a preceding space
should handle (scope or not) animation definitions preceded by an erroneous comma
should do nothing if `multiples` is 0
should do nothing if `multiples` is 1
should add clones of the original groups if `multiples` is greater than 1
should handle arrays with primitive type values
should handle arrays of objects
works in AOT
@Self() works in component hierarchies
@Optional() Self() resolves to @Injectable() scoped service
InjectionToken ngInjectableDef works
APP_ROOT_SCOPE works
can inject dependencies
string tokens work
should attach the `sourceMapRange` to the given `node`
should use undefined if the url is the same as the one passed to the constructor
should extract the number value
should extract the range from the expression
should return the number value of the property
should return an array of AstValue instances of parsed from the value of the property
should return the original expression value of the property
should return the expression value of the property wrapped in an `AstValue`
should return true if the value is a number
should return the number value of the AstValue
should return false if the value is not a string
should throw an error if the property is not a string
should return false if the value is not a boolean
should throw an error if the property is not a boolean
should return false if the value is not an object literal
should throw an error if the property is not an object literal
should return an array of AstValue objects from the AstValue
should throw an error if the property is not an array
should return false if the value is not a function expression
should return the "return value" of the function expression
should throw an error if the property is not a function expression
should throw an error if the property is not a function declaration
should throw an error if the value is not a call expression
should return the arguments as an array of values
should return the value wrapped in a `WrappedNodeExpr`
should return the source range of the AST node
should call `linkPartialDeclaration()` on the appropriate partial compiler
should enable block syntax if compiled with version 17 or above
should capture shared constant values
should be no shared constant statements to capture when they are emitted into the replacement IIFE
should include a trace for dynamic values
should include a pointer for a reference to a named declaration
should include a pointer for a reference to an anonymous declaration
should include a representation of the value's type
should produce a diagnostic when @Component has non-literal argument
should keep track of inline template
should keep track of external template
should keep track of internal and external styles
should use an empty source map URL for an indirect template
does not emit a program with template parse errors
should replace inline style content with transformed content
should replace template style element content for inline template with transformed content
should replace template style element content for external template with transformed content
should error if canPreprocess is true and async analyze is not used
should not error if component has no inline styles and canPreprocess is true
should evaluate the name of animations
should tell if the animations include a dynamic value
should treat complex animations expressions as dynamic
should not produce diagnostic for cross-file imports in standalone component
should produce diagnostic for imports in non-standalone component
should not produce diagnostic for cross-file schemas in standalone component
should produce diagnostic for schemas in non-standalone component
should produce a diagnostic when injectable already has a static ɵprov property (with errorOnDuplicateProv true)
should also return template diagnostics when asked for component diagnostics
should return the component resources
does not return component style resources if not an array of strings
should return resource dependencies of a component source file
should reuse the full compilation state for a resource-only change
should return the original filename if FS is case-sensitive or lower case otherwise
should use case-sensitivity when matching rootDirs
should prefer non-aliased exports
should generate an import using the exported name of the declaration
should generate an import to a type-only declaration when allowed
should enumerate exports with the ReflectionHost
should never use relative imports outside of the logical filesystem for source files
should use relative imports outside of the logical filesystem for declaration files if allowed
should not use relative imports outside of the logical filesystem for declaration files if not allowed
should handle svg elements
should handle svg elements on templates
should handle comments in interpolations
should handle whitespace and comments in interpolations
works when structural directives are on templates
should generate nothing in empty template
should ignore comments
should handle arbitrary whitespace
should resist collisions
should discover component properties
should discover component properties read using "this" as a receiver
should discover nested properties
should ignore identifiers that are not implicitly received by the template
should discover properties in bound attributes
should handle bound attributes with no value
should discover variables in bound attributes
should discover properties in template expressions
should discover properties in template expressions and resist collisions
should discover property writes in bound events
should discover nested property writes
should discover component method calls
should discover method calls in bound attributes
should discover method calls in template expressions
should discover references
should discover nested references
should discover references to references
should discover forward references
should generate information directive targets
should discover variables
should discover variables with let- syntax
should discover nested variables
should discover references to variables
should discover references to let declaration
should record elements as ElementIdentifiers
should record element names as their selector
should discover selectors in self-closing elements
should discover selectors in elements with adjacent open and close tags
should discover selectors in elements with non-adjacent open and close tags
should discover nested selectors
should generate information about attributes
should record templates as TemplateNodeIdentifiers
should record template names as their tag name
should discover nested templates
should handle interpolations in attributes, preceded by HTML entity
should emit component and template analysis information
should give inline templates the component source file
should give external templates their own source file
should emit used components
should not assume directives are structural
should identify a structural directive by its constructor
should retain an absolute owning module for relative imports
should identify host directives
should read the post-v16 inputs map syntax
should read the pre-v16 inputs map syntax
should describe primitives
should describe objects limited to a single level
should describe arrays limited to a single level
should describe enum values
should not include the origin node if points to a different dynamic node.
should include the origin node if it is dynamic by itself
should include a trace for a dynamic subexpression in the origin expression
should reduce the granularity to a single entry per statement
should trace dynamic strings
should trace invalid expression types
should trace unknown syntax
should trace complex function invocations
should trace object destructuring of external reference
should trace deep object destructuring of external reference
should trace array destructuring of dynamic value
function call default value works
function call spread works
addition works
array works
array spread works
&& operations work
evaluates arithmetic operators
parentheticals work
array access works
array `length` property access works
array `slice` function works
array `concat` function works
supports negative numbers
supports destructuring array variable declarations
supports destructuring object variable declaration
supports destructuring object variable declaration with an alias
supports nested destructuring object variable declarations
supports nested destructuring array variable declarations
supports nested destructuring variable declarations mixing arrays and objects
resolves unknown values in a destructured variable declaration as dynamic values
resolves unknown binary operators as dynamic value
resolves unknown unary operators as dynamic value
resolves invalid element accesses as dynamic value
resolves invalid array accesses as dynamic value
resolves binary operator on non-literals as dynamic value
resolves invalid spreads in array literals as dynamic value
resolves invalid spreads in object literals as dynamic value
resolves access from external variable declarations as dynamic value
supports declarations of primitive constant types
supports declarations of tuples
supports declarations of readonly tuples with class references
evaluates tuple elements it cannot understand to DynamicValue
imports work
absolute imports work
map spread works
module spread works
evaluates module exports lazily to avoid infinite recursion
should resolve non-literals as dynamic string
enum resolution works
should resolve shorthand properties to values
should resolve dynamic values in object literals
should not attach identifiers to FFR-resolved values
should not associate an owning module when a FFR-resolved expression is within the originating source file
should not associate an owning module when a FFR-resolved expression is imported using a relative import
should associate an owning module when a FFR-resolved expression is imported using an absolute import
should associate an owning module when a FFR-resolved expression is within the foreign file
should resolve functions with more than one statement to a complex function call
should track each time a source file is visited
should track imported source files
should track files passed through during re-exports
should reflect a single argument
should reflect a decorated argument
should reflect a decorated argument with a call
should reflect a decorated argument with an indirection
should reflect an argument from an aliased import
should reflect an argument from a namespace declarations
should reflect an argument from a default import
should reflect a nullable argument
should reflect the arguments from an overloaded constructor
should resolve a direct import
should resolve a namespaced import
should reflect a re-export
should get string literal members of class
should retrieve method members
should retrieve constructor as member
should retrieve decorators of member
identifies static members
should resolve correctly across modules
should preserve reference identities in module metadata
should not tag .d.ts files
should not tag .js files
should not tag shims after finalization
should not overwrite original referencedFiles
should always tag against the original referencedFiles
should be able to untag references and retag them later
should return 0 if the segments are the same
should return a negative number if the first segment is before the second segment
should return a positive number if the first segment is after the second segment
should return an identical marker if offset is 0
should return a new marker offset by the given chars
should load a file with no source map and inline contents
should load a file with no source map and read its contents from disk
should load a file with an external source map
should only read source-map comments from the last line of a file
should handle a missing external source map
should load a file with an inline encoded source map
should load a file with an implied source map
should handle missing implied source-map file
should recurse into external original source files that are referenced from source maps
should handle a missing source file referenced from a source-map
should log a warning if there is a cyclic dependency in source files loaded from disk
should log a warning if there is a cyclic dependency in source maps loaded from disk
should not fail if the filename of an inline source looks like a cyclic dependency
should not load source-maps (after the initial map) from disk if the source file was inline
should parse the mappings from the raw source map
should parse the segments in ascending order of original position from the raw source map
should create separate arrays for each original source file
should find the highest mapping index that has a segment marker below the given one if there is not an exact match
should find the highest mapping index that has a segment marker (when there are duplicates) below the given one if there is not an exact match
should find the last mapping if the segment marker is higher than all of them
should return -1 if the segment marker is lower than all of them
should find the matching segment marker mapping index if there is only one of them
should find the highest matching segment marker mapping index if there is more than one of them
should find the preceding mapping index if there is a matching segment marker
should find the highest preceding mapping index if there is more than one matching segment marker
should find the highest mapping index above the lowerIndex hint that has a segment marker below the given one if there is not an exact match
should return the lowerIndex mapping index if there is a single exact match and we are not exclusive
should return the lowerIndex mapping index if there are multiple exact matches and we are not exclusive
should return -1 if the segment marker is lower than the lowerIndex hint
should return -1 if the segment marker is equal to the lowerIndex hint and we are exclusive
should add `next` properties to each segment that point to the next segment in the same source file
should be the same as non-flat mappings if there is only one level of source map
should merge mappings from flattened original source files
should ignore mappings to missing source files
should convert the flattenedMappings into a raw source-map object
should handle mappings that map from lines outside of the actual content lines
should consolidate source-files with the same relative path
should return null for source files with no flattened mappings
should return offset locations in multiple flattened original source files
should return offset locations across multiple lines
should compute the cumulative length of each line in the given string
should downlevel decorators for @Injectable decorated class
should downlevel decorators for @Directive decorated class
should downlevel decorators for @Component decorated class
should downlevel decorators for @Pipe decorated class
should not downlevel non-Angular class decorators
should not downlevel non-Angular class decorators generated by a builder
should downlevel Angular-decorated class member
should not downlevel class member with unknown decorator
should not duplicate constructor parameters for classes part of constructor body
should downlevel Angular-decorated class member but not preserve type
should capture constructor type metadata with `emitDecoratorMetadata` enabled
should capture constructor type metadata with `emitDecoratorMetadata` disabled
should properly serialize constructor parameter with external qualified name type
should properly serialize constructor parameter with local qualified name type
should properly downlevel constructor parameter decorators
should properly downlevel constructor parameters with union type
should add @nocollapse if closure compiler is enabled
should not generate invalid reference due to conflicting parameter name
should be able to serialize circular constructor parameter type
should create diagnostic if property name is non-serializable
should not capture constructor parameter types when not resolving to a value
should allow preceding custom transformers to strip decorators
should capture a non-const enum used as a constructor type
should allow for type-only references to be removed with `emitDecoratorMetadata` from custom decorators
should not result in a stack overflow for a large number of files
should migrate if the class decorator is downleveled in advance
should migrate if the class member and class is transformed in advance
should run partial compilation when implemented if compilation mode is partial
should run local compilation when compilation mode is local
should run full compilation if compilation mode is full
should not produce a warning when a signal getter is invoked
should produce a warning when a signal is not invoked
should produce a warning when a readonly signal is not invoked
should produce a warning when a computed signal is not invoked
should produce a warning when an input signal is not invoked
should produce a warning when a required input signal is not invoked
should produce a warning when a model signal is not invoked
should produce a warning when a required model signal is not invoked
should not produce a warning when a signal is not invoked in a banana in box binding
should not produce a warning when a signal is not invoked in an input binding as they are skipped
should produce a warning when a signal in a nested property read is not invoked
should not produce a warning when model signals are invoked
should not produce a warning when a computed signal is invoked
should not produce a warning when input signals are invoked
should produce a warning when signal is not invoked on interpolated binding
should not produce a warning when signal is invoked on interpolated binding
should produce a warning when signal is invoked in attribute binding interpolation 
should not produce a warning when signal is invoked in attribute binding interpolation 
should produce a warning when nested signal is not invoked on interpolated binding
should not produce a warning with other Signal type
should produce invalid banana in a box warning
should not produce invalid banana in a box warning if written correctly
should not produce invalid banana in a box warning with bracket in the middle of the name
should produce invalid banana in a box warnings for *ngIf and ng-template
should respect configured category
should produce missing ngforof let warning
should not produce missing ngforof let warning if written correctly
should not produce missing ngforof let warning if written correctly in longhand
should produce nullish coalescing warning
should produce nullish coalescing warning for classes with inline TCBs
should not produce nullish coalescing warning for a nullable type
should not produce nullish coalescing warning for the any type
should not produce nullish coalescing warning for the unknown type
should not produce nullish coalescing warning for a type that includes undefined
warns for pipe arguments which are likely configured incorrectly (?? operates on "format" here)
does not warn for pipe arguments when parens are used
should not produce nullish coalescing warning when the left side is a nullable expression
should respect configured diagnostic category
should produce optional chain warning for property access
should produce optional chain warning for indexed access
should produce optional chain warning for method call
should produce optional chain warning for classes with inline TCBs
should not produce optional chain warning for a nullable type
should not produce optional chain warning for the any type
should not produce optional chain warning for the unknown type
should not produce optional chain warning for a type that includes undefined
should not produce optional chain warning when the left side is a nullable expression
should produce class binding warning
should produce an attribute binding warning
should produce a wrong value warning
should not produce a warning when there is no value
should not produce a warning with a correct value 
should produce suffix not supported warning
should not produce suffix not supported warning on a style binding
should not produce suffix not supported warning on an input
should produce a style binding warning
should produce a diagnostic when a function in an event binding is not invoked
should produce a diagnostic when a nested function in an event binding is not invoked
should produce a diagnostic when a nested function that uses key read in an event binding is not invoked
should produce a diagnostic when a function in a chain is not invoked
should produce a diagnostic when a function in a conditional is not invoked
should produce a diagnostic when a nested function in a conditional is not invoked
should produce a diagnostic when a function in a function is not invoked
should produce a diagnostic when a function that returns a function is not invoked
should not produce a diagnostic when an invoked function returns a function
should not produce a warning when the function is not invoked in two-way-binding
should not produce a warning when the function is invoked
should report a @let declaration that is not used
should not report a @let declaration that is only used in other @let declarations
should not report a @let declaration that is only used in an event listener
should not report a @let declaration that is only used in a structural directive
does not repeat diagnostics for missing pipes in directive inputs
should handle TypeScript parse failures gracefully
should handle non-Error failures gracefully
should not be created if no components need to be checked
should have complete reuse if no structural changes are made to shims
should have complete reuse if no structural changes are made to input files
should return a completion point in the TCB for the component context
should get a symbol for regular attributes
checkTypeOfAttributes = true
checkTypeOfAttributes = false
should get a symbol for local ref which refers to the template
should get a symbol for usage local ref which refers to a template
should get symbol for the template itself
finds symbols for variables
finds symbol when using a template variable
should retrieve a symbol for the loop expression
should retrieve a symbol for the track expression
finds symbols for loop variable
finds symbol when using the index in the body
should get a symbol for properties several levels deep
safe property reads
safe keyed reads
can get a symbol for empty binding
can retrieve a symbol for an input binding
can retrieve a symbol for a signal-input binding
can retrieve a symbol for an input of structural directive
returns dom binding input binds only to the dom element
returns dom binding when directive members do not match the input
can match binding when there are two directives
returns the first field match when directive maps same input to two fields
returns the all inputs when two directives have the same input
should find symbol for output binding
should find symbol for output binding when there are multiple directives
returns addEventListener binding to native element when no match to any directive output
still returns binding when checkTypeOfOutputEvents is false
returns output symbol for two way binding
for elements that are components with no inputs
element with directive matches
elements with generic directives
should not produce errors for components that do not require inlining
should produce errors for components that require TCB inlining
should provide access to a component's real template
compiles a basic type constructor
should extract xmb
should extract xlf
should extract xlf2
should not emit js
should report when an initializer function is used outside of an initializer
should report when a required initializer function is used outside of an initializer
should report when an aliased initializer function is used outside of an initializer
should report when an initializer function accessed through a namespace import is used outside of an initializer
should report when an initializer function is used outside of an initializer in a file that does not have any decorated classes
should report when an initializer function is used in a constructor
should report when an initializer function is an indirect descendant of the initializer
should not report a correct usage of an initializer API
should not report if an initializer function is wrapped in a parenthesized expression
should not report if an initializer function is wrapped in an `as` expression
should report initializer function being used in an undecorated class
should report initializer function being used in an unsupported Angular class
should error if a required input declares an initial value
should report mixed two-way binding with a signal input
should work with transforms
should report unset required inputs
should error when declared using an ES private field
should error when declared using a `private` field
should allow declaring using a `protected` field
should report a diagnostic if a model field is decorated with @Input
should report a diagnostic if a model field is decorated with @Output
should report a diagnostic if a model input is also declared in the `inputs` field
should produce a diagnostic if the alias of a model cannot be analyzed
should report a diagnostic if the options of a model signal cannot be analyzed
should report a diagnostic if a model input is declared on a static member
should a diagnostic if a required model input declares an initial value
should report if a signal getter is invoked in a two-way binding
should check a primitive value bound to a model input
should check a signal value bound to a model input via a two-way binding
should check two-way binding of a signal to a decorator-based input/output pair
should not allow a non-writable signal to be assigned to a model
should allow a model signal to be bound to another model signal
should check the event declared by a model input
should report unset required model inputs
should check generic two-way model binding with a primitive value
should check generic two-way model binding with a signal value
should report unwrapped signals assigned to a model in a one-way binding
should allow using a `protected` field
should report an error when using an ES private field
should report an error when using a `private` field
should allow an output using a `protected` field
should report an error when used with query decorator
should report an error when used on a static field
should report an error when declared in @Directive metadata
should report an error when declared in @Component metadata
should report an error when a signal-based query function is used in metadata
should report an error when `read` option is complex
should error when a query is declared using an ES private field
should allow query is declared on a `private` field
should allow query is declared on a `protected` field
should generate component metadata
should index inline templates
should index external templates
should index templates compiled without preserving whitespace
should generate information about used components
should produce an error when unsupported type (@Injectable) is used in `deferredImports`
should produce an error when unsupported type (@NgModule) is used in `deferredImports`
should produce an error when components from `deferredImports` are used outside of defer blocks
should produce an error the same component is referenced in both `deferredImports` and `imports`
should produce an error when pipes from `deferredImports` are used outside of defer blocks
should extract classes
should extract class members
should extract methods with overloads
should not extract Angular-internal members
should extract class method params
should not extract private class members
should extract member tags
should extract getters and setters
should extract abstract classes
should extract class generic parameters
should extract method generic parameters
should extract inherited members
should extract inherited getters/setters
should extract public constructor parameters
should not extract unexported statements
should extract constants
should extract multiple constant declarations in a single statement
should extract non-primitive constants
should extract an object literal marked as an enum
should extract an object literal cast to a const and marked as an enum
should extract class decorators that define members in an interface
should extract property decorators
should extract property decorators with a type alias
should extract param decorators
should extract standalone directive info
should extract standalone component info
should extract NgModule directive info
should extract NgModule component info
should extract input and output info for a directive
should extract input and output info for a component
should extract getters and setters as inputs
should not extract Angular-private symbols
should extract enum info without explicit values
should extract enum info with explicit values
should extract functions
should extract function with parameters
should extract overloaded functions
should extract function generics
should extract individual return types
should extract interfaces
should extract interface members
should extract call signatures
should extract interface method params
should not extract private interface members
should extract jsdoc from all types of top-level statement
should extract raw comment blocks
should extract a description from a single-line jsdoc
should extract a description from a multi-line jsdoc
should extract jsdoc with an empty tag
should extract jsdoc with a single-line tag
should extract jsdoc with a multi-line tags
should extract jsdoc with custom tags
should extract a @see jsdoc tag
should extract function parameter descriptions
should extract class member descriptions
should escape decorator names
should extract NgModule info
should extract standalone pipe info
should extract NgModule pipe info
should extract info from a named re-export
should extract info from an aggregate re-export
should extract info from a transitive re-export
should extract info from an aliased re-export
should extract type aliases based on primitives
should extract type aliases for objects
should produce invalid banana in box warning
should produce invalid banana in box warning with external html file
by enabling extended template diagnostics when `strictTemplates` is enabled
by emitting unconfigured diagnostics as is
by emitting diagnostics with the default category
by emitting diagnostics configured as `warning`
by promoting diagnostics configured as `error`
by throwing an error when given a bad category
should not produce a diagnostic when exposing an aliased binding
should not produce a diagnostic when exposing an inherited aliased binding
should report an error when using a directive outside of rootDirs
should report an error when a library entry-point does not export the symbol
should handle an error in an unrelated file
should emit all files after an error on the initial build
should emit files introduced at the same time as an unrelated error
should emit dependent files even in the face of an error
should recover from an error in a component's metadata
should recover from an error in a component that is part of a module
should recover from an error in an external template
should recover from an error even across multiple NgModules
should remember a change to a TS file across broken builds
should remember a change to a template file across broken builds
should not recompile dependent components when public api is unchanged
should not recompile components that do not use a changed directive
should recompile components for which a directive usage is introduced
should recompile components for which a directive usage is removed
should recompile dependent components when an input is added
should recompile dependent components when an input is renamed
should recompile dependent components when an input is removed
should recompile dependent components when an output is added
should recompile dependent components when an output is renamed
should recompile dependent components when an output is removed
should recompile dependent components when exportAs clause changes
should recompile components when a pipe is newly matched because it was renamed
should recompile dependent components when an input becomes required
should not recompile components that use external declarations that are not changed
should recompile components once an external declaration is changed
should recompile components when their declaration name changes
should not recompile components that use a local directive
should recompile components when the name by which they are exported changes
should not recompile components when a directive is changed into a component
should recompile components when a directive and pipe are swapped
should not recompile components when a component is changed into a directive
should not recompile an NgModule nor component when remote scoping is unaffected
should recompile components when a matching directive is added in the direct scope
should recompile components when a matching directive is removed from the direct scope
should recompile components when a matching directive is added in the transitive scope
should recompile components when a matching directive is removed from the transitive scope
should not recompile components when a non-matching directive is added in scope
should recompile a component when a matching directive is added that first contains an error
should correctly emit components when public API changes during a broken program
should not crash if CLI does not provide getModifiedResourceFiles()
should compile incrementally with template type-checking turned on
should retain ambient types provided by auto-discovered @types
should handle redirected source files
should repeat type errors across rebuilds, even if nothing has changed
should pick up errors caused by changing an unrelated interface
should recompile when a remote change happens to a scope
should still pick up on errors from inlined type check blocks
should still pick up on errors caused by inlined type constructors
should re-analyze a component if a template file becomes available later
should re-analyze if component style file becomes available later
should type-check correctly when a backing input field is renamed
should type-check correctly when a backing signal input field is renamed
should type-check correctly when an decorator-input is changed to a signal input
should type-check correctly when signal input transform is added
should type-check correctly when a backing output field is renamed
should type-check correctly when the backing field of an input is removed
should type-check correctly when the backing field of an input is made readonly
should type-check correctly when an ngAcceptInputType field is declared
should type-check correctly when an ngTemplateContextGuard field is declared
should type-check correctly when an ngTemplateGuard field is declared
should type-check correctly when the type of an ngTemplateGuard field changes
should type-check correctly when the name of an ngTemplateGuard field changes
should type-check correctly when directive becomes generic
should type-check correctly when a type parameter is added to a directive
should type-check correctly when directive removes its generic type parameter
should type-check correctly when a type parameter is removed from a directive
should type-check correctly when a generic type bound is added
should type-check correctly when a generic type bound indirectly changes
should type-check derived directives when the public API of the parent class is affected
should type-check derived directives when the public API of the grandparent class is affected
should type-check derived directives when a base class is added to a grandparent
should type-check derived directives when a base class is removed from a grandparent
should type-check derived directives when the base class of a grandparent changes
should completely re-use structure when the first signal input is introduced
should completely re-use structure when an inline constructor generic directive starts using input signals
should show correct error message when using an external symbol for component template
should show correct error message when using an external symbol for component styles array
should show correct error message when using an external symbol for component styles
should show correct error message when using an external symbol for component selector
should show correct error message when using an external symbol for component @HostListener's event name argument
should show correct error message when using an external symbol for directive @HostListener's event name argument
should show correct error message when using an external symbol for component @HostBinding's argument
should show correct error message when using an external symbol for directive @HostBinding's argument
should show correct error message when using an external symbol for @Directive.exportAs argument
should produce fatal diagnostics for host directives with forward references of externally imported directive
should produce diagnostic for each custom decorator
should show correct error message for syntatic template errors - case of inline template
should show correct error message for syntatic template errors - case of external template
for out of scope standalone components
for out of scope ngModules
for forward references in the same file
should not report that broken components in modules are not components
should still perform schema checks in embedded views
should wrap functions in "providers" list in NgModule
should wrap functions in "providers" list in Component
should wrap functions in "viewProviders" list in Component
should wrap functions in "providers" list in Directive
should error if @Input has been discovered
should error if @Output has been discovered
should error if @ViewChild has been discovered
should error if @ViewChildren has been discovered
should error if @ContentChild has been discovered
should error if @HostBinding has been discovered
should error if @HostListener has been discovered
should warn when an NgModule id is defined as module.id, and not emit it
should allow directives with no selector that are not in NgModules
should be able to use abstract directive in other compilation units
should not allow directives with no selector that are in NgModules
should throw if Directive selector is an empty string
should throw if invalid arguments are provided in @NgModule
should throw if multiple query decorators are used on the same field
should throw error if @HostBinding decorator argument has unsupported type
should throw error if @HostBinding decorator has too many arguments
should throw error if @Directive.host field has wrong type
should throw error if @Directive.host field is an object with values that have wrong types
should throw error if @Directive.queries field has wrong type
should throw error if @Directive.queries object has incorrect values
should throw error if @Directive.queries object has incorrect values (refs to other decorators)
should throw error if @Injectable has incorrect argument
should produce a diagnostic if the transform value is not a function
should produce a diagnostic if the transform value in the inputs array is not a function
should produce a diangostic if the transform function first parameter has no arguments
should produce a diangostic if the transform function is generic
should produce a diangostic if there is a conflicting coercion member
should produce a diangostic if the transform function type cannot be referenced from the source file
should produce a diangostic if a sub-type of the transform function cannot be referenced from the source file
should produce a diangostic if a generic parameter of the transform function cannot be referenced from the source file
should produce a diangostic if transform type is not exported
should produce a diangostic if the transform value is not a function
should produce a diangostic if the first parameter of a transform is a spread
should produce a diangostic if a transform function has multiple signatures
should not compile a component and a directive annotation on the same class
should give a compile-time error if an invalid @Injectable is used with no arguments
should give a compile-time error if an invalid @Injectable is used with an argument
should report an error when using a symbol from a type-only import clause as injection token
should report an error when using a symbol from a type-only import specifier as injection token
should report an error when using a primitive type as injection token
should report an error when using a union type as injection token
should report an error when using an interface as injection token
should report an error when using a missing type as injection token
should report an error when no type is present
should give a compile-time error when a derived Directive inherits an invalid constructor
should give a compile-time error when a derived Injectable inherits an invalid constructor
should give a compile-time error when a derived Directive inherits from a non-decorated class
should not give a compile-time error when a class inherits from foreign compilation unit
should compile when a derived Directive inherits an invalid constructor
should compile when a derived Injectable inherits an invalid constructor
should give a compile-time error if an invalid constructor is used
should throw if ModuleWithProviders is missing its generic type argument
should generate queries for components
should generate queries for directives
should handle queries that use forwardRef
should handle queries that use an InjectionToken
should throw in case unknown global target is provided
should provide error location for invalid host properties
should throw in case pipes are used in host listeners
should throw in case pipes are used in host bindings (defined as `value | pipe`)
should support bindings with Object builtin names
should throw if `encapsulation` contains invalid value
should throw if `changeDetection` contains invalid value
should compile a banana-in-a-box inside of a template
should not throw when using an SVG-specific `title` tag
should error for a namespace import as parameter type used for DI
should not throw in case whitespaces and HTML comments are present inside <ng-content>
should detect a simple cycle and fatally error if doing partial-compilation
should not generate an error when a local ref is unresolved (outside of template type-checking)
should not throw
should provide a hint when importing an invalid NgModule from node_modules
should provide a hint when importing an invalid NgModule from a local library
should provide a hint when importing an invalid NgModule in the current program
should throw if @Component is missing a template
should throw if `styleUrls` is defined incorrectly in @Component
should not throw if "flatModuleOutFile" is set to null
should report an error when a flat module index is requested but no entrypoint can be determined
should report an error when a visible directive is not exported
should report an error when a visible host directive is not exported
should report an error when a deeply visible directive is not exported
should report an error when a deeply visible module is not exported
should not report an error when a non-exported module is imported by a visible one
should not report an error when re-exporting an external symbol
should error when two directives with the same declared name are exported from the same NgModule
should execute custom transformers
produces an error when not supported and version check is enabled
does not produce an error when supported and version check is enabled
does not produce an error when not supported but version check is disabled
produces an error when not supported using default configuration
should not error when inheriting a constructor from a decorated directive class
should not error when inheriting a constructor without parameters
should not error when inheriting from a class without a constructor
should error when inheriting a constructor from an undecorated class
should error when inheriting a constructor from undecorated grand super class
should error when inheriting a constructor from undecorated grand grand super class
should not error when inheriting a constructor from decorated directive or component classes in a .d.ts file
should error when inheriting a constructor from an undecorated class in a .d.ts file
should produce a diagnostic if an inherited required input is not bound
should not produce a diagnostic if an inherited required input is bound
should produce a diagnostic if both `styleUrls` and `styleUrl` are defined
should error when an undecorated class, with a non-trivial constructor, is provided directly in a module
should error when an undecorated class is provided via useClass
should not error when an undecorated class is provided via useClass with deps
should error when an undecorated class is provided via an array
should error when an undecorated class is provided to a directive
should error when an undecorated class is provided to a component
should error when an undecorated class is provided to a component via viewProviders
should not error when a class with a factory is provided
should not error when an NgModule is provided
should not error when an undecorated class from a declaration file is provided
should not error when an undecorated class without a constructor from a declaration file is provided via useClass
should not error if the undecorated class does not have a constructor or the constructor is blank
should not error when an class with a factory definition and a non-trivial constructor in a declaration file is provided via useClass
should emit a diagnostic for a template parsing error
should emit a diagnostic for an expression parsing error
should use a single character span for an unexpected EOF parsing error
should emit both type-check diagnostics and parse error diagnostics
should emit a diagnostic when a selector does not include a hyphen
should emit a diagnostic when a selector includes uppercase letters
should emit a diagnostic when a selector starts with a digit
should emit a diagnostic when a selector starts with a hyphen
should not emit a diagnostic for a component using an attribute selector
should not emit a diagnostic for a component using a class selector
reports a diagnostics on nested i18n sections
reports a diagnostic on nested i18n sections with tags in between
reports a diagnostic on nested i18n sections represented with <ng-continers>s
should preserve fileoverview comments
should detect when a random class is declared
should detect when a declaration lives outside the current compilation
should detect when a declaration is shared between two modules
should detect when a declaration is repeated within the same module
should detect when a declaration is shared between two modules, and is repeated within them
should produce a transitive error when an invalid NgModule is exported
should not produce component template type-check errors if its module is invalid
should error when a non-standalone component tries to use imports
should compile a standalone component with schema support
should error when a non-standalone component tries to use schemas
should error when a standalone component imports a non-standalone entity
should error when a standalone component imports a ModuleWithProviders using a foreign function
should error when a standalone component imports a ModuleWithProviders
should error when a standalone component imports a non-standalone entity, with a specific error when that entity is not exported
should type-check standalone component templates
should not spam errors if imports is misconfigured
should handle a forwardRef used inside `imports`
should not allow a standalone component to be declared in an NgModule
should not allow a standalone pipe to be declared in an NgModule
should error when a standalone entity is exported by an NgModule without importing it first
should error when a non-standalone entity is imported into an NgModule
should map simple element with content
should map void element
should map a mix of interpolated and static content
should map a complex interpolated expression
should map interpolated properties
should map interpolation with pipe
should map a simple input binding expression
should map a complex input binding expression
should map a longhand input binding expression
should map a simple output binding expression
should map a complex output binding expression
should map a longhand output binding expression
should map a two-way binding expression
should map a longhand two-way binding expression
should map a class input binding
should map *ngIf scenario
should map ng-template [ngIf] scenario
should map *ngFor scenario
should map ng-template [ngFor] scenario
should map default and selected projection
should create simple i18n message source-mapping
should create placeholder source-mappings
should correctly handle collapsed whitespace in element placeholder source-mappings
should create tag (container) placeholder source-mappings
should create (simple string) inline template source-mapping
should create external template source-mapping
should create correct mappings when templateUrl is in a different rootDir
should check a simple component
should have accurate diagnostics in a template using crlf line endings
should check regular attributes that are directive inputs
should produce diagnostics when mapping to multiple fields and bound types are incorrect
should support inputs and outputs with names that are not JavaScript identifiers
should support one input property mapping to multiple fields
should check event bindings
ngIf should narrow on output types
ngIf should narrow on output types across multiple guards
should support a directive being used in its own input expression
should support separate write types on inputs
should check split two way binding
when input and output go to different directives
should type check a two-way binding to a generic property
should type check a two-way binding to a function value
should check the fallback content of ng-content
should not allow references to the default content of ng-content
should check expressions and their type when enabled
should check expressions and their type when overall strictness is enabled
should check expressions but not their type when not enabled
should check expressions and their nullability when enabled
should check expressions and their nullability when overall strictness is enabled
should check expressions but not their nullability when not enabled
should infer result type for safe navigation expressions when enabled
should infer result type for safe navigation expressions when overall strictness is enabled
should not infer result type for safe navigation expressions when not enabled
should expressions and infer type of $event when enabled
should expressions and infer type of $event when overall strictness is enabled
should check expressions but not infer type of $event when not enabled
should check expressions and let $event be of type AnimationEvent when enabled
should check expressions and let $event be of type AnimationEvent when overall strictness is enabled
should check expressions and let $event be of type any when not enabled
should infer the type of DOM references when enabled
should infer the type of DOM references when overall strictness is enabled
should let the type of DOM references be any when not enabled
should produce an error for text attributes when enabled
should produce an error for text attributes when overall strictness is enabled
should not produce an error for text attributes when not enabled
should check expressions and infer type of $event when enabled
should check expressions and infer type of $event when overall strictness is enabled
should check basic usage of NgIf
should check usage of NgIf with explicit non-null guard
should check usage of NgIf when using "let" to capture $implicit context variable
should check usage of NgIf when using "as" to capture `ngIf` context variable
should check basic usage of NgFor
should report an error inside the NgFor template
should accept an NgFor iteration over an any-typed value
should accept NgFor iteration over a QueryList
should accept NgFor iteration when trackBy is used with a wider type
should accept NgFor iteration when trackBy is used with an `any` array
should reject NgFor iteration when trackBy is incompatible with item type
should infer the context of NgFor
should allow the implicit value of an NgFor to be invoked
should infer the context of NgIf
should report an error with an unknown local ref target
should treat an unknown local ref target as type any
should report an error with an unknown pipe
should report an error with an unknown pipe even if `fullTemplateTypeCheck` is disabled
should report an error with pipe bindings
should constrain types using type parameter bounds
should be treated as 'any' without strictTemplates
should be correctly inferred under strictTemplates
should properly type-check inherited directives
should properly type-check inherited directives from external libraries
should detect an illegal write to a template variable
should detect a duplicate variable declaration
should still type-check when fileToModuleName aliasing is enabled, but alias exports are not in the .d.ts file
should coerce an input using a transform function if provided
should apply coercion members of base classes
should give an error if the binding expression type is not accepted by the coercion function
should give an error for undefined bindings into regular inputs when coercion members are present
should type check using the first parameter type of a simple transform function
should type checking using the first parameter type of a simple inline transform function
should type check using the transform function specified in the `inputs` array
should type check using the first parameter type of a built-in function
should type check an imported transform function with a complex type
should type check an imported transform function with a complex type from an external library
should type check an input with a generic transform type
should type check an input with a generic transform union type
should type check an input with a generic transform type from an external library
should allow any value to be assigned if the transform function has no parameters
should type check static inputs against the transform function type
should type check inputs with a transform function coming from a host directive
should type check inputs with a transform inherited from a parent class
should type check inputs with transforms referring to an ambient type
should type check a two-way binding to an input with a transform
should produce diagnostics for inputs which assign to readonly, private, and protected fields
should produce diagnostics for inputs which assign to readonly, private, and protected fields inherited from a base class
should report invalid type assignment when field name is not a valid JS identifier
should not produce diagnostics for correct inputs which assign to readonly, private, or protected fields
should not produce diagnostics for correct inputs which assign to readonly, private, or protected fields inherited from a base class
should produce diagnostics when assigning incorrect type to readonly, private, or protected fields
should not produce diagnostics for undeclared inputs
should produce diagnostics for invalid expressions when assigned into an undeclared input
should not produce diagnostics for undeclared inputs inherited from a base class
should check for unknown elements
should check for unknown elements in standalone components
should check for unknown properties in standalone components
should have a descriptive error for unknown elements that contain a dash
should have a descriptive error for unknown elements that contain a dash in standalone components
should check for unknown properties
should have a descriptive error for unknown properties with an "ng-" prefix
should convert property names when binding special properties
should produce diagnostics for custom-elements-style elements when not using the CUSTOM_ELEMENTS_SCHEMA
should allow HTML elements inside SVG foreignObject
should allow HTML elements without explicit namespace inside SVG foreignObject
should check for unknown elements inside an SVG foreignObject
should check for unknown elements without explicit namespace inside an SVG foreignObject
should allow math elements
should be correct for direct templates
should be correct for indirect templates
should be correct for external templates
should error if "fullTemplateTypeCheck" is false when "strictTemplates" is true
should not error if "fullTemplateTypeCheck" is false when "strictTemplates" is false
should not error if "fullTemplateTypeCheck" is not set when "strictTemplates" is true
should not error if "fullTemplateTypeCheck" is true set when "strictTemplates" is true
should error if "strictTemplates" is false when "extendedDiagnostics" is configured
should error if "extendedDiagnostics.defaultCategory" is set to an unknown value
should error if "extendedDiagnostics.checks" contains an unknown check
should error if "extendedDiagnostics.checks" contains an unknown diagnostic category
should allow for complete program reuse during incremental compilations
generates diagnostic when the library does not export the host directive
should report if a deferred trigger reference does not exist
should report if a deferred trigger reference is in a different embedded view
should narrow types inside the expression, even if aliased
should narrow signal reads when aliased
should not allow usages of pipes inside the tracking expression
should report when an @if block prevents an element from being projected
should report when an @if block prevents a template from being projected
should report when an @else block prevents content projection
should report when an @else if block prevents content projection
should report when an @for block prevents content from being projected
should report when an @empty block prevents content from being projected
should report nodes that are targeting different slots but cannot be projected
should report nodes that are targeting the same slot but cannot be projected
should report when preserveWhitespaces may affect content projection
should not report when there is only one root node
should not report when there are comments at the root of the control flow node
should not report when the component only has a catch-all slot
should allow the content projection diagnostic to be disabled individually
should allow the content projection diagnostic to be disabled via `defaultCategory`
should report when an @case block prevents an element from being projected
should report when an @default block prevents an element from being projected
should infer the type of a let declaration
should infer the type of a nested let declaration
should check the expression of a let declaration
should narrow the type of a let declaration used directly in the template
should narrow the type of a let declaration inside an event listener
should be able to access the let declaration from a parent embedded view
should not be able to access a let declaration from a child embedded view
should not be able to access a let declaration from a sibling embedded view
should give precedence to a local let declaration over a component property
should give precedence to a local let declaration over one from a parent view
should not allow multiple @let declarations with the same name within a scope
should not allow @let declaration with the same name as a local reference defined before it
should not allow @let declaration with the same name as a local reference defined after it
should not allow @let declaration with the same name as a template variable
should allow @let declaration with the same name as a local reference defined in a parent view
should not allow a let declaration to be referenced before it is defined
should not allow a let declaration to be referenced before it is defined inside a child view
should not be able to access let declarations via `this`
should not allow a let declaration to refer to itself
should produce a single diagnostic if a @let declaration refers to properties on itself
should produce a single diagnostic if a @let declaration invokes itself
should allow event listeners to refer to a declaration before it has been defined
should allow child views to refer to a declaration before it has been defined
should not allow a let declaration value to be changed
should not allow a let declaration value to be changed through a `this` access
should allow two-way bindings to signal-based let declarations
should report @let declaration used in the expression of a @if block before it is defined
should report @let declaration used in the expression of a @for block before it is defined
should report @let declaration used in the expression of a @switch block before it is defined
should recover from static analysis errors
should handle strings
should handle empty arrays
should handle arrays of same length
should handle arrays of different length
should correctly compare versions
dispatches event
dispatches event when targetElement is actionElement
dispatch event to child and ignore parent
dispatch event through owner
dispatches modified click event
caches jsaction attribute
re-parses jsaction attribute if the action cache is cleared
handles trailing semicolon in jsaction attribute
handles jsaction attributes without action names, first action
handles jsaction attributes without action names, last action
does not handle jsaction attributes without event type or action name
dispatches event from shadow dom
replays to dispatchDelegate
replays to event replayer
prevents default for click on anchor child
prevents default for modified click on anchor child
does not prevent default for modified click on non-anchor child
dispatches keydown as click event
dispatches keydown event
dispatches clickonly event
dispatches click event to click handler rather than clickonly
prevents default for enter key on anchor child
dispatches matching mouseover as mouseenter event
does not dispatch non-matching mouseover event as mouseenter
dispatches matching mouseout as mouseleave event
does not dispatch non-matching mouseout event as mouseleave
dispatches matching pointerover as pointerenter event
does not dispatch non-matching pointerover event as pointerenter
dispatches matching pointerout as pointerleave event
does not dispatch non-matching pointerout event as pointerleave
dispatches to multiple elements
dispatches to multiple elements in replay
stops dispatch if `stopPropagation` is called
stops dispatch if `stopPropagation` is called in replay
stops dispatch if `stopImmediatePropagation` is called
is action key event fails on invalid key
is action key event mac enter
recreate touch event with touches as click
recreate touch event with changed touches as click
recreate touch event with empty changedTouches and touches as click
recreate touch event as click, has touch data
recreate touch event as click, behavior
recreate touch event as click, time stamp
queues events until dispatcher is registered
dispatches event for `webkitanimationend` alias event type
cleanUp removes all event listeners and containers
exposes event handlers with `handler()`
dispatches events in outer container
dispatches events in inner container
dispatches events in outer container, inner registered first
dispatches events in inner container, inner container registered first
dispatches events in inner container, inner container removed
early events are dispatched
early capture events are dispatched
early events are dispatched when target is cleared
early mouseout dispatched as mouseleave and mouseout
early mouseout dispatched as only mouseleave
should support emitting values via BehaviorSubject
should support emitting values via ReplaySubject
should support emitting values via Subject
should support emitting values via EventEmitter
should support explicit unsubscribing
should not yield more source values if directive is destroyed
should be a noop when the source observable completes
should not handle errors from the source observable
should work with basic `output()`
should complete observable upon directive destroy
should allow subscription
should complete an observable when the current context is destroyed
should allow a manual DestroyRef to be passed
should produce an observable that tracks a signal
should propagate errors from the signal
should still monitor the signal if the Observable has no active subscribers
stops monitoring the signal once injector is destroyed
does not track downstream signal reads in the effect
should reflect the last emitted value of an Observable
should notify when the last emitted value of an Observable changes
should propagate an error returned by the Observable
should unsubscribe when the current context is destroyed
should unsubscribe when an explicitly provided injector is destroyed
should not unsubscribe when manualCleanup is passed
should throw the error back to RxJS if rejectErrors is set
should return `undefined` if read before a value is emitted
should not throw if a value is emitted before called
should not throw if a value emits synchronously on creation
should return the initial value if called before a value is emitted
should not return the initial value if called after a value is emitted
should not update for values considered equal
should update when values are reference equal but equality function says otherwise
should support `toSignal` as a class member initializer

should not throw if non-existent symbols are imported with rootDirs
should throw an error if no files match the passed-in path
should throw an error if a path outside of the project is passed in
should log template migration errors to the console
should flag async imports and usages
should detect build tsconfig path inside of angular.json file
should detect test tsconfig path inside of angular.json file
should detect test tsconfig path inside of .angular.json file
should not return duplicate tsconfig files
should throw an error if the passed in path is a file
should throw an error if the component is in the same file as the routes declaration
should not migrate already lazy loaded standalone components
should not migrate routes if the routes array doesnt have type and is not referenced
should run with the expected timing
should refresh views if state changed before user-defined render hooks
should run with the correct timing
should run with ComponentFixture.detectChanges
should run hooks once after tick even if there are multiple root views
should unsubscribe when calling destroy
should defer nested hooks to the next cycle
should pass data between phases
allows writing to a signal in afterRender
allows updating state and calling markForCheck in afterRender
allows updating state and calling markForCheck in afterRender, outside of change detection
throws error when causing infinite updates
should not run
should run
should sanitize attribute values
should handle all varieties of interpolation
should support two-way binding to a signal
should support two-way binding to a non-signal value
should support two-way binding a signal to a non-model input/output pair
should support a one-way property binding to a model
should emit to the change output when the model changes
should not emit to the change event when then property binding changes
should support binding to the model input and output separately
should support two-way binding to a model with an alias
should support binding to an aliased model input and output separately
should throw if a required model input is accessed too early
should throw if a required model input is updated too early
should stop emitting to the output on destroy
should support inherited model inputs
should reflect changes to a two-way-bound signal in the DOM
should support ngOnChanges for two-way model bindings
should not throw for mixed model and output subscriptions
should support two-way binding to a signal @for loop variable
should support emitting values
should support emitting void values
should error when emitting to a destroyed output
should error when subscribing to a destroyed output
should run listeners outside of `emit` reactive context
should support using a `Subject` as source
should support using a `BehaviorSubject` as source
should support using an `EventEmitter` as source
should support lazily creating an observer upon subscription
should report subscription listener errors to `ErrorHandler` and continue
should be possible to bind to an input
should be possible to use an input in a computed expression
should be possible to use an input in an effect
should support transforms
should not run transforms lazily
should throw error if a required input is accessed too early
should be possible to bind to an inherited input
should support two-way binding to signal input and @Output decorated member
should query for multiple elements in a template
should return the same array instance when there were no changes in results
should not mark signal as dirty when a child query result does not change
should return the same array instance when there were no changes in results after view manipulation
should be empty when no query matches exist
should run content queries defined on components
should run content queries defined on directives
should not return partial results during the first-time view rendering
should not dirty a children query when a list of matches does not change - a view with matches
should not dirty a children query when a list of matches does not change - a view with another container
should allow specifying both types of queries in one component
should allow combination via inheritance of both types of queries in one component
should bootstrap using #id selector
should bootstrap using one of selectors from the list
should allow injecting VCRef into the root (bootstrapped) component
should cleanup ApplicationRef when Injector is destroyed
should cleanup ApplicationRef when ComponentRef is destroyed
should not throw in case ComponentRef is destroyed and Injector is destroyed after that
should not throw in case Injector is destroyed and ComponentRef is destroyed after that
should throw when standalone component is used in @NgModule.bootstrap
should throw when standalone component wrapped in `forwardRef` is used in @NgModule.bootstrap
should unsubscribe from `onError` when Injector is destroyed
should not log an error when passing identical bootstrap options
should properly remove stale dependencies from the signal graph
continues to refresh views until none are dirty
refreshes root view until it is no longer dirty
refreshes all views attached to ApplicationRef until no longer dirty
marks view dirty
does not refresh a component when a signal notifies but isn't actually updated
should not mark components as dirty when signal is read in a constructor of a child component
should not mark components as dirty when signal is read in an input of a child component
should not mark components as dirty when signal is read in a query result setter
can read a signal in a host binding in root view
can read a signal in a host binding
should be able to write to signals during change-detecting a given template, in advance()
should allow writing to signals during change-detecting a given template, at the end
does not refresh view if signal marked dirty but did not change
refreshes entire component, including embedded views, when signal updates
tracks signal updates if embedded view is change detected directly before attaching
refreshes when signal changes, but does not refresh non-dirty parent
does not run afterViewChecked hooks because parent view was not dirty (those hooks are executed by the parent)
can refresh the root of change detection if updated after checked
destroys all signal consumers when destroying the view tree
should detect changes for embedded views attached to ApplicationRef
should not detect changes for OnPush embedded views when they are not dirty
should not detect changes in child embedded views while they are detached
should not detect changes in child component views while they are detached
should mark OnPush ancestor of dynamically created component views as dirty
should support re-enterant change detection
should call doCheck even when OnPush components are not dirty
should check OnPush components in update mode when inputs change
should check OnPush components in update mode when component events occur
should not check OnPush components in update mode when parent events occur
should check parent OnPush components in update mode when child events occur
should NOT call component doCheck when called by a component
should NOT check the component parent when called by a child component
should check component children when called by component if dirty or check-always
should not group detectChanges calls (call every time)
should support call in ngOnInit
should support call in ngDoCheck
should call lifecycle hooks on detached components
should never schedule change detection on its own
should NOT call lifecycle hooks
throws expression changed with useNgZoneOnStable
does not throw expression changed with useNgZoneOnStable if there is a change detection scheduled
throws expression changed with interval
does not throw expression changed with interval if change detection is scheduled
does not throw expression changed with interval if OnPush component an no exhaustive
should set up the component under test correctly
should CD at insertion and declaration
should CD at insertion point only
is not checked if detectChanges is called in declaration component
is checked as part of CheckNoChanges pass
should set up component under test correctly
does not cause infinite change detection if transplanted view is dirty and destroyed before refresh
should update declaration view when there is a change in the declaration and insertion is marked dirty
updates the declaration view when there is a change to either declaration or insertion
should update when there is a change to insertion and declaration is marked dirty
should update insertion view and template when there is a change to insertion and insertion marked dirty
should not refresh the template if nothing is marked dirty
should refresh template when declaration and insertion are marked dirty
should not fail when change detecting detached transplanted view
should work when change detecting detached transplanted view already marked for refresh
should work when re-inserting a previously detached transplanted view marked for refresh
should detect changes when attached
should not detect changes
should not detect changes on mixed detached/attached refs
does not cause error if running change detection on detached view
backwards reference still updated if detaching root during change detection
does not cause infinite loops with exhaustive checkNoChanges
should update a loop
should support ngForOf context variables
should instantiate directives inside directives properly in an ngFor
should retain parent view listeners when the NgFor destroy views
should support multiple levels of embedded templates
should support multiple levels of embedded templates with listeners
should support skipping contexts
should support context for 9+ levels of embedded templates
should support sibling ngIfs
should handle nested ngIfs with no intermediate context vars
should invoke onDestroy only once when a component is registered as a provider
should encapsulate host
should encapsulate host and children with different attributes
should clear the contents of dynamically created component when it's attached to ApplicationRef
components should not share the same context when creating with a root element
should attach debug info to component using ɵsetClassDebugInfo runtime
should handle projected containers inside other containers
should handle projection into element containers at the view root
should handle projection of views with element containers at the root
should handle re-projection at the root of an embedded view
should work when matching the element name
should work when matching attributes
should work when matching classes
should ignore synthesized attributes (e.g. ngTrackBy)
should be able to use data bindings in the fallback content
should be able to use event listeners in the fallback content
should create and destroy directives in the fallback content
should not instantiate directives inside the fallback content
should create, remove and move views corresponding to items in a collection
should loop over iterators that can be iterated over only once
should work correctly with trackBy index
should support empty blocks
should be able to use pipes injecting ChangeDetectorRef in for loop blocks
should be able to access a directive property that is reassigned in a lifecycle hook
should expose variables both under their real names and aliases
should have access to the host context in the track function
should warn about duplicated keys when using arrays
should warn about duplicated keys when using iterables
should warn about duplicate keys when keys are expressed as symbols
should not warn about duplicate keys iterating over the new collection only
should warn about collection re-creation due to identity tracking
should NOT warn about collection re-creation when a view is not considered expensive
should NOT warn about collection re-creation when a trackBy function is not identity
should delete views in the middle
should insert views in the middle
should replace different items
should move and delete items
should correctly attach and detach views with duplicated keys
should project an @for with a single root node into the root node slot
should allow @for and @empty blocks to be projected into different slots
should project an @for with multiple root nodes into the catch-all slot
should project an @for with a single root node with a data binding
should project an @for with an ng-container root node
should project an @for with single root node and comments into the root node slot
should project the root node when preserveWhitespaces is enabled and there are no whitespace nodes
should not project the root node when preserveWhitespaces is enabled and there are whitespace nodes
should not project the root node across multiple layers of @for
should project an @for with a single root template node into the root node slot
should invoke a projected attribute directive at the root of an @for once
should invoke a projected template directive at the root of an @for once
should invoke a directive on a projected ng-template at the root of an @for once
should expose expression value in context
should not expose the aliased expression to `if` and `else if` blocks
should expose the context to nested conditional blocks
should expose the context to listeners inside nested conditional blocks
should expose expression value passed through a pipe in context
should be able to use pipes in conditional expressions
should project an @if with a single root node with a data binding
should project an @if with a single root template node into the root node slot
should invoke a projected attribute directive at the root of an @if once
should invoke a projected template directive at the root of an @if once
should invoke a directive on a projected ng-template at the root of an @if once
should not match a directive with a class-based selector only meant for content projection
should show a template based on a matching case
should be able to use a pipe in the switch expression
should be able to use a pipe in the case expression
should be able to use pipes injecting ChangeDetectorRef in switch blocks
should project @switch cases into appropriate slots when selectors are used for all cases
should project @switch cases into appropriate slots when selectors are used for some cases
should copy the template function of a component definition from parent to child
should use the predefined ngCspNonce when inserting styles with shadow DOM encapsulation
should preserve execution order of dependencies
should support `on immediate` condition
should support minimum and after conditions
should support @placeholder with `minimum`
should keep rendering @placeholder if trigger happened later
should support @loading with `minimum`
should support @loading with `after` and `minimum`
should skip @loading when resources were prefetched
should render an error block when loading fails
should report an error to the ErrorHandler if no `@error` block is defined
should not render `@error` block if loaded component has errors
should query for components within each block
should be able to prefetch resources
should handle a case when prefetching fails
should work when loading and prefetching were kicked off at the same time
should support `prefetch on idle` condition
should trigger prefetching based on `on idle` only once
should trigger fetching based on `on idle` only once
should support `prefetch on immediate` condition
should delay nested defer blocks with `on idle` triggers
should not request idle callback for each block in a for loop
should clear idle handlers when defer block is triggered
should load the deferred content when the trigger receives a keyboard event
should unbind the trigger events when the deferred block is loaded
should unbind the trigger events when the trigger is destroyed
should unbind the trigger events when the deferred block is destroyed
should prefetch resources on interaction
should prefetch resources on interaction with an implicit trigger
should load the deferred content when the trigger is hovered
should load the deferred content with an implicit trigger element
should support multiple deferred blocks with the same hover trigger
should prefetch resources on hover
should prefetch resources when an implicit trigger is hovered
should trigger based on `on timer` condition
should trigger nested `on timer` condition
should trigger prefetching based on `on timer` condition
should trigger prefetching and rendering based on `on timer` condition
should clear timeout callbacks when defer block is triggered
should stop observing the trigger when the deferred block is loaded
should stop observing the trigger when the trigger is destroyed
should stop observing the trigger when the deferred block is destroyed
should disconnect the intersection observer once all deferred blocks have been loaded
should prefetch resources when the trigger comes into the viewport
should prefetch resources when an implicit trigger comes into the viewport
should load deferred content in a loop
should unbind `interaction` trigger events when the deferred block is loaded
should unbind `hover` trigger events when the deferred block is loaded
should provide access to tokens from imported NgModules
should inject correct `ActivatedRoutes` in components within defer blocks
should removal single destroy callback if many identical ones are registered
should collect providers from NgModules
should collect all providers when a module is used twice with different providers (via ModuleWithProviders)
should process nested arrays within a provider set of ModuleWithProviders type
should process nested arrays within provider set of an imported ModuleWithProviders type
should inject directives in the correct order in a for loop
should create a provider that uses `forwardRef` inside `providedIn`
should instantiate correct class when undecorated class extends an injectable
should be available if used in conjunction with other tokens
should sync ViewContainerRef state between all injected instances
should return the function's return value
should work with an NgModuleRef injector
should not lookup outside of the host element when Host is used in `useFactory`
should not inject data-bound attributes
should match directives with attribute selectors on bindings
should not accidentally set inputs from attributes extracted from bindings / outputs
should match directives on ng-template
should match directives on ng-template created by * syntax
should match directives on i18n-annotated attributes
should match a mix of bound directives and classes
should match classes to directive selectors without case sensitivity
should match class selectors on ng-template
should NOT match class selectors on ng-template created by * syntax
should NOT match classes to directive selectors
should match attributes to directive selectors without case sensitivity
should not set structural directive inputs from static element attrs
should not set structural directive inputs from element bindings
should allow directive inputs specified using the object literal syntax in @Input
should allow directive inputs specified using the object literal syntax in the `inputs` array
should transform incoming input values
should transform incoming input values when declared through the `inputs` array
should transform incoming static input values
should transform incoming values for aliased inputs
should transform incoming inherited input values
should transform aliased inputs coming from host directives
should use the transformed input values in ngOnChanges
should invoke the transform function with the directive instance as the context
should transform value assigned using setInput
should return null if no component
should throw when called on non-element
should return component from element
should not throw when called on a destroyed node
should return context from element
should return null for destroyed node
should return element on component
should return element on directive
should return element for destroyed node
should return node-injector from element
should return node-injector from component with providers
should return node-injector from directive without providers
should retrieve injector from destroyed node
should return empty array if no directives
should return just directives
should return empty array for destroyed node
should return containing component of child component
should return containing component of any view element
should return containing component of child directive
should retrieve empty map
should retrieve the local map
should retrieve from a destroyed node
should return root components from component
should return an empty array for a destroyed node
should return no listeners
should return the listeners
should return no listeners for destroyed node
should retrieve tokens
should retrieve tokens from destroyed node
should work on components
should not collect duplicate providers
should support nested arrays of providers
should not cause problems if detectChanges is called when a property updates
should support consecutive components with host bindings
should support host bindings on second template pass
should support host bindings in for loop
should bind to host styles
should bind to host styles on containers
should handle host bindings with the same name as a primitive value
should handle host bindings with quoted names
should emit to an output of a host that has the same name as an exposed output of a host directive
should emit to an output of a host that has the same name as the alias of a host directive output
should not expose the same output more than once
should emit to outputs from different host directives that have been aliased to the same name
should support named interpolations
should correctly bind to context in nested template
should work correctly with event listeners
should support conditional blocks
should support switch blocks
should be able to handle deep nested levels with templates
should create a single dynamic TNode for ICU
should support multiple ICUs
multiple
inside HTML elements
inside template directives
inside ng-container
nested
nested with interpolations in "other" blocks
should return the correct plural form for ICU expressions when using "ro" locale
projection
inside a container when creating a view via vcr.createEmbeddedView
with nested ICU expression and inside a container when creating a view via vcr.createEmbeddedView
should use metadata from container element if a message is a single ICU
should support ICUs without "other" cases
should support nested ICUs without "other" cases
should support ICUs with pipes
should handle select expressions without an `other` parameter inside a template
should render an element whose case did not match initially
should remove an element whose case matched initially, but does not anymore
multiple attributes
in nested template
should process i18n attributes on explicit <ng-template> elements
should match directive only once in case i18n attrs are present on inline template
should apply i18n attributes during second template pass
should work with directives and host bindings
should project bare ICU expressions
should project ICUs in i18n blocks
detached nodes should still be part of query
should create ICU with attributes
should ignore non-instantiated ICUs on update
should support different ICUs cases for each *ngFor iteration
should ensure that multiple child classes don't cause multiple parent execution
should be inherited from undecorated super class which inherits from decorated one
ngOnInit
ngDoCheck
ngAfterContentInit
ngAfterContentChecked
ngAfterViewInit
ngAfterViewChecked
ngOnDestroy
should inherit ContentChildren queries
should inherit ViewChildren queries
should emit the correct DI events when a service is injected with injection flags
should be able to determine injector type and name
should be able to get the providers from a components injector
should be able to get determine if a provider is a view provider
should be able to determine import paths after module provider flattening in the NgModule bootstrap case
should be able to determine import paths after module provider flattening in the standalone component case
should be able to determine import paths after module provider flattening in the standalone component case with lazy components
should be able to determine providers in an injector that was created manually
should be able to get injector providers for element injectors created by components rendering in an ngFor
should be able to get injector providers for element injectors created by components rendering in a @for
should be able to determine which injector dependencies come from
should be able to recursively determine dependencies of dependencies by using the providedIn field
should be able to inspect injector hierarchy structure
should render and update basic "Hello, World" template
should update bindings
should support binding to styles with suffix
should support CSS class toggle
should only call inherited host listeners once
should support inherited view queries
should not set inputs after destroy
should inherit outputs from undecorated superclasses
should inherit host bindings from undecorated superclasses
should inherit host bindings from undecorated grand superclasses
should inherit host listeners from undecorated superclasses
should inherit host listeners from superclasses once
should inherit host listeners from grand superclasses once
should inherit host listeners from grand grand superclasses once
should not invoke safe calls more times than plain calls
should handle shorthand property declarations in templates
should handle numeric separators in templates
should handle nested calls to a safe access methods in templates
should remove child LView from the registry when the root view is destroyed
should handle content inside <template> elements
should be marked with `firstUpdatePass` up until the template and host bindings are evaluated
tView.firstUpdatePass should be applied immediately after the first embedded view is processed
should apply triggers for a list of items when they are sorted and reSorted
should insert and remove views in the correct order when animations are present
should update the value of a @let declaration over time
should be able to use @let declarations inside event listeners
should be able to access @let declarations through multiple levels of views
should be able to access @let declarations from parent view before they are declared
should throw if a @let declaration is accessed before it is initialized
should be able to use pipes injecting ChangeDetectorRef in a let declaration
should evaluate unused let declarations
should resolve a @let declaration correctly within an embedded view that uses a value from parent view and cannot be optimized
should be able to use @for loop variables in @let declarations
should correctly support updating one Input among many
should call onChanges method after inputs are set in creation and update mode
should call parent onChanges before child onChanges
should call all parent onChanges across view before calling children onChanges
should call onChanges every time a new view is created with ngIf
should call onChanges in hosts before their content children
should call onChanges in host and its content children before next host
should be called on directives after component by default
should be called on directives before component if component injects directives
should be called on directives on an element
should call onChanges properly in for loop
should call onChanges properly in for loop with children
should call all hooks in correct order when several directives on same node
should call hooks after setting directives inputs
should be called on root component
should call onInit every time a new view is created (if block)
should call onInit properly in for loop
should call onInit properly in for loop with children
should call doCheck on every refresh
should be called only in creation mode
should be called on root component in creation mode
should be called in correct order in a for loop
should be called in correct order in a for loop with children
should be called on creation and not in update mode
should be called in correct order with ngFor
should be called in correct order with for loops with children
should call ngAfterViewChecked every update
should call ngAfterViewChecked with bindings
should call destroy when view is removed
should be called on every iteration of a destroyed for loop
should call destroy properly if view also has listeners
should call all hooks in correct order
should call all hooks in correct order with children
should call all hooks in correct order with view and content
should not throw when calling detectChanges from a setter in the presence of a data binding, ngOnChanges and ngAfterViewInit
should call hooks in the correct order when calling detectChanges in a setter
should call function on event emit
should call function chain on event emit
should support listeners with specified set of args
should be able to access a property called $event using `this`
should coalesce multiple event listeners for the same event on the same element
should coalesce multiple event listeners in presence of queries
should try to execute remaining coalesced listeners if one of the listeners throws
should prevent default if any of the listeners returns false
should not subscribe twice to the output when there are 2 coalesced listeners
should maintain the order in which listeners are registered
should destroy listeners when view is removed
should destroy listeners when views generated using *ngFor are removed
should destroy listeners when nested view is removed
should bind global event listeners on an ng-container directive host
should bind global event listeners on an ng-template directive host
should bind global event listeners on a structural directive host
should clear bootstrapped component contents
should log an error on unknown props if NO_ERRORS_SCHEMA is absent
should log an error on unknown props of `ng-template` if NO_ERRORS_SCHEMA is absent
should log an error on unknown props of `ng-container` if NO_ERRORS_SCHEMA is absent
should log an error on unknown props of `ng-content` if NO_ERRORS_SCHEMA is absent
should log an error about unknown element without CUSTOM_ELEMENTS_SCHEMA for element with dash in tag name
should log an error about unknown element for a standalone component without CUSTOM_ELEMENTS_SCHEMA
should log an error about unknown element without CUSTOM_ELEMENTS_SCHEMA for element without dash in tag name
should report unknown property bindings on ng-content
should report unknown property bindings on ng-container
should not log unknown element warning for AOT-compiled components
should not log unknown property warning for AOT-compiled components
should call component output function when event is emitted
should support more than 1 output function on the same node
should eval component output expression when event is emitted
should unsubscribe from output when view is destroyed
should unsubscribe from output in nested view
should work properly when view also has listeners and destroys
should fire event listeners along with outputs if they match
should work with two outputs of the same name
should work with an input and output of the same name
contributes to applicationRef stableness
should allow adding and removing tasks influencing stability
should pick a Pipe defined in `declarations` over imported Pipes
should respect imported module order when selecting Pipe (last imported Pipe is used)
should call impure pipes on each change detection run
should not cache impure pipes
should call ngOnDestroy on pipes
should inject the ChangeDetectorRef of the containing view when using pipe inside a component input
should inject the ChangeDetectorRef of the containing view when using pipe inside a component input which has child nodes
should display the last known result from a pure pipe when it throws
should throw an error if a pipe is not found inside an inline template
should throw an error if a pipe is not found inside a projected content
should throw an error if a pipe is not found inside a projected content in an inline template
should throw an error if a pipe is not found in a property binding
should throw an error if a pipe is not found inside a structural directive input
should invoke the profiler on event handler
should invoke the profiler on event handler even when it throws
should invoke the profiler on output handler execution
should call the profiler on lifecycle execution
should use the sanitizer in bound properties
should check input properties before setting (directives)
should support mixed element properties and input properties
should check that property is not an input property before setting (component)
should set input property if there is an output first
should support unrelated element properties at same index in if-else block
should process attributes and outputs properly together
should support attributes at same index inside an if-else block
should process attributes properly inside a for loop
should not throw on synthetic property bindings when a directive on the same element injects ViewContainerRef
should handle all flavors of interpolated properties
should not allow unsanitary urls in interpolated properties
should not allow unsanitary urls in interpolated properties, even if you are tricky
should support the chained use cases of propertyInterpolate instructions
should NOT inherit providers
should not invoke ngOnDestroy on multi providers created via useFactory
should have access to viewProviders within the same component
should have access to viewProviders of the host component
should support an array literals inside fn calls
should work up to 8 bindings
should support an object literal
should support expressions nested deeply in object/array literals
should support multiple view instances with multiple bindings
should not share object literals across elements
should not share array literals across elements
should return ElementRefs when HTML elements are labeled and retrieved
should support selecting InjectionToken
should return TemplateRefs when templates are labeled and retrieved
should support static view child queries inherited from superclasses
should support multiple static view queries (multiple template passes)
should allow for view queries to be inherited from a directive
should support ViewChildren query inherited from undecorated superclasses
should support ViewChildren query inherited from undecorated grand superclasses
should return Component instances when Components are labeled and retrieved
should support static content child queries inherited from superclasses
should support multiple content query components (multiple template passes)
should support ContentChildren query inherited from undecorated superclasses
should support ContentChildren query inherited from undecorated grand superclasses
should match shallow content queries in views inserted / removed by ngIf
should support content queries for directives within repeated embedded views
should not match directive host with content queries
should report results to appropriate queries where deep content queries are nested
should support nested shallow content queries
should respect shallow flag on content queries when mixing deep and shallow queries
should support view and content queries matching the same element
should generate an empty QueryList for root components
should match directives on elements that used to be wrapped by a required parent in HTML parser
should match elements with local refs inside <ng-container>
should match elements with local refs inside nested <ng-container>
should match directives inside <ng-container>
should match directives inside nested <ng-container>
should cross child ng-container when query is declared on ng-container
should match nodes when using structural directives (*syntax) on <ng-container>
should match directives on <ng-container> when crossing nested <ng-container>
should query using type predicate and read ElementRef
should query using type predicate and read another directive type
should not add results to query if a requested token cant be read
should query using local ref and read ElementRef by default
should query for multiple elements and read ElementRef by default
should read ElementRef from an element when explicitly asked for
should query for <ng-container> and read ElementRef with a native element pointing to comment node
should query for <ng-container> and read ElementRef without explicit read option
should read ViewContainerRef from element nodes when explicitly asked for
should read ViewContainerRef from ng-template nodes when explicitly asked for
should read ElementRef with a native element pointing to comment DOM node from ng-template
should read TemplateRef from ng-template by default
should read TemplateRef from ng-template when explicitly asked for
should read component instance if element queried for is a component host
should read component instance with explicit exportAs
should read directive instance if element queried for has an exported directive with a matching name
should read all matching directive instances from a given element
should read multiple locals exporting the same directive from a given element
should query multiple locals on the same element
should match on exported directive name and read a requested token
should support reading a mix of ElementRef and directive instances
should not add results to selector-based query if a requested token cant be read
should not add results to directive-based query if only read token matches
should not add results to TemplateRef-based query if only read token matches
should not add results to the query in case no match found (via TemplateRef)
should query templates if the type is TemplateRef (and respect "read" option)
should match using string selector and directive as a read argument
should allow observing changes to query list
should only fire if the content of the query changes
should report results in views inserted / removed by ngIf
should report results in views inserted / removed by ngFor
should NOT notify on changes when a given view is removed and re-inserted at the same index
should support a mix of content queries from the declaration and embedded view
should report results when different instances of TemplateRef are inserted into one ViewContainerRefs
should report results when the same TemplateRef is inserted into different ViewContainerRefs
should report results from views inserted in a lifecycle hook
should query by provider super-type in an embedded view
should flatten multi-provider results
should flatten multi-provider results when crossing ng-template
should allow null / undefined provider value in a [View/Content]Children queries
should match string injection token in a ViewChildren query
should match string injection token in a ContentChildren query
should pass in the component styles directly into the underlying renderer
should not invoke renderer destroy method for embedded views
should work with animated components
should call renderer.destroyNode for each node destroyed
should call renderer.destroy for each component destroyed
should work when a directive sets a security-sensitive attribute as a static attribute
should work when a security-sensitive attribute is set between `src` and `srcdoc`
should work when a directive sets a security-sensitive attribute before setting `src`
should work when a security-sensitive attribute is set as a static attribute
should work when a security-sensitive attributes are marked for translation
should render a recursive standalone component
should apply style properties that require quote wrapping
should support css variables
should support css variables with numbers in their name inside a host binding
should support case-sensitive css variables
should recover from exceptions
should render initial styling for repeated nodes that a component host
should be able to bind zero
should be able to bind a SafeValue to backgroundImage
should set !important on a single property
should set !important that is not preceded by a space
should set !important on a dash-case property
should set !important on multiple properties
should set !important if some properties are !important and other are not
should not write to the native element if a directive shadows the class input
should support interpolations inside a class binding
should support interpolations inside a style binding
should support interpolations inside a style property binding
should support interpolations when a style property has a unit suffix
should not write to a `class` input binding in the event that there is no static class value
should write to [class] binding during `update` mode if there is an instantiation-level value
should write to a `class` input binding if there is a static class value
should write to a `class` input binding if there is a static class value and there is a binding value
should only run stylingFlush once when there are no collisions between styling properties
should combine all styling across the template, directive and component host bindings
should properly apply styling across sub and super class directive host bindings
should apply map-based style and class entries
should resolve styling collisions across templates, directives and components for prop and map-based entries
should only apply each styling property once per CD across templates, components, directives
should apply a unit to a style before writing it
should evaluate follow-up [style] maps even if a former map is null
should evaluate initial style/class values on a list of elements that changes
should create and update multiple class bindings across multiple elements in a template
should evaluate styling across the template directives when there are multiple elements/sources of styling
should evaluate styling across the template and directives within embedded views
should allow detectChanges to be run in a property change that causes additional styling to be rendered
should allow detectChanges to be run in a hook that causes additional styling to be rendered
should recover from an error thrown in styling bindings
should combine static host classes with component "class" host attribute
should support `styles` as a string
should support sanitizer value in the [style] bindings
should return root render nodes for an embedded view instance
should return an empty array for embedded view with no nodes
should descend into view containers on ng-template
should descend into view containers on an element
should descend into view containers on ng-container
should descend into element containers
should return an empty array for an embedded view with projection and no projectable nodes
should return an empty array for an embedded view with multiple projections and no projectable nodes
should return projectable nodes when provided
should return an empty collection when no projectable nodes were provided
should return an empty collection when projectable nodes were provided but there are no slots
should warn if the context of an embedded view ref is replaced
should handle all flavors of interpolated text
should stringify a symbol
should use comment node of host ng-container as insertion marker
should view queries in dynamically created components
should not blow up on destroy when inserting a view that is already attached
should move views if they are already attached
should insert a view already inserted into another container
should insert detached views in move()
should not throw when calling remove() on an empty container
should not throw when calling detach() on an empty container
when nested ng-container
when ViewContainerRef is on a ng-container
when ViewContainerRef is on an element
when ViewContainerRef is on a ng-template
when ViewContainerRef is on an element inside a ng-container
when ViewContainerRef is on an element inside a ng-container with i18n
when ViewContainerRef is on an element, and i18n is on the parent ViewContainerRef
should return the number of embedded views
should retrieve a ViewRef from its index, and vice versa
should handle out of bounds cases
should return -1 as indexOf when no views were inserted
should move embedded views and associated DOM nodes without recreating them
should detach the right embedded view when an index is specified
should detach the last embedded view when no index is specified
should remove the right embedded view when an index is specified
should remove the last embedded view when no index is specified
should not throw when view removes another view upon removal
should work on elements
should work with multiple instances of view container refs
should work on templates
should work without Injector and NgModuleRef
should work with NgModuleRef and Injector
should support projectable nodes
should support reprojection of projectable nodes
should support many projectable nodes with many slots
should return ComponentRef with ChangeDetectorRef attached to root view
should take provided `options` arguments into account
should insert elements in the proper order when template root is an ng-container
should insert elements in the proper order when template root is an ng-container and is wrapped by an ng-container
should insert elements in the proper order when template root is an ng-container and first node is a ng-container
should insert elements in the proper order when template root is an ng-container, wrapped in an ng-container with the root node as an ng-container
should insert elements in the proper order when the first child node is an ICU expression
should call all hooks in correct order when creating with createEmbeddedView
should call all hooks in correct order when creating with createComponent
should support host bindings on dynamically created components
should handle empty re-projection into the root of a view
should check bindings for components dynamically created by root component
should create deep DOM tree immediately for dynamically created components
should insert into an empty container, at the front, in the middle, and at the end
should insert embedded views into ViewContainerRef injected by querying <ng-container>
should properly insert before views in a ViewContainerRef injected on ng-container
should render even if a directive constructor throws in the first create pass
should match a static query, even if its setter throws in the first create pass
should render a recursive component if it throws during the first creation pass
should continue detecting changes if a directive throws in its constructor
should remove view ref from view container when destroyed
should only require one flushMicrotasks call to kick off animation callbacks
should emit the correct totalTime value for a noop-animation
should wait until the animations are finished until continuing
should wait for a noop animation to finish before continuing
should wait for active animations to finish even if they have already started
should trigger a state change animation from void => state
should support nested animation triggers
should allow a transition to use a function to determine what method to run
should allow a transition to use a function to determine what method to run and expose any parameter values
should allow a state value to be `0`
should always cancel the previous transition if a follow-up transition is not matched
should only turn a view removal as into `void` state transition
should stringify boolean triggers to `1` and `0`
should understand boolean values as `true` and `false` for transition animations
should understand boolean values as `true` and `false` for transition animations and apply the corresponding state() value
should not throw an error if a trigger with the same name exists in separate components
should trigger a state change animation from state => state on the component host element
should trigger a leave animation when the inner has ViewContainerRef injected
should trigger a leave animation when the inner components host binding updates
should wait for child animations before removing parent
should trigger a leave animation when the outer components element binding updates on the host component element
should trigger a leave animation when both the inner and outer components trigger on the same element
should not throw when the host element is removed and no animation triggers
should properly evaluate pre/auto-style values when components are inserted/removed which contain host animations
should cancel and merge in mid-animation styles into the follow-up animation, but only for animation keyframes that start right away
should provide the styling of previous players that are grouped
should provide the styling of previous players that are grouped and queried and make sure match the players with the correct elements
should properly balance styles between states even if there are no destination state styles
should not apply the destination styles if the final animate step already contains styles
should invoke an animation trigger that is state-less
should retain styles on the element once the animation is complete
should retain state styles when the underlying DOM structure changes even if there are no insert/remove animations
should retain state styles when the underlying DOM structure changes even if there are insert/remove animations
should keep/restore the trigger value when there are move operations (with *ngFor + trackBy)
should animate removals of nodes to the `void` state for each animation trigger, but treat all auto styles as pre styles
should properly cancel all existing animations when a removal occurs
should not run inner child animations when a parent is set to be removed
should cancel all active inner child animations when a parent removal animation is set to go
should destroy inner animations when a parent node is set for removal
should allow inner removals to happen when a non removal-based parent animation is set to animate
should make inner removals wait until a parent based removal animation has finished
should detect trigger changes based on object.value properties
should not render animations when the object expression value is the same as it was previously
should update the final state styles when params update even if the expression hasn't changed
should substitute in values if the provided state match is an object with values
should retain substituted styles on the element once the animation is complete if referenced in the final state
should only evaluate final state param substitutions from the expression and state values and not from the transition options 
should apply default params when resolved animation value is null or undefined
should not flush animations twice when an inner component runs change detection
should detect when a value has incremented
should detect when a value has decremented
should animate nodes properly when they have been re-ordered
should not animate i18n insertBefore
should trigger a `start` state change listener for when the animation changes state from void => state
should trigger a `done` state change listener for when the animation changes state from a => b
should handle callbacks for multiple triggers running simultaneously
should handle callbacks for multiple triggers running simultaneously on the same element
should handle a leave animation for multiple triggers even if not all triggers have their own leave transition specified
should trigger a state change listener for when the animation changes state from void => state on the host element
should fire callbacks on a sub animation once it starts and finishes
should fire callbacks and collect the correct the totalTime and element details for any queried sub animations
should disable child animations when set to true
should ensure state() values are applied when an animation is disabled
should disable animations for the element that they are disabled on
should respect inner disabled nodes once a parent becomes enabled
should properly handle dom operations when disabled
should properly resolve animation event listeners when disabled
should work when there are no animations on the component handling the disable/enable flag
should treat the property as true when the expression is missing
should respect parent/sub animations when the respective area in the DOM is disabled
should convert hyphenated properties to camelcase by default
should convert hyphenated properties to camelCase by default that are auto/pre style properties
should throw neither state() or transition() are used inside of trigger()
should apply the delay specified in the animation
should apply the delay specified in the animation using params
should apply the delay specified in the useAnimation call
should apply the delay specified in the useAnimation call using params
should combine the delays specified in the animation and the useAnimation with that of the caller
should combine multiple errors together into one exception when an animation fails to be built
should not throw an error if styles overlap in separate transitions
should add the transition provided delay to all the transition's timelines
should keep (transition from/to) styles defined in different timelines
should show a warning if the animation tries to transition a non-animatable property
should not show a warning if the animation tries to transition an animatable property
should show a single warning if the animation tries to transition multiple non-animatable properties
should only warn on non-animatable properties if the animation tries to transition both animate and non-animatable properties
should be able to query all elements that contain animation triggers via @*
should be able to query currently animating elements via :animating
should be able to query triggers directly by name
should be able to query all active animations using :animating in a query
should be able to query all actively queued animation triggers via `@*:animating`
should collect styles for the same elements between queries
should retain style values when :self is used inside of a query
should properly apply stagger after various other steps within a query
should properly apply pre styling before a stagger is issued
should apply a full stagger step delay if the timing data is left undefined
should persist inner sub trigger styles once their animation is complete
should find newly inserted items in the component via :enter
should cleanup :enter and :leave artifacts from nodes when any animation sequences fail to be built
should find elements that have been removed via :leave
should find :enter nodes that have been inserted around non enter nodes
should find :enter/:leave nodes that are nested inside of ng-container elements
should properly cancel items that were queried into a former animation and pass in the associated styles into the follow-up players per element
should not remove a parent container if its contents are queried into by an ancestor element
should only retain a to-be-removed node if the inner queried items are apart of an animation issued by an ancestor
should finish queried players in an animation when the next animation takes over
should finish queried players when the previous player is finished
should allow multiple triggers to animate on queried elements at the same time
should cancel inner queried animations if a trigger state value changes, but isn't detected as a valid transition
should allow for queried items to restore their styling back to the original state via animate(time, "*")
should query elements in sub components that do not contain animations using the :enter selector
should query elements in sub components that do not contain animations using the :leave selector
should limit results when a limit value is passed into the query options
should support negative limit values by pulling in elements from the end of the query
should animate a sub trigger that exists in an inner element in the template
should run and operate a series of triggers on a list of elements with overridden timing data
should silently continue if a sub trigger is animated that doesn't exist
should silently continue if a sub trigger is animated that doesn't contain a trigger that is setup for animation
should animate all sub triggers on the element at the same time
should skip a sub animation when a zero duration value is passed in
should only allow a sub animation to be used up by a parent trigger once
should emulate a leave animation on the nearest sub host elements when a parent is removed
should emulate a leave animation on a sub component's inner elements when a parent leave animation occurs with animateChild
should not cause a removal of inner @trigger DOM nodes when a parent animation occurs
should only mark outermost *directive nodes :enter and :leave when inserts and removals occur
should collect multiple root levels of :enter and :leave nodes
should emulate leave animation callbacks for all sub elements that have leave triggers within the component
should build, but not run sub triggers when a parent animation is scheduled
should fire and synchronize the start/done callbacks on sub triggers even if they are not allowed to animate within the animation
should fire and synchronize the start/done callbacks on multiple blocked sub triggers
should stretch the starting keyframe of a child animation queries are issued by the parent
should allow a parent trigger to control child triggers across multiple template boundaries even if there are no animations in between
should scope :enter queries between sub animations
should scope :leave queries between sub animations
should correctly remove a leaving element queried/animated by a parent queried via animateChild
should correctly animate state styles of the root element applied via animate inside a group (independently of the order)
should correctly animate state styles of the root element applied via animate inside a sequence (independently of the order)
should allow a parent animation to query and animate inner nodes that are in a disabled region
should allow a parent animation to query and animate sub animations that are in a disabled region
should disable the animation for the given element regardless of existing parent element animation queries or child element animation queries
should query the old and new routes via :leave and :enter
should allow inner enter animations to be emulated within a routed item
should allow inner leave animations to be emulated within a routed item
should properly collect :enter / :leave router nodes even when another non-router *template component is within the trigger boundaries
should allow a recursive set of :leave animations to occur for nested routes
should compute (*) animation styles for a container that is being removed
should compute (!) animation styles for a container that is being inserted
should compute pre (!) and post (*) animation styles with different dom states
should treat * styles as ! when a removal animation is being rendered
should treat * styles as ! for queried items that are collected in a container that is being removed
should compute intermediate styles properly when an animation is cancelled
should compute intermediate styles properly for multiple queried elements when an animation is cancelled
should apply the `display` and `position` styles as regular inline styles for the duration of the animation
should set normalized style property values on animation end
should apply correct state transitions for both CamelCase and kebab-case CSS properties
should handle a case when promise is rejected
should handle a case when observable emits an error
should expose the `window.ng` global utilities
should throw when reentering tick
should cleanup the DOM
should invoke all registered `onDestroy` callbacks (internal API)
should wait for asynchronous app initializers
should rethrow sync errors even if the exceptionHandler is not rethrowing
should rethrow promise errors even if the exceptionHandler is not rethrowing
should throw useful error when ApplicationRef is not configured
should call the `ngDoBootstrap` method with `ApplicationRef` on the main module
should auto bootstrap components listed in @NgModule.bootstrap
should error if neither `ngDoBootstrap` nor @NgModule.bootstrap was specified
should add bootstrapped module into platform modules list
should bootstrap with NoopNgZone
should resolve component resources when creating module factory
should dirty check attached views
should not dirty check detached views
should detach attached views if they are destroyed
should detach attached embedded views if they are destroyed
should not allow to attach a view to both, a view container and the ApplicationRef
isStable should fire on synchronous component loading
isStable should fire after a microtask on init is completed
isStable should fire after a macrotask on init is completed
isStable should fire only after chain of micro and macrotasks on init are completed
isStable should fire only after chain of macro and microtasks on init are completed
isStable can be subscribed to many times
should be fired after app becomes unstable
should properly notify live consumers (effect)
should work with computed expressions
should capture transform for later use in framework
should throw if there is no value for required inputs
should throw if a `computed` depends on an uninitialized required input
should allow updates based on the previous value
should return readonly signal
should emit when the value changes
should stop emitting after unsubscribing
should not emit if the value does not change
should not share subscriptions between models
should throw if there is no value for required model
should throw if a `computed` depends on an uninitialized required model
should render template form
should render an image with an updated `src`
should not warn when an image in the fill mode is rendered correctly
should warn if an image in the fill mode has zero height after rendering
should not warn if there is no image distortion
should warn if there is image distortion
should log a warning when a LCP image is loaded lazily
should warn if rendered image size is much smaller than intrinsic size
should log a warning when a `priority` is missing on an LCP image
should not warn if there is no oversized image
should log a warning when there is no preconnect for priority images
should not produce any warnings in the console when a preconnect tag is present
should support iterables
should support changing the reference
should handle swapping element
should handle incremental swapping element
should detect changes in list
should remove and add same item
should support duplicates
should support insertions/moves
should not report unnecessary moves
support re-insertion
should track removals normally
should detect additions
should handle changing key/values correctly
should expose previous and current value
should work regardless key order
should support JS Object
contributes to application stableness
when destroying a view (*no* animations)
when a stable subscription synchronously causes another notification
executes render hooks when a new one is registered
executes render hooks without refreshing CheckAlways views
can recover when an error is re-thrown by the ErrorHandler
change detects embedded view when attached to a host on ApplicationRef and declaration is marked for check
change detects embedded view when attached directly to ApplicationRef and declaration is marked for check
does not fail when global timing functions are patched and unpatched
should not run change detection twice if manual tick called when CD was scheduled
coalesces microtasks that happen during change detection into a single paint
will not schedule change detection if listener callback is outside the zone
should not run change detection twice if notified during AppRef.tick
does not cause double change detection with run coalescing
does not cause double change detection with run coalescing when both schedulers are notified
reports an error when requested for a decorator
reports an error when requested for a partial declaration
should signal through whenStable when the fixture is stable (autoDetectChanges)
should signal through isStable when the fixture is stable (no autoDetectChanges)
should stabilize after async task in change detection (autoDetectChanges)
should stabilize after async task in change detection(no autoDetectChanges)
rejects whenStable promise when errors happen during appRef.tick
can opt-out of rethrowing application errors and rejecting whenStable promises
should return all defer blocks in the component
reports errors from autoDetect change detection to error handler
reports errors from checkNoChanges in autoDetect to error handler
rejects whenStable promise when errors happen during detectChanges
should list all child nodes
should list all component child elements
should list conditional component child elements
should list child elements within viewports
should list classes on SVG nodes
should query child elements by css
should query child elements by directive
should query re-projected child elements by directive
should query directives on containers before directives in a view
should query directives on views moved in the DOM
when searching by listeners
when searching by providerTokens
when using the out-of-context element as the DebugElement query root
should list locals
should allow injecting from the element injector
should list event listeners
should trigger event handlers
should preserve the type of the property values
should include interpolated properties in the properties map
should trigger events registered via Renderer2
should return the same element when queried twice
should clear event listeners when node is destroyed
should not error when accessing node name
should start in manual behavior mode
should start in manual trigger mode by default
should defer load immediately on playthrough
should not defer load immediately when set to manual
should render a placeholder defer state
should render a loading defer state
should render an error defer state
should throw when rendering a template that does not exist
should get child defer blocks
should return a default value when not requested provider on self and optional
should correctly handle primitive values
should propagate events
should not propagate events if stopPropagation is called
should trigger events when manually registered
should allow host listening on the window
should call the next callback
should work when no throw callback is provided
should call the return callback
should subscribe to the wrapper synchronously
delivers next and error events synchronously
delivers next and complete events synchronously
delivers events asynchronously when forced to async mode
reports whether it has subscribers
remove a subscriber subscribed directly to EventEmitter
remove a subscriber subscribed after applying operators with pipe()
unsubscribing a subscriber invokes the dispose method
unsubscribing a subscriber after applying operators with pipe() invokes the dispose method
error thrown inside an Rx chain propagates to the error handler and disposes the chain
error sent by EventEmitter should dispose the Rx chain and remove subscribers
contributes to app stability
should flush microtasks before returning
should run asynchronous code
should run chained thens
should run Promise created in Promise
should complain if the test throws an exception during async calls
should run queued zero duration timer on zero tick
should run queued timer after sufficient clock ticks
should run new macro tasks created by timer callback
should not queue nested timer on tick with processNewMacroTasksSynchronously=false
should run queued timer only once
should not run cancelled timer
should throw an error on dangling timers
should throw an error on dangling periodic timers
should run periodic timers
should not run cancelled periodic timer
should be able to cancel periodic timers from a callback
should clear periodic timers
should process microtasks before timers
should process micro-tasks created in timers before next timers
should flush tasks
should flush multiple tasks
should move periodic tasks
should allow fakeAsync zone to retroactively set a zoneSpec outside of fakeAsync
should handle basic cases
should support literals
should support literal array made of literals
should support literal array made of expressions
should not recreate literal arrays unless their content changed
should support literal maps made of literals
should support literal maps made of expressions
should not recreate literal maps unless their content changed
should call pure pipes that are used multiple times only when the arguments change
should support chains
should support short-circuiting
should happen without invoking the renderer
should read directive properties
should notify the directive when a group of records changes
should not call ngOnInit again if it throws
should not call ngAfterContentInit again if it throws
should not call ngAfterViewInit again if it throws
should call ngOnDestroy on an injectable class
should throw when a record gets changed after it has been checked
should throw when a record gets changed after the first change detection pass
should allow view to be created in a cd hook
Detached should disable OnPush
Reattaches in the original cd mode
should consume element binding changes
should consume binding to aria-* attributes
should remove an attribute when attribute expression evaluates to null
should remove style when when style expression evaluates to null
should consume binding to property names where attr name and property name do not match
should consume binding to camel-cased properties
should consume binding to innerHtml
should consume directive watch expression change.
should support directives where a binding attribute is not given
should read directives metadata from their binding token
should not detach views in ViewContainers when the parent view is destroyed.
should use a comment while stamping out `<ng-template>` elements.
should assign a component to a ref-
should assign a directive to a ref-
should assign a directive to a ref when it has multiple exportAs names
should assign the component instance to a ref- with shorthand syntax
should preserve case
should use ChangeDetectorRef to manually request a check
should be checked when its bindings got updated
should be checked when an event is fired
should be checked when an async pipe requests a check
should support events via EventEmitter on regular elements
should support updating host element via hostAttributes on host elements
should support preventing default on render events
should support render global events from multiple directives
should allow to create a component at any bound location
should allow to create multiple components at a location
should throw with destroyed views
should remove script tags from templates
should report a meaningful error when a component is missing view annotation
should support moving embedded views of projectable nodes
should support moving embedded views of projectable nodes in multiple slots
should support moving embedded views of projectable nodes in multiple slots and interpolations
should support moving embedded views with empty projectable slots
should throw on bindings to unknown properties
should support host binding decorators
should not remove whitespaces by default
should not remove whitespaces when explicitly requested not to do so
should remove whitespaces when explicitly requested to do so
should display correct error message for orphan component if forbidOrphanRendering option is set
should not throw error for orphan component if forbidOrphanRendering option is not set
should contain all child directives in a <ng-container> (view dom)
should error on unknown bound properties on custom elements by default
should store the ComponentFactories in the NgModuleInjector
should be supported in root modules
should be supported in imported modules
should be supported in nested components
should support exported directives and pipes
should support exported directives and pipes if the module is wrapped into an `ModuleWithProviders`
should support reexported modules
should support exporting individual directives of an imported module
should support multiProviders
should support multiProviders that are created using useExisting
should provide undefined
should still allow to implement a recursive trees via multiple components
should support shadow dom content projection and isolate styles per component
should support nested conditionals that contain ng-contents
should contain all direct child directives in the content dom
should be cleanly destroyed when a query crosses view boundaries
should find TemplateRefs in the light and shadow dom
should find named TemplateRefs
should contain the first descendant content child for shallow queries
should contain the first descendant content child in an embedded template for shallow queries
should contain the first descendant content child in an embedded template for shallow queries and additional directive
should contain the first descendant content child in an embedded template for shallow queries and additional directive (star syntax)
should not cross ng-container boundaries with shallow queries
should support reading a ViewContainer
should correctly clean-up when destroyed together with the directives it is querying
should contain all child directives in the view dom
should reflect changes in the component
should not be affected by other changes in the component
should handle long ngFor cycles
should include manually projected templates in queries
should update queries when a view is detached and re-inserted
should remove manually projected templates if their parent view is destroyed
should not throw if a content template is queried and created in the view during change detection - fixed in ivy
should initially be dirty and empty
should be not dirty after reset
should support length
should support get
should support filter with index
should support find with index
should support toString
should support guards on filter
should be iterable
should fire callbacks on change
should only evaluate stateful pipes once - #10639
should only update the bound property when using asyncPipe - #15205
should only evaluate methods once - #10639
should not recreate ViewContainerRefs in queries
should allow empty components
should keep change detecting if there was an error
should escape unsafe properties
should escape unsafe attributes
should escape unsafe properties if they are used in host bindings
should escape unsafe attributes if they are used in host bindings
should escape unsafe SVG attributes
should use the right source url in html parse errors
should report source location for binding errors
should report source location for event errors
should instantiate directives that have no dependencies
should support useValue with different values
should instantiate providers that have dependencies with SkipSelf
should instantiate providers that have dependencies
should instantiate viewProviders that have dependencies
should instantiate components that depend on viewProviders providers
should instantiate multi providers
should instantiate providers lazily
should instantiate view providers lazily
should instantiate directives that depend on providers of other directives
should instantiate directives that depend on providers in a parent view
should instantiate directives that depend on providers of a component
should instantiate directives that depend on view providers of a component
should instantiate directives in a root embedded view that depend on view providers of a component
should instantiate directives that depend on instances in the app injector
should inject ElementRef
should inject ChangeDetectorRef of the component's view into the component
should inject ChangeDetectorRef of the containing component into directives
should inject ChangeDetectorRef of a same element component into a directive
should inject ViewContainerRef
should inject TemplateRef
should instantiate pipes that have dependencies
should overwrite pipes with later entry in the pipes array
should inject ChangeDetectorRef into pipes
should not error when destroying a component that has been moved in the DOM
should support type selector
should support string selector
should resolve template
should resolve styleUrls
should cache multiple resolution to same URL
should keep order even if the resolution is out of order
should resolve styles passed in as a string
should resolve styleUrl
should resolve both styles passed in as a string together with styleUrl
should ensure that rendererFactory is called after initial styling is set
should return empty dependencies if component has no registered module
should add values
should query values
should handle initial undefined state
should publish getComponent
should publish getContext
should publish getListeners
should publish getOwningComponent
should publish getRootComponents
should publish getDirectives
should publish getHostComponent
should publish getInjector
should publish applyChanges
should publish getDirectiveMetadata
should publish ɵsetProfiler
should add first node
should not update the `insertBeforeIndex` values
should update the previous insertBeforeIndex
should not update the previous insertBeforeIndex if it is already set
should not update the previous insertBeforeIndex if it is created after
should rearrange the nodes
should parse simple text
should parse simple ICU
should parse HTML in ICU
should parse nested ICU
should crop messages for the selected template
should throw if the template is malformed
for text
for elements
for simple bindings
for multiple bindings
for sub-templates
for ICU expressions
for nested ICU expressions
for multiple attributes
should process text node with no siblings and no children
should process text with a child node
should process text with a child node that has text
should process text with a child node that has text and with bindings
should process text with a child template
should print text opCode
should print Attribute opCode
should print icuSwitch opCode
should print icuUpdate opCode
should print text AppendChild
should print element AppendChild
should print comment AppendChild
should print Remove
should print Attr
should print RemoveNestedIcu
should print text/comment creation
should do set basic style
should search across multiple instructions backwards
should search across multiple instructions forwards
should set style based on priority
should set class based on priority
should work with maps
should work with object literal and strings
should collaborate with properties
should collaborate with other maps
should append suffix
should append suffix and non-suffix bindings
should capture static values in TStylingKey
should update residual on second directive
should combine property and map
should read value from residual
should throw on negative values
should throw on overflow
should correctly increment
should error in DevMode if index is out of range
should update bindings when value changes with the correct perf counters
should not update bindings when value does not change, with the correct perf counters
should create an element with the correct perf counters
should use sanitizer function
should chain
should create tView only once for each nested level
should return a context object from a given dom node
should by default monkey-patch the directives with LView so that they can be examined
should monkey-patch the exact same context instance of the DOM node, component and any directives on the same element
should not match for non objects
should match on shape
should not match if missing property
compiles a partially compiled component with split dependencies
compiles a partially compiled component with unified dependencies
compiles an injectable with a useClass provider, without deps
compiles a module to a definition
compiles a module with an id and registers it correctly
should add hostbindings and hostlisteners
ensure at least one spec exists
should attach class decorators
should attach property decorators
should attach constructor parameters
should compile a minimal component declaration
should compile a selector
should compile inputs and outputs
should compile input with a transform function
should compile exportAs
should compile providers
should compile view providers
should compile content queries
should compile view queries
should compile host bindings
should compile components with inheritance
should compile components with onChanges lifecycle hook
should compile components with OnPush change detection strategy
should compile components with styles
should compile components with view encapsulation
should compile components with animations
should honor preserveWhitespaces
should honor custom interpolation config
should compile used components
should compile used directives
should compile used directives together with used components
should compile forward declared directives
should compile mixed forward and direct declared directives
should compile used pipes
should compile forward declared pipes
should compile mixed forward and direct declared pipes
should compile a minimal directive declaration
should compile content queries with forwardRefs
should compile view queries with forwardRefs
should compile directives with inheritance
should compile directives with onChanges lifecycle hook
should compile host directives
should compile a minimal NgModule declaration
should compile an NgModule declaration with bootstrap classes
should compile an NgModule declaration with forward referenced bootstrap classes
should compile an NgModule declaration with declarations classes
should compile an NgModule declaration with forward referenced declarations classes
should compile an NgModule declaration with imports classes
should compile an NgModule declaration with forward referenced imports classes
should compile an NgModule declaration with exports classes
should compile an NgModule declaration with forward referenced exports classes
should compile an NgModule declaration with schemas
should compile an NgModule declaration with an id expression
should add items at the end
should swap items
should should optimally swap adjacent items
should detect moves to the front
should delete items in the middle
should delete items from the beginning
should delete items from the end
should delete multiple items from the middle
should add multiple items in the middle
should go back to the fast path when start / end is different
should detect moves to the back
should create / reuse duplicated items as needed
should detect (slow) moves to the front
should detect (fast) moves to the back
should update when tracking by index - fast path from the start
should update when tracking by key - fast path from the end
should update when swapping on the fast path
should update when moving forward on the fast path
forwardRef resolves later
should not cross the root view boundary, and use the root view injector
should work from within the template
should work from the host of the component
should restore queries if view changes
should be safe to call ViewContainerRef.createEmbeddedView
should be safe to call TemplateRef.create
should be safe to flip @if to true
should contribute to application stableness when an effect is pending
should be usable inside an ErrorHandler
should run effect cleanup function on destroy
should disallow writing to signals within effects by default
should allow writing to signals within effects when option set
should allow writing to signals in ngOnChanges
should not execute query setters in the reactive context
should allow toObservable subscription in template (with async pipe)
if multiple effects are created
should match simple case
should not match on partial matches
should append template only
should append host only
should append template and host
should support example in 'tnode_linked_list.ts' documentation
should not mark items as duplicate if names don't match
should mark items as duplicate if names match
should treat maps as matching all
should mark all things after map as duplicate
should mark duplicate on complex objects like width.px
should mark duplicate on static fields
should support promises
should support async and await
should have requestAnimationFrame
should add new attributes
should keep different types together
should include the file path and line number for component if debug info includes them
should include only the class name if debug info does not contain file path
should default to showing just the class name for component if debug info is not available
should not enter an infinite loop on clobbered elements
should sanitize the content when `nextSibling` or `firstChild` were clobbered
should not allow JavaScript execution when creating inert document
should not allow JavaScript hidden in badly formed HTML to get through sanitization (Firefox bug)
should select correct sanitizer for URL props
should create computed
should not re-compute if there are no dependencies
should not re-compute if the dependency is a primitive value and the value did not change
should evaluate computed only when subscribing
should cache exceptions thrown until computed gets dirty again
should not update dependencies of computations when dependencies don't change
should not mark dirty computed signals that are dirty already
should allow signal creation within computed
should recompute only once for diamond dependency graph
should read the latest value from signal
should not add dependencies to computed when reading a value from a signal
should refresh computed value if stale and read non-reactively 
should not make surrounding effect depend on the signal
should schedule on dependencies (computed) change
should accept update function to set new value based on the previous one
should allow converting writable signals to their readonly counterpart
should not repeatedly poll status of a non-live node if no signals have changed
should call the post-signal-set fn when invoking .set()
should call the post-signal-set fn when invoking .update()
should not call the post-signal-set fn when the value doesn't change
should create and run once, even without dependencies
should schedule on dependencies (signal) change
should not schedule when a previous dependency changes
should not update dependencies when dependencies don't change
should allow registering cleanup function from the watch logic
should forget previously registered cleanup function when effect re-runs
should throw an error when reading a signal during the notification phase
should not run destroyed watchers
should disconnect destroyed watches from the reactive graph
should not schedule destroyed watches
should not run cleanup functions after destroy
should compile without errors
should not call ngOnDestroy for a service that was overridden
should be able to create a fixture if a test module is reset mid-compilation
is preserved when other provider is overridden
should not trigger change detection for ComponentA while calling TestBed.createComponent for ComponentB
should resolve components without async resources synchronously
should override providers on dependencies of dynamically loaded components
should restore ng defs to their initial states
should cleanup scopes (configured via `TestBed.configureTestingModule`) between tests
should destroy test module providers when test module teardown is enabled
should not error on mocked and partially-implemented `DOCUMENT`
should re-throw errors that were thrown during fixture cleanup
should not interrupt fixture destruction if an error is thrown
should be able to opt out of rethrowing of errors coming from module teardown
should remove the styles associated with a test component when the test module is torn down
should fire if Angular is already stable
should fire when macroTasks are cancelled
calls the done callback when angular is stable
calls update when macro tasks change
cancels the done callback if the update callback returns true
should remove the testability when unregistering an existing testability
should remain the same when unregistering a non-existing testability
should remove all the testability when unregistering all testabilities
is initialized from script tag
is initialized to empty state if script tag not found
supports adding new keys using set
supports setting and accessing value '0' via get
supports setting and accessing value 'null' via get
supports removing keys
supports serialization using toJson()
calls onSerialize callbacks when calling toJson()
should provide an ability to detect whether the state is empty
should flatten a flat array
should flatten a nested array depth-first
should remove items
should insert items
should get index of
should support basic operations
should coerce zero to true
should coerce undefined to the default value
should coerce null to the default value
should coerce true to the default value
should coerce false to the default value
should coerce the empty string to the default value
should coerce the string "1" to 1
should coerce the string "123.456" to 123.456
should coerce the string "-123.456" to -123.456
should coerce an arbitrary string to the default value
should coerce an arbitrary string prefixed with a number to the default value
should coerce the number 1 to 1
should coerce the number 123.456 to 123.456
should coerce the number -123.456 to -123.456
should coerce an object to the default value
should coerce an array to the default value
should work with any default plain values
should work with any object values
should invoke as decorator
should not apply decorators from the prototype chain
should be true for an Observable
should be true if the argument is the object with subscribe function
should be false if the argument is undefined
should be false if the argument is null
should be false if the argument is an object
should be false if the argument is a function
should return string undefined when toString returns undefined
should return string null when toString returns null
setTimeout
setInterval
Promise
XMLHttpRequest
button click
should produce long stack traces
should produce long stack traces (when using microtasks)
should disable long stack traces
should run with this context and arguments
should be true
should be true when timer is scheduled
should return the body return value from run
should return the body return value from runTask
should call onStable once at the end of event
should run subscriber listeners in the subscription zone (inside)
should call onUnstable and onMicrotaskEmpty before and after each turn
should call onUnstable and onMicrotaskEmpty when an inner microtask is scheduled from outside angular
should execute promises scheduled in onUnstable before promises scheduled in run
should call onUnstable and onMicrotaskEmpty before and after each turn, respectively
should call onUnstable and onMicrotaskEmpty for promises created outside of run body
should call the on error callback when it is invoked via zone.runGuarded
should not call the on error callback but rethrow when it is invoked via zone.run
should call onError for errors from microtasks
should fakeAsync even if the NgZone was created outside.
should async even if the NgZone was created outside.
coalescing can work with fakeAsync
should execute callback when a view transition is waiting for the callback to complete
should only emit onMicroTaskEmpty once within the same event loop for ngZone.run in onMicrotaskEmpty subscription
should initialize the component with falsy initial values
should call ngOnChanges with the change
should call ngOnChanges with proper firstChange value
should detect changes
should detect changes once for multiple input changes
should not detect changes if the input is set to the same value
should call ngOnChanges
should call ngOnChanges once for multiple input changes
should call ngOnChanges twice for changes in different rounds with previous values
should not call ngOnChanges if the inout is set to the same value
should not try to call ngOnChanges if not present on the component
should mark the view for check
should mark the view for check once for multiple input changes
should mark the view for check twice for changes in different rounds with previous values
should mark the view for check even if ngOnChanges is not present on the component
should not mark the view for check if the input is set to the same value
should destroy the component after the destroy delay
should be able to call it multiple times but only destroy once
should use provided EnvironmentInjector to create a custom element
should match each node to the corresponding selector
should ignore non-matching nodes
should only match top-level child nodes
should support complex selectors
should match each node with the first matching selector
should match non-element nodes to `*` (but still ignore comments)
should match otherwise unmatched nodes to `*`
should give higher priority to `*` (eve if it appears first)
should use slots to project content
should use a named slot to project content
should listen to slotchange events
should return a function for cancelling the scheduled job
should delegate to `scheduler.schedule()`
should consider two `NaN` values equals
should reexport control properties
should reexport new control properties
should mark as disabled properly
should support pushing
should support removing
should support inserting
should not emit events when calling `FormArray.push` with `emitEvent: false`
should not emit events when calling `FormArray.removeAt` with `emitEvent: false`
should not emit events when calling `FormArray.insert` with `emitEvent: false`
should not emit events when calling `FormArray.setControl` with `emitEvent: false`
should not emit status change events when `FormArray.push` is called with `emitEvent: false`
should not emit events on the parent when called with `emitEvent: false`
should be the reduced value of the child controls
should work with nested form groups/arrays
should run the validator when the value changes
should fire an event when a control is removed
should fire an event when a control is added
should return an element of an array
should ignore disabled controls when determining dirtiness
should ignore disabled controls when determining touched state
should not run validators on disabled controls
should replace existing control with new control
should add control if control did not exist before
should remove control if new control is null
should only emit value change event once
should work with at
should work with setControl
should work with removeAt
should work with insert
wrapping from the back between [-length, 0)
becoming undefined when less than -length
at -1
at -2
at -3
at -4
at -5
at -10
by a simple strongly-typed array
by a class that redefines many properties
should create control arrays with ControlConfigs
should create nested control arrays with ControlConfigs
should create groups with shorthand parameters and with right typings
should default to array updateOn when not set in control
should set updateOn with nested arrays
can be provided where a FormBuilder is expected and vice versa
should support multiple validators from options obj
should set multiple validators from array
should override validators using `setValidators` function
should not mutate the validators array when overriding using setValidators
should override validators by setting `control.validator` field value
should not mutate the validators array when adding/removing sync validators
should not mutate the validators array when adding/removing async validators
should return false when checking presence of a validator not identical by reference
should only use the latest async validation run
should not fire an event when explicitly specified
should perform basic FormControl operations
and is appropriately narrowed
should update value and validity when control is added
should not emit status change events when `FormGroup.addControl` is called with `emitEvent: false`
should be able to reset a nested control with null
should traverse group with form array using string and numbers
should run the async validator
should set the parent group's status to pending
should run the parent group's async validator when children are pending
should handle successful async FormGroup resolving synchronously before a successful async child validator
should handle successful async FormGroup resolving after a synchronously and successfully resolving child validator
should handle failing async FormArray and successful children validators resolving synchronously
should handle failing FormGroup validator resolving after successful child validator
should handle failing FormArray validator resolving after successful child validator
should handle successful FormGroup validator resolving after successful child validator
should handle successful FormArray validator resolving after successful child validators
should handle failing FormArray validator resolving after successful child validators
should handle multiple successful FormGroup validators resolving after successful child validator
should handle multiple FormGroup validators (success then failure) resolving after successful child validator
should handle multiple FormGroup validators (failure then success) resolving after successful child validator
should handle async validators in nested form groups / arrays
should handle failing FormGroup validator resolving before successful child validator
should handle failing FormArray validator resolving before successful child validator
should run the async validator on stand alone controls and set status to `INVALID`
should run the async validator on stand alone controls and set status to `VALID`
should run the async validator on stand alone controls, include `PENDING` and set status to `INVALID`
should run setValue before the initial async validator and set status to `VALID`
should run setValue before the initial async validator and set status to `INVALID`
should cancel initial run of the async validator and not emit anything
should cancel initial run of the async validator and emit on the event Observable
should run the sync validator on stand alone controls and set status to `INVALID`
should run the sync validator on stand alone controls and set status to `VALID`
should run the async validator on the FormControl added to the FormGroup and set status to `VALID`
should run the async validator on the FormControl added to the FormGroup and set status to `INVALID`
should run the async validator at `FormControl` and `FormGroup` level and set status to `INVALID`
should run the async validator on a `FormArray` and a `FormControl` and status to `INVALID`
by a group with string keys
by a group with generic keys
by a group with unconstrained generic keys
should throw with invalid keys
should update nested form group model when UI changes
should strip array controls that are not found
should attach dirs to all child controls when group control changes
should remove controls correctly after re-binding a form array
should submit properly after removing controls on a re-bound array
should insert controls properly on a re-bound array
should support form arrays
should support pushing new controls to form arrays
should support form groups nested in form arrays
should add disabled attribute to child controls when disable() is called on group
Single level Control should emit changes for itself
should not emit twice the same value
Nested formControl should emit changes for itself and its parent
Nested formControl children should emit pristine
Nested formControl should emit dirty
Nested formControl should emit touched
Nested formControl should emit disabled
Nested formControl should emit PENDING
formControl should not emit when emitEvent is false
formControl should emit an event when resetting a form
formControl should emit an event when submitting a form
should be able to remove a control as a result of another control being reset
should not prevent the default action on forms with method="dialog"
should warn once by default when using ngModel with formControlName
should warn once by default when using ngModel with formControl
should warn once for each instance when global provider is provided with "always"
should not update the view when the value initially came from the view
should use sync validators using bindings
changes on bound properties should change the validation state of the form
should support rebound controls with rebound validators
should use async validators defined in the html
async validator should not override result of sync validator
should handle async validation changes in parent and child controls
should cancel observable properly between validation runs
should not activate minlength and maxlength validators if input is null
should not activate min and max validators if input is null
should validate max
should validate max for float number
should apply max validation when control value is defined as a string
should validate min
should validate min for float number
should apply min validation when control value is defined as a string
should run min/max validation when constraints are represented as strings
should run min/max validation for negative values
should fire registerOnValidatorChange for validators attached to the formGroups
should throw if formControlName is used without a control container
should throw if formControlName, with an index, is used without a control container
should throw, without indicating the affected form control, if formControlName is used without a control container
should determine IME event handling depending on platform by default
should clean up validators when FormGroup is replaced
should clean up validators when FormControl inside FormGroup is replaced
should call validators defined via `set[Async]Validators` after view init
should cleanup validators on a control used for multiple `formControlName` directives
should cleanup directive-specific callbacks only
should clean up callbacks when FormControlDirective is destroyed (simple)
should clean up callbacks when FormGroupDirective is destroyed
should clean up when FormControl is destroyed (but parent FormGroup exists)
should clean up controls produced by *ngFor
should clean up when FormArrayName is destroyed (but parent FormGroup exists)
should clean up all child controls when FormGroup is destroyed
should clean up all child controls (with *ngFor) when FormArrayName is destroyed
should clean up all child controls when FormGroupName is destroyed
should support ngModelGroup
should set status classes with ngModel
should set status classes with ngModel and async validators
should set status classes with ngModelGroup and ngForm
should not create a template-driven form when ngNoForm is used
should keep track of the ngModel value when together used with an ngFor inside a form
should keep track of the ngModel value when together used with an ngFor inside an ngModelGroup
should not register standalone ngModels with parent form
should disable a custom control if disabled attr is added
should support dir validators using bindings
should support optional fields with minlength validator
should update control status
should re-validate if max changes
should re-validate if min changes
should not include the min and max validators when using another directive with the same properties
should not include the minLength and maxLength validators for null
should not include the min and max validators for null
should validate min and max
should apply min and max validation when control value is defined as a string
should re-validate if min/max changes
should run min/max validation for empty values 
should call registerOnValidatorChange as a part of a formGroup setup
should update the view when the model is set back to what used to be in the view
supports inferred controls
supports explicit controls
supports explicit boolean controls
supports empty controls
supports nullable controls
should create a nullable control without {nonNullable: true}
should not allow assignment to an incompatible control
is assignable to AbstractControl
is assignable to UntypedFormControl
supports inferred groups
supports explicit groups
supports explicit groups with boolean types
supports empty groups
supports groups with nullable controls
supports groups with the default type
supports groups with explicit named interface types
supports groups with nested explicit named interface types
supports nested inferred groups
supports nested explicit groups
supports groups with a single optional control
supports groups with mixed optional controls
supports nested groups with optional controls
supports groups with inferred nested arrays
supports groups with explicit nested arrays
supports groups with an index type
should have strongly-typed get
is assignable to UntypedFormGroup
is assignable to UntypedFormGroup in a complex case
supports inferred records
supports explicit records
supports inferred arrays
supports explicit arrays
supports explicit arrays with boolean types
supports arrays with the default type
supports empty arrays
supports arrays with nullable controls
supports inferred nested arrays
supports explicit nested arrays
supports arrays with inferred nested groups
supports arrays with explicit nested groups
is assignable to UntypedFormArray
model classes support a complex, deeply nested case
on FormControls
on FormGroups
nullably from values
non-nullably from values
nullably from FormStates
non-nullably from FormStates
with array values
from objects with plain values
from objects with optional keys
from objects with FormControlState
from objects with ControlConfigs
from objects with FormControlStates nested inside ControlConfigs
from objects with ControlConfigs and validators
from objects with ControlConfigs and validator lists
from objects with ControlConfigs and explicit types
nullably
non-nullably
from objects with direct FormGroups
from objects with builder FormGroups
from objects with builder FormRecords
from objects with builder FormArrays
from arrays with plain values
from arrays with FormControlStates
from arrays with ControlConfigs
from arrays with direct FormArrays
from arrays with builder FormArrays
from arrays with builder FormGroups
from arrays with builder FormRecords
should work with a complex, deeply nested case
without distributing union types
is assignable with the typed version in both directions
is an escape hatch from a strongly-typed FormControl
is assignable to FormGroup
is an escape hatch from a strongly-typed FormGroup
should build untyped FormControls
should build untyped FormGroups
should not error on an empty string
should not error on null
should not error on undefined
should return null if NaN after parsing
should return a validation error on small values
should return a validation error on small values converted from strings
should not error on small float number validation
should not error on equal float values
should return a validation error on big values
should not error on big values
should not error on equal values
should not error on equal values when value is string
should validate as expected when min value is a string
should return null if min value is undefined
should return null if min value is null
should return a validation error on big values converted from strings
should not error on small values
should validate as expected when max value is a string
should return null if max value is undefined
should return null if max value is null
should accept zero as valid
should error on an empty array
should not error on a non-empty array
should not error on an object containing a length attribute that is zero
should error on false
should not error on true
should error on invalid email
should not error on valid email
should not error on valid strings
should error on short strings
should not error when FormArray has valid length
should error when FormArray has invalid length
should always return null with numeric values
should trigger validation for an object that contains numeric length property
should return null when passing a boolean
should error on long strings
should not error on "null" pattern
should not error on "undefined" pattern
should work with pattern string containing both boundary symbols
should work with pattern string containing only start boundary symbols
should work with pattern string containing only end boundary symbols
should work with pattern string not containing any boundary symbols
should run validators left to right
should wait for all validators before setting errors
should ignore the change event for <input type=text>
with basic use case
when value is cleared in the UI
should ignore the change event
should compare options using provided compareWith function
should support re-assigning the options array with compareWith
with option values that are objects
when new options are added
when options are removed
when option values have same content, but different identities
should support primitive values
should support objects
verify that native `selectedOptions` field is used while detecting the list of selected options
should reflect state of model after option selected and new options subsequently added
should reflect state of model after option selected and then other options removed
should support basic functionality
should support an initial undefined value
should reset properly
should properly set value to null and undefined
should use formControlName to group radio buttons when name is absent
should support removing controls from <type=radio>
should differentiate controls on different levels with the same name
should disable all radio buttons when disable() is called
should disable all radio buttons when initially disabled
should work with reusing controls
should support multiple named <type=radio> groups
should support initial undefined value
should support resetting properly
should support setting value to null and undefined
should disable radio controls properly with programmatic call
should support standard writing to view and model
should run change detection and update the value
should fix error when property does not exist on type
should fix a missing method when property does not exist on type
should not show fix all errors when there is only one diagnostic in the template but has two or more diagnostics in TCB
should fix all errors when property does not exist on type
should fix invalid banana-in-box error
should fix all invalid banana-in-box errors
for a new standalone component import
for a new NgModule-based component import
for an import of a component onto an ngModule
for a new standalone pipe import
for a transitive NgModule-based reexport
for a default exported component
for a default exported component and reuse the existing import declarations
for a default exported component and reuse the existing imported component name
should react to a change in an external template
should handle broken imports during incremental build steps
detects source file change in between typecheck programs
should be able to complete an interpolation
should be able to complete an empty interpolation
should be able to complete a property binding
should be able to complete an empty property binding
should return reference completions when available
should return variable completions when available
should return completions inside an event binding
should return completions inside an empty event binding
should return completions inside the RHS of a two-way binding
should not include the trailing quote inside the RHS of a two-way binding
should return completions inside an empty RHS of a two-way binding
should return completions of string literals, number literals, `true`, `false`, `null` and `undefined`
should return completions of string literals, number literals, `true`, `false`, `null` and `undefined` when the user tries to modify the symbol
should return property access completions
should complete a string union types in binding without brackets
should return event completion
should return completions for both properties and events
should return property access completions in the property side of the binding
should return property access completions in the event side of the binding
should return property access completions in a two-way binding
inside if
inside switch
should return completions in a property access expression
should return completions in an empty property access expression
should return completions in a property write expression
should return completions in a method call expression
should return completions in an empty method call expression
should return completions in a safe property navigation context
should return completions in an empty safe property navigation context
should return completions in a safe method call context
should not return DOM completions for external template
should not return DOM completions for inline template
should return component completions not imported
should return completions for an incomplete tag
should return completions with a blank open tag
should return completions with a blank open tag a character before
should return dom property completions in external template
should return completions for a new element property
should return event completion with empty parens
should return completions for a partial attribute
should return completions for a partial property binding
should return directive input completions for a new attribute
should return directive input completions for a partial attribute
should return input completions for a partial property binding
should return completion for input coming from a host directive
should not return completion for hidden host directive input
should return completion for aliased host directive input
should return completion for aliased host directive input that has a different public name
should return structural directive completions for an empty attribute
should return structural directive completions for an existing non-structural attribute
should return structural directive completions for just the structural marker
should return input completions for a new attribute
should return animation names for the property binding
should return animation names when the property binding animation name is empty
should return the special animation control binding called @.disabled 
should return animation names for the event binding
should return animation names when the event binding animation name is empty
should return the animation phase for the event binding
should return the animation phase when the event binding animation phase is empty
should return input completions for a partial attribute
should return output completions for an empty binding
should return output completions for a partial event binding
should return completions inside an LHS of a partially complete two-way binding
should return input completions for a binding property name
should return output completions for a binding property name
should return completion for output coming from a host directive
should not return completion for hidden host directive output
should return completion for aliased host directive output that has a different public name
should complete a pipe binding
should complete an empty pipe binding
should not return extraneous completions
should complete a string union types in square brackets binding
should complete a string union types in binding without brackets when the cursor at the start of the string
should complete a string union types in pipe
should complete a number union types
should be able to complete on nullable symbol
should be able to complete on NonNullable symbol
should not shift the start location when the user has input the optional chaining
should be able to complete for an empty attribute
should be able to complete for a partial attribute
should be able to complete for the event binding with the value is empty
should be able to complete for the event binding
should be able to complete for the dom event binding
should be able to complete for the property binding with the value is empty
should be able to complete for the property binding
should be able to complete for the dom property binding
should be able to complete for the two way binding with the value is empty
should be able to complete for the two way binding via
should be able to complete for the structural directive with the value is empty
should be able to complete for the structural directive
should not be included in the completion for an attribute with a value
should not be included in the completion for a directive attribute without input
should complete a let declaration
should complete an empty let declaration with a terminating character
should complete a single let declaration without a terminating character
should complete a let declaration property in the global scope
should complete a shadowed let declaration property
gets definition for template reference in overridden template
returns the pipe definitions when checkTypeOfPipes is false
gets definitions for all inputs when attribute matches more than one
gets definitions for all signal-inputs when attribute matches more than one
gets definitions for all outputs when attribute matches more than one
gets definitions for all model inputs when attribute matches more than one in a static attribute
gets definitions for all model inputs when attribute matches more than one in a two-way binding
should go to the pre-compiled style sheet
gets definition for property of variable declared in template
gets definition for a let declaration
can get definitions for input
can get definitions for component
can get definitions
should not produce error for a minimal component definition
should report member does not exist
should report diagnostics in inline templates
should report member does not exist in external template
should report a parse error in external template
reports html parse errors along with typecheck errors as diagnostics
should report parse errors of components defined in the same ts file
reports a warning when the project configuration prevents good type inference
should process a component that would otherwise require an inline TCB
should exclude unused pipes that would otherwise require an inline TCB
logs perf tracing
does not produce diagnostics when pre-compiled file is found
produces missing resource diagnostic for missing css
should not produce invalid banana in box warning without `strictTemplates`
should produce invalid banana in box warning in external html file
should not produce invalid banana in box warning in external html file without `strictTemplates`
should have outlining spans for all defer block parts
should have outlining spans for all connected if blocks
should have outlining spans for all switch cases, including the main
should have outlining spans for repeater and empty block
finds location of external template
finds correct location when there are multiple components in one file
should find the typecheck block for an inline template
should find the typecheck block for an external template
should work for native elements
should work for directives
should work for components
should work for structural directives
should return binding for structural directive where key maps to a binding
should work for directives with compound selectors
should work for input providers
should work for text inputs
should work for structural directive inputs ngForTrackBy
should work for structural directive inputs ngForOf
should work for two-way binding providers
should work for event providers
should return the directive when the event is part of the selector
should work for $event from native element
should work for element reference uses
should work for array members
should work for a @let declaration
should work for pipes
should find members in a text interpolation
should work for accessed property reads
should find members in an attribute interpolation
should find members of input binding
should find members of event binding
should work for method calls
should work for accessed properties in writes
should work for method call arguments
should find members of two-way binding
should find members in a structural directive
should work for variables in structural directives
should work for uses of members in structural directives
should work for members in structural directives
should work for object literals with shorthand declarations in an action
should work for object literals with shorthand declarations in a data binding
should be able to find a template from a url
should be able to find a stylesheet from a url
should be able to find a stylesheet from a style url
should retrieve external template from latest snapshot
should be set after getSemanticDiagnostics()
can load test project from Bazel runfiles
will return the cursor position
will return -1 if cursor is not present
should locate incomplete tag
should locate binding pipe without identifier
should locate a @let value
should visit numeric on conditions on defer blocks
should return all typecheck files
should return directives which match the element tag
should return something for input providers with non-primitive types
should work for native event outputs
should work for element references
should work for directive references
should work for a let declaration
should return nothing for primitives
should work for $event
should work for directives which match native element tags
should work for directives with compound selectors, some of which are bindings
should work for data-let- syntax
should work for bind- syntax
should work for signal-based two-way binding providers
should work for on- syntax binding
should work for $event from EventEmitter
should work for ref- syntax
should work for click output from native element
should work for ReadonlyArray members (#36191)
should work for const array members (#36191)
should work for safe keyed reads
should find input binding on text attribute
should work for the $any() cast function
defer
defer with condition
placeholder
loading
error
viewport
immediate
idle
hover
timer
interaction
when
prefetch (when)
on
prefetch (on)
empty
track keyword
implicit variable assignment
implicit variable assignment in comma separated list
if block alias variable
should get quick info for a let declaration
should get quick info for the generic input of a directive that normally requires inlining
should find input binding on text attribute when strictAttributeTypes is false
can still get quick info when strictOutputEventTypes is false
should work for pipes even if checkTypeOfPipes is false
should still get quick info if there is an invalid css resource
gets component member references from TS file and external template
gets rename locations from TS file and external template
gets references
gets rename locations
gets component member reference in ts file
gets rename location in ts file
gets member reference in ts file
finds rename location in ts file
find references
get reference to member in ts file
gets reference to member type definition and initialization in component class
get references in ts file
get reference to declaration in template
finds rename location in template
gets reference to declaration
should get references
should find rename locations
should find references
finds rename locations and rename info
finds rename locations in base class
should work for text attributes
should work from the TS input declaration
should get references to both input and output for two-way binding
should get references to model() input binding
gets references to all matching directives
should be able to request references
finds references
can find references and rename alias variable from @if block
should handle an empty argument list
should handle a single argument
should handle a position within the first of two arguments
should handle a position within the second of two arguments
should handle a position within a new, EmptyExpr argument
returns the pipe class as definition when checkTypeOfPipes is false
return the definition for a signal input
return the definition for an output
should return the definition for the property side of a two-way binding
should return the definition for the event side of a two-way binding
should return the definition of a two-way binding
should render template literals as-is
should strip placeholder names from message parts
should ignore escaped placeholder name marker
should render template literals with messages upper-cased
should render template literals with expressions reversed
should build a map of named placeholders to expressions
should build a map of implied placeholders to expressions
should return index of the end of block marker
should throw an error if the translation contains placeholders that are not in the message
(with identity translations) should render template literals as-is
(with upper-casing translations) should render template literals with messages upper-cased
(with translations to reverse expressions) should render template literals with expressions reversed
(with translations to remove expressions) should render template literals with expressions removed
should render template literals with expressions removed
should extract a message for each $localize template tag
should extract translations from source code, and write as xmb format
should extract translations from source code, and write as XLIFF 2 format
should convert a set of parsed messages into an XML string
should return an array of string literals and locations from a direct call to a tag function
should return an array of string literals and locations from a downleveled tagged template
should return an array of string literals and locations from a (Babel helper) downleveled tagged template
should return an array of string literals and locations from a memoized downleveled tagged template
should return an array of string literals and locations from a memoized (inlined Babel helper) downleveled tagged template
should return an array of string literals and locations from a lazy load template helper
should remove a lazy load template helper
should return the substitutions and locations from a direct call to a tag function
should return the substitutions and locations from a downleveled tagged template
should return a TemplateStringsArray built from the template literal elements
should return an array of string from an array expression
should return a plain object containing the start, end and file of a NodePath
should copy non-code files to the destination folders
should translate and copy source-code files to the destination folders
should translate and copy source-code files overriding the locales
should merge translation files, if more than one provided, and translate source-code
should transform and/or copy files to the destination folders
should add missing translation to diagnostic errors if missingTranslation is set to "error"
should add missing translation to diagnostic errors if missingTranslation is set to "warning"
should add diagnostic error with code-frame information if the arguments to `$localize` are missing
should add diagnostic error with code-frame information if the arguments to `$localize` are invalid
should add diagnostic error with code-frame information if the first argument to `$localize` is not an array
should add diagnostic error with code-frame information if raw message parts are not an expression
should add diagnostic error with code-frame information if cooked message parts are not an expression
should add diagnostic error with code-frame information if not all cooked message parts are strings
should add diagnostic error with code-frame information if not all raw message parts are strings
should add diagnostic error with code-frame information if not all substitutions are expressions
should add missing translation to diagnostic warnings if missingTranslation is set to "warning"
should warn if the provided locales do not match the parsed locales
should warn when a trans-unit has no translation target but does have a source
should fail when a trans-unit has no translation target nor source
should fail when a trans-unit has no id attribute
should fail on duplicate trans-unit id
should fail on unknown message tags
should fail when a placeholder misses an id attribute
should provide a diagnostic warning when a trans-unit has no translation target but does have a source
should provide a diagnostic error when a trans-unit has no translation target nor source
should provide a diagnostic error when a trans-unit has no id attribute
should provide a diagnostic error on duplicate trans-unit id
should provide a diagnostic error on unknown message tags
should provide a diagnostic error when a placeholder misses an id attribute
should throw when there are nested translationbundle tags
should throw when a translation has no id attribute
should throw on duplicate translation id
should throw on unknown message tags
should throw when a placeholder misses a name attribute
can get heroes
GET should be a "cold" observable
GET should wait until after delay to respond
Should only initialize the db once
can get heroes (w/ a different base path)
should 404 when GET unknown collection (after delay)
should return 1-item array for GET app/heroes/?id=1
should return 1-item array for GET app/heroes?id=1
should return undefined for GET app/heroes?id=not-found-id
should return 404 for GET app/heroes/not-found-id
can get nobodies (empty collection)
can add a nobody with an id to empty nobodies collection
should fail when add a nobody without an id to empty nobodies collection
to empty (object db)
to empty (observable db)
to empty (promise db)
can translate `foo/heroes` to `heroes` via `parsedRequestUrl` override
can get villains
should 404 when POST to villains
should 404 when GET unknown collection
should use genId override to add new hero, "Maxinius"
should use genId override guid generator for a new nobody without an id
can get hero w/ id=1
should 404 when hero id not found
can add a hero
can search for heroes by name containing "a"
can update existing hero
should have GET request header from test interceptor
should have GET response header from test interceptor
can get heroes (no passthru)
can GET passthru
can ADD to passthru
can get heroes (encapsulated)
empty test so jasmine doesnt complain
should resolve the body|document|window nodes given their values as strings as input
should store animations events passed to the default renderer and register them against the animation renderer
should store animations properties set on the default renderer and set them also on the animation renderer
should only create a trigger definition once even if the registered multiple times
should flush and fire callbacks when the zone becomes stable
should properly insert/remove nodes through the animation renderer that do not contain animations
should only queue up dom removals if the element itself contains a valid leave animation
should clear bootstrapped component contents when the `BrowserAnimationsModule` is imported
should clear bootstrapped component contents when the animation engine is requested during initialization
should clear standalone bootstrapped component contents when the animation engine is requested during initialization
should clear bootstrapped component contents when async animations are used
should handle leave animation callbacks even if the element is destroyed in the process
should keep change detection isolated for separately bootstrapped apps
should allow bootstrapping multiple standalone components within the same app
should allow bootstrapping non-standalone components within the same app
should throw when trying to bootstrap a non-standalone component
should throw when trying to bootstrap a standalone directive
should throw when trying to bootstrap a non-annotated class
should reject the bootstrapApplication promise if an imported module throws
should enable animations when using provideAnimations()
should use noop animations renderer when using provideNoopAnimations()
should throw if bootstrapped Directive is not a Component
should throw if no element is found
should throw if no provider
should forward the error to promise when bootstrap fails
should invoke the default exception handler when bootstrap fails
should set platform name to browser
should display hello world
should throw a descriptive error if BrowserModule is installed again via a lazily loaded module
should support multiple calls to bootstrap
should not crash if change detection is invoked when the root component is disposed
should unregister change detectors when components are disposed
should make the provided bindings available to the application component
should not override locale provided during bootstrap
should avoid cyclic dependencies when root component requires Lifecycle through DI
should run platform initializers
should allow provideZoneChangeDetection in bootstrapModule
should allow to pass schemas
should be triggered for all bootstrapped components in case change happens in one of them
should work in isolation for each component bootstrapped individually
should create a standalone injector for standalone components with ambient providers
should throw if `BrowserModule` is imported in the standalone bootstrap scenario
should throw if `BrowserModule` is imported indirectly in the standalone bootstrap scenario
should return all meta tags matching selector
should not add meta tag if it is already present on the page and has the same attr
should not add meta tag if it is already present on the page, even if the first tag with the same name has different other attributes
should add meta tag if it is already present on the page and but has different attr
should add meta tag if it is already present on the page and force true
should inject Meta service when using BrowserModule
should time change detection
should time change detection with recording
xmlns
xml
svg
xhtml
xlink
should not error when removing a child without passing a parent
works for components without encapsulation emulated
works for components without encapsulation none
should create MathML elements
should run unpatchedEvents handler outside of ngZone
should only trigger one Change detection when bubbling with shouldCoalesceEventChangeDetection = true
should only trigger one Change detection when bubbling with shouldCoalesceRunChangeDetection = true
should not drain micro tasks queue too early with shouldCoalesceEventChangeDetection=true
should not drain micro tasks queue too early with shouldCoalesceRunChangeDetection=true
should call the loader provider only once
should allow the usage of <slot> elements
should allow the usage of named <slot> elements
should run normal tests
should run normal async tests
should run async tests with tasks
should run async tests with promises
should pass context to inject helper
should pass context to fakeAsync helper
should pass context to withModule helper - simple
should preserve context when async and inject helpers are combined
should preserve context when fakeAsync and inject helpers are combined
should wait until returned promises
should allow use of "done"
should use set up directives and pipes
should always pass to satisfy jasmine always wanting an `it` block under a `describe`
should support SkipSelf
should support multiple providers in a template
should fail when an asynchronous error is thrown
throws an async error
should fail when a returned promise is rejected
should fail with an error from a promise
should resolve the Promise with the file content on success
should reject the Promise on failure
should run async tests with ResourceLoaders
should support *ngFor on <ng-container> nodes
should support *ngFor on element nodes
should support *ngFor on host component nodes
should support compact serialization for *ngFor
should support disjoint nodes
should support translations that include additional elements
should hydrate ICUs (simple)
should hydrate when using the *ngFor directive
should hydrate when using @for control flow
should not reference IntersectionObserver on the server
should reconcile *ngFor-generated views
should trigger change detection after cleanup (immediate)
should trigger change detection after cleanup (deferred)
should project contents with *ngFor
should support projecting contents outside of a current host element
should throw an error when projecting DOM nodes via ViewContainerRef.createComponent API
should throw an error when projecting DOM nodes via createComponent function call
should support slots with fallback content
should support mixed slots with and without fallback content
should handle text node mismatch
should not crash when a node can not be found during hydration
should handle element node mismatch
should handle <ng-container> node mismatch
should handle <ng-template> node mismatch
should handle node mismatches in nested components
should handle sibling count mismatch
should handle ViewContainerRef node mismatch
should handle a mismatch for a node that goes after a ViewContainerRef node
should handle a case when a node is not found (removed)
should handle a case when a node is not found (detached)
should handle a case when a node is not found (invalid DOM)
should cleanup rendered case if none of the cases match on the client
should hydrate for loop content
should handle different number of items rendered on the client and on the server
should handle a reconciliation with swaps
should handle multiple let declarations that depend on each other
should handle a let declaration using a pipe that injects ChangeDetectorRef
should handle let declarations referenced through multiple levels of views
should allow multiple platform instances
adds styles with ng-app-id attribute
allows subscription to the hash state
works with SVG elements
works with animation
should handle ViewEncapsulation.ShadowDom
adds the `ng-server-context` attribute to host elements
sanitizes the `serverContext` value
uses `other` as the `serverContext` value when all symbols are removed after sanitization
should handle false values on attributes
should handle element property "name"
should work with sanitizer to handle "innerHTML"
should handle element property "hidden"
should call render hook
should call multiple render hooks
should call async render hooks
should call multiple async and sync render hooks
can make HttpClient requests
can use HttpInterceptor that injects HttpClient
adds transfer script tag when using renderModule
adds transfer script tag when setting state during onSerialize
should return the same url tree when no redirects
should add new segments when needed
should handle positional parameters
should pass matrix parameters
should handle preserve secondary routes
should redirect secondary routes
should use the configuration of the route redirected to
should support redirects with both main and aux
should support redirects with both main and aux (with a nested redirect)
should redirect wild cards
should support absolute redirects
should not create injector for Route if the route does not match
should create injectors for partial Route route matches
should support CanMatch providers on the route
should load config on demand
should load when all canLoad guards return true
should work with objects implementing the CanLoad interface
should pass UrlSegments to functions implementing the canLoad guard interface
should pass UrlSegments to objects implementing the canLoad guard interface
should work with absolute redirects
should load the configuration only once
should load the configuration of a wildcard route
should not load the configuration of a wildcard route if there is a match
should load the configuration after a local redirect from a wildcard route
should load the configuration after an absolute redirect from a wildcard route
should load all matching configurations of empty path, including an auxiliary outlets
should not try to load any matching configuration if previous load completed
loads only the first match when two Routes with the same outlet have the same path
should load the configuration of empty root path if the entry is an aux outlet
redirect from an empty path should work (local redirect)
redirect from an empty path should work (absolute redirect)
redirect from an empty path should work (nested case)
redirect to an empty path should work
should create a new url segment (non-terminal)
should create a new url segment (terminal)
should work with non-empty auxiliary path
should work with empty auxiliary path
should create a new child (non-terminal)
should create a new child (terminal)
should work only only primary outlet
should not error when no children matching and no url is left
should not error when no children matching and no url is left (aux routes)
should use custom path matcher
should work when using absolute redirects
should work when using absolute redirects (wildcard)
with a simple function returning a string
with a simple function returning a UrlTree
with a function using inject and returning a UrlTree
can access query params and redirect using them
with a function using inject and returning a UrlTree with params
receives positional params from the current route
receives params from the parent route
receives data from the parent componentless route
has access to path params
does not fail with large configs
should complete when initial navigation fails and initialNavigation = enabledBlocking
should finish navigation when initial navigation is enabledBlocking and component renavigates on render
should wait for redirect when initialNavigation = enabledBlocking
should wait for redirect with UrlTree when initialNavigation = enabledBlocking
should wait for resolvers to complete when initialNavigation = enabledBlocking
should NOT wait for resolvers to complete when initialNavigation = enabledNonBlocking
should NOT wait for resolvers to complete when initialNavigation is not set
should not run navigation when initialNavigation = disabled
should not init router navigation listeners if a non root component is bootstrapped
should reinit router navigation listeners if a previously bootstrapped root component is destroyed
should restore the scrolling position
should cleanup "popstate" and "hashchange" listeners
can schedule a navigation from the NavigationEnd event #37460
should work when CanActivate returns false
should work when CanDeactivate returns false
should work when using `NavigationExtras.skipLocationChange`
should work when using `NavigationExtras.replaceUrl`
should work when CanLoad returns false
should work when resolve empty
should work when an error occurred during navigation
should work when CanActivate redirects
restores history correctly when component throws error in constructor and replaceUrl=true
restores history correctly when component throws error in constructor and skipLocationChange=true
should work when CanActivate redirects with UrlTree
redirectTo with same url, and guard reject
should create new state
should reuse existing nodes when it can
should handle componentless routes
should consistently represent future and current state
should error when navigating to the root segment with params
should stringify positional parameters
should throw when outlets is not the last command
should throw when too many ..
can use "merge" as the default
can use "perserve" as the default
can override the default by providing a new option
should not activate if route is changed
should navigate to the current URL
should override default onSameUrlNavigation with extras
should set the restoredState to null when executing imperative navigations
should set history.state if passed using imperative navigation
should set history.state when navigation with browser back and forward
should navigate correctly when using `Location#historyGo
should not error if state is not {[key: string]: any}
should not pollute browser history when replaceUrl is set to true
should deactivate outlet children with componentless parent
should work between aux outlets under two levels of empty path parents
should not wait for prior navigations to start a new navigation
should eagerly update the URL
should eagerly update URL after redirects are applied
should set `state`
can renavigate to same URL during in-flight navigation
should navigate back and forward
should navigate when locations changes
should reset location if a navigation by location is successful
should skip duplicate location events
can render a 404 page without changing the URL
should accurately track currentNavigation
should ignore null and undefined query params
should cancel in-flight navigations
should handle failed navigations gracefully
can redirect from error handler with RouterModule.forRoot
can redirect from error handler
should not break navigation if an error happens in NavigationErrorHandler
should dispatch NavigationError after the url has been reset back
should reset the url with the right state when navigation errors
should not trigger another navigation when resetting the url back due to a NavigationError
should dispatch NavigationCancel after the url has been reset back
should not swallow errors from browser state update
should emit an event when an outlet gets activated
should update url and router state before activating components
should provide resolved data
should handle errors
should handle empty errors
should not navigate when all resolvers return empty result
should not navigate when at least one resolver returns empty result
should not navigate when all resolvers for a child route from forChild() returns empty result
should not navigate when at least one resolver for a child route from forChild() returns empty result
should include target snapshot in NavigationError when resolver throws
should preserve resolved data
should override route static data with resolved data
should not override inherited resolved data with inherited static data
should not override nested route static data when both are using resolvers
should not override child route's static data when wrapper is using resolved data and the child route static data
should allow guards alter data resolved by routes
should rerun resolvers when the urls segments of a wildcard route change
can resolve symbol keys
should not throw when commands is null or undefined
for anchor elements
for non-anchor elements
should update Navigation object after redirects are applied
should not break the back button when trigger by location change
works with root url
should resolve navigateByUrl promise after redirect finishes
can redirect while changing state object
should rerun guards and resolvers when params change
should rerun guards and resolvers when query params change
should always rerun guards and resolvers
should rerun rerun guards and resolvers when path params change
should rerun when a parent segment changes
should rerun rerun guards and resolvers when path or query params change
should allow a predicate function to determine when to run guards and resolvers
works with componentless routes
should use correct component to deactivate forChild route
should not create a route state if navigation is canceled
should not load children when CanLoad returns false
should support navigating from within the guard
should support returning UrlTree from within the guard
should resolve navigateByUrl promise after CanLoad executes
should execute CanLoad only once
cancels guard execution when a new navigation happens
should only execute canLoad guards of routes being activated
should execute canLoad guards
should redirect with UrlTree if higher priority guards have resolved
should redirect with UrlTree if UrlTree is lower priority
can run functional guards serially
should allow redirection in NavigationStart
should stop emitting events after the router is destroyed
should resolve navigation promise with false after the router is destroyed
should create a single instance of lazy-loaded modules
should emit RouteConfigLoadStart and RouteConfigLoadEnd event when route is lazy loaded
throws an error when forRoot() is used in a lazy context
should render loadComponent named outlet with children
error emit an error when cannot load a config
should emit an error when the lazily-loaded config is not valid
should not preload when canLoad is present and does not execute guard
should allow navigation to modules with no routes
should handle the case when the router takes only the primary url
should not remove parts of the URL that are not handled by the router when "eager"
should emit an event when an outlet gets attached/detached
should support attaching & detaching fragments
should not try to detach the outlet of a route that does not get to attach a component
should return true if all values are true
should return false if observables to the left of false have produced a value
should ignore results for unresolved sets of Observables
should return UrlTree if higher priority guards have resolved
should return false even with UrlTree if UrlTree is lower priority
should return UrlTree even after a false if the false is lower priority
should return the highest priority UrlTree
should ignore invalid values
should propagate errors
should take only the first emitted value of every resolver
should cancel navigation if 1 of 2 resolvers does not emit
should run resolvers in different parts of the tree
should update children inherited data when resolvers run
should support secondary routes
should set url segment and index properly
should match routes in the depth first order
should use outlet name when matching secondary routes
should handle non top-level secondary routes
should sort routes by outlet name
should support matrix parameters
should set static data
should inherit componentless route's data
should not inherit route's data if it has component
should not inherit route's data if it has loadComponent
should inherit route's data if paramsInheritanceStrategy is 'always'
should match when terminal
should work (nested case)
should inherit params
should match (non-terminal)
should match (non-terminal) when both primary and secondary and primary has a child
should match (terminal)
should work when split is at the root level
should work when outlet is a child of empty path parent
should work for outlets adjacent to empty path
should work with named outlets both adjecent to and as a child of empty path
should work with children outlets within two levels of empty parents
should not persist a primary segment beyond the boundary of a named outlet match
should support simple wildcards
should inherit params until encounters a normal route
should inherit all params if paramsInheritanceStrategy is 'always'
should not throw when no children matching
should not throw when no children matching (aux routes)
should work with terminal route
should work with child terminal route
should set isActive right after looking at its children -- #18983
duplicate navigation to same url
works with a duplicate popstate/hashchange navigation (as seen in firefox)
navigation works when a redirecting NavigationCancel event causes another synchronous navigation
should copy config to avoid mutations of user-provided objects
should run from top to bottom
should not run for unchanged routes
should skip multiple unchanged routes but fire for all changed routes
does not modify tabindex if already set on non-anchor element
null, removes tabIndex and does not navigate
undefined, removes tabIndex and does not navigate
should coerce boolean input values
should preserve `NavigationExtras.replaceUrl` when redirecting from guard using urlTree
should not load children
without reloading loaded modules
and cope with the loader throwing exceptions during module load but allow retry
and cope with the loader throwing exceptions but allow retry
without autoloading loading submodules
and close the preload obsservable 
with overlapping loads from navigation and the preloader
cope with factory fail from broken modules
throws error when loadComponent is not standalone
should recover from errors
works when there is both loadComponent and loadChildren
loadComponent does not block loadChildren
loads nested components
defaults to disabled
should scroll to the top
should scroll to the stored position on popstate
should work (scrollPositionRestoration is disabled)
should work (scrollPositionRestoration is enabled)
work
should return children
should return path from root
should parse secondary segments with an = in the name
should parse segments with matrix parameters when the name contains an =
should parse segments that end with an =
should parse segments that only contain an =
should parse segments with matrix parameter values containing an =
should parse top-level nodes with only secondary segment
should parse nodes with only secondary segment
should encode/decode path segments and parameters
should parse encoded parens in matrix params
should encode minimal special characters plus parens and semi-colon in matrix params
should encode special characters in the path the same as matrix params
should return the root of the tree
should return the parent of a node
should return the parent of a node (second child)
should return the children of a node
should return the first child of a node
should return the siblings of a node
should return the path to the root
are not available in node environment
should skip initial transition
should have the correct event order when using view transitions
should not create a view transition if only the fragment changes
throws error if routing throws
throws an error if the routed component instance does not match the one required
throws an error if navigation fails but expected a component instance
waits for redirects using router.navigate
should get the $rootScope from AngularJS and set an $on watch on $locationChangeStart
should navigate by url every time $locationChangeStart is broadcasted
should allow configuration to work with hash-based routing
should work correctly on browsers that do not start pathname with `/`
should not duplicate navigations triggered by Angular router
generates a correct config
assigns files to the first matching asset-group (unaffected by file-system access delays)
uses default `navigationUrls` if not provided
throws if the obsolete `versionedFiles` is used
generates a correct config with `cacheOpaqueResponses`
generates a correct config with `cacheQueryOptions`
doesn't exceed concurrency limit
can access the registration when it comes before subscription
can access the registration when it comes after subscription
gives disabled NgswCommChannel when navigator.serviceWorker is undefined
gives enabled NgswCommChannel when browser supports SW and enabled option is true
calls `PushManager.subscribe()` (with appropriate options)
rejects if currently not subscribed to push notifications
calls `PushSubscription.unsubscribe()`
rejects if `PushSubscription.unsubscribe()` fails
rejects if `PushSubscription.unsubscribe()` returns false
does not emit on `SwPush.subscription` on failure
emits on worker-driven changes (i.e. when the controller changes)
emits on subscription changes (i.e. when subscribing/unsubscribing)
does not crash on subscription to observables
gives an error when registering
gives an error when unsubscribing
can be instantiated
gives an error when checking for updates
gives an error when activating updates
communicates back and forth via update check
detects an actual update
defaults to registering the SW when the app stabilizes (under 30s)
defaults to registering the SW after 30s if the app does not stabilize sooner
registers the SW when the app stabilizes with `registerWhenStable:<timeout>`
registers the SW after `timeout` if the app does not stabilize with `registerWhenStable:<timeout>`
registers the SW asap (asynchronously) before the app stabilizes with `registerWhenStable:0`
registers the SW only when the app stabilizes with `registerWhenStable:`
registers the SW only when the app stabilizes with `registerWhenStable`
registers the SW after the specified delay with `registerWithDelay:<delay>`
registers the SW asap (asynchronously) with `registerWithDelay:`
registers the SW asap (asynchronously) with `registerWithDelay`
caches a basic request
refreshes after awhile
still matches if search differs but ignoreSearch is enabled
falls back on the cache when server times out
refreshes ahead
caches opaque responses on refresh by default
does not cache opaque responses when configured not to do so
CacheQueryOptions are passed through when falling back to cache
claims all clients, after activation
cleans up old `@angular/service-worker` caches, after activation
handles actual errors from the browser
checks for updates on restart
checks for updates on navigation
does not make concurrent checks for updates on navigation
cleans up properly on restart
cleans up properly when failing to load stored state
bypasses the ServiceWorker on `ngsw-bypass` parameter
does not unregister or change state when status code is 503 (service unavailable)
expire according to Cache-Control headers
survive serialization
get carried over during updates
should delete other caches even if deleting one of them fails
enters degraded mode when update has a bad index
executes scheduled work on time
waits for multiple tasks to complete serially
does not execute work until timeout passes with no triggers
executes tasks after max delay even with newer triggers
initializes without crashing
persists the cache across restarts
throws if the server-side content does not match the manifest hash
should return an array of node collections for each selector
should collect up unmatched nodes for the wildcard selector
should add testabilities hook when creating components
should remove the testability hook when destroy a component
should return false for primitive values
should return false if `.then` is not a function
should return true if `.then` is a function
should call all callbacks once resolved
should call callbacks immediately if already resolved
should ignore subsequent calls to `resolve()`
should resolve immediately if the provided values are not thenable
should wait for any thenables to resolve
should have AngularJS loaded
should destroy the AngularJS app when `PlatformRef` is destroyed
should output an error message to the console and re-throw
should not break if a $digest is already in progress
should interleave scope and component expressions
should propagate changes to a downgraded component inside the ngZone
should bind properties, events
should support two-way binding and event listener
should initialize inputs in time for `ngOnChanges`
should properly run cleanup when ng1 directive is destroyed
should bind optional properties
should bind properties, events in controller when bindToController is not used
should bind properties, events in link function
should support templateUrl fetched from $httpBackend
should support templateUrl as a function
should support controller with controllerAs
should call `$onChanges()` on binding destination
should destroy `componentScope`
should emit `$destroy` on `$element` and descendants
should clear data on `$element` and descendants
should clear dom listeners on `$element` and descendants`
should run the pre-linking after instantiating the controller
should handle deferred bootstrap
should propagate return value of resumeBootstrap
should wait for ng2 testability
should be able to test ng1 components that use ng2 components
should instantiate ng2 in ng1 template and project content
should correctly project structural directives
should instantiate ng1 in ng2 template and project content
should support multi-slot projection
should bind properties to onpush components
should run change-detection on every digest (by default)
should not run change-detection on every digest when opted out
should still run normal Angular change-detection regardless of `propagateDigest`
should bind to ng-model
should properly run cleanup with multiple levels of nesting
should work when compiled outside the dom (by fallback to the root ng2.injector)
should allow attribute selectors for downgraded components
should allow attribute selectors for components in ng2
should respect hierarchical dependency injection for ng2
should be compiled synchronously, if possible
should work with ng2 lazy loaded components
should throw if `downgradedModule` is specified
should downgrade a standalone component using NgModule APIs
should support manually setting up a root module for all downgraded modules
should correctly traverse the injector tree of downgraded components
should correctly traverse the injector tree of downgraded components (from different modules)
should support downgrading a component and propagate inputs
should propagate input changes inside the Angular zone
should wire up the component for change detection
should wire up nested, asynchronously instantiated components for change detection
should run the lifecycle hooks in the correct order
should properly run cleanup when a downgraded component is destroyed
should only retrieve the Angular zone once (and cache it for later use)
should throw if no downgraded module is included
should throw if the corresponding downgraded module is not included
should throw if `downgradedModule` is not specified and there are multiple downgraded modules
should verify UpgradeAdapter example
should downgrade ng2 service to ng1
should upgrade ng1 service to ng2
should initialize the upgraded injector before application run blocks are executed
should allow resetting angular at runtime
should not wait for $interval
should support `template` (string)
should support `template` (function)
should pass $element to `template` function and not $attrs
should support `templateUrl` (string) fetched from `$templateCache`
should support `templateUrl` (function) fetched from `$templateCache`
should pass $element to `templateUrl` function and not $attrs
should support empty templates
should support `@` bindings
should support `<` bindings
should support `=` bindings
should support `&` bindings
should bind properties, events to scope when bindToController is not used
should compile the ng1 template in the correct DOM context
should run the pre-linking function before linking
should run the post-linking function after linking (link: object)
should run the post-linking function after linking (link: function)
should run the post-linking function before `$postLink`
should support `controllerAs`
should support `bindToController` (boolean)
should support `bindToController` (object)
should support `controller` as string
should insert the compiled content before instantiating the controller
should resolve to its own controller if falsy
should be available to children
should throw if required controller cannot be found
should not throw if missing required controller is optional
should assign resolved values to the controller instance (if `require` is not object)
should assign resolved values to the controller instance (if `require` is object)
should assign to controller before calling `$onInit()`
should use the key as name if the required controller name is omitted
should support single-slot transclusion
should support single-slot transclusion with fallback content
should support multi-slot transclusion
should support default slot (with fallback content)
should support optional transclusion slots (with fallback content)
should throw if a non-optional slot is not filled
should support structural directives in transcluded content
should call `$onChanges()` on binding destination (prototype)
should call `$onChanges()` on binding destination (instance)
should call `$onInit()` on controller
should not call `$onInit()` on scope
should call `$postLink()` on controller
should not call `$postLink()` on scope
should call `$doCheck()` on controller
should not call `$doCheck()` on scope
should call `$onDestroy()` on controller
should not call `$onDestroy()` on scope
should be called in order `$onChanges()` > `$onInit()` > `$doCheck()` > `$postLink()`
should destroy `$componentScope`
should clear data on `$element` and descendants`
should clean up `$doCheck()` watchers from the parent scope
should support ng2 > ng1 > ng2 (no inputs/outputs)
should support ng2 > ng1 > ng2 (with inputs/outputs)
should support ng2 > ng1 > ng2 > ng1 (with `require`)
should upgrade to a standalone component in NgModule-bootstrapped application
should bind onEventType listeners
test whether addListener is patched
should respect removeEventListener
should handler removing onmessage
should intercept XHRs and treat them as MacroTasks
should not trigger Zone callback of internal onreadystatechange
should invoke xhr task even onload listener throw error
should allow canceling of an XMLHttpRequest
should allow aborting an XMLHttpRequest after its completed
should preserve other setters
should preserve static constants
should keep taskcount correctly when abort was called multiple times before request is done
should close xhr request if error happened when connect
should trigger readystatechange if xhr request trigger cors error
should invoke task if xhr request trigger cors error
should be in the zone when use XMLHttpRequest.addEventListener
should return origin listener when call xhr.onreadystatechange
should allow you to override alert/prompt/confirm
should patch all possible on properties on native prototype
should patch all possible on properties on element
should patch all possible on properties on svg element
should patch all possible on properties on media element
should patch all possible on properties on frameset element
should patch all possible on properties on body
should patch all possible on properties on Frame
should patch all possible on properties on marquee element
should patch all possible on properties on Window
should patch all possible on properties on xhr
should patch all possible on properties on worker
should patch all possible on properties on websocket
get window onerror should not throw error
window.onerror callback signature should be (message, source, lineno, colno, error)
should ignore duplicate handler
should be able to add/remove same handler with mix options and capture
should be able to add different handlers for same event
should support addEventListener with AddEventListenerOptions once setting
should support addEventListener with AddEventListenerOptions once setting and capture
should support add multiple listeners with AddEventListenerOptions once setting and same capture after normal listener
should support add multiple listeners with AddEventListenerOptions once setting and mixed capture after normal listener
should support add multiple listeners with AddEventListenerOptions once setting before normal listener
should support add multiple listeners with AddEventListenerOptions once setting with same capture before normal listener
should support add multiple listeners with AddEventListenerOptions once setting with mixed capture before normal listener
should change options to boolean if not support passive
should change options to boolean if not support passive on HTMLElement
should be passive with global variable defined
should not be passive without global variable defined
should be passive with global variable defined even without passive options
should be passive with global variable defined even without passive options and with capture
should be passive with global variable defined with capture option
should not be passive with global variable defined with passive false option
should be passive with global variable defined and also unpatched
should not be passive without global variable defined and also unpatched
should support remove event listener by call zone.cancelTask directly
should support remove event listener by call zone.cancelTask directly with capture=true
should support remove event listeners by call zone.cancelTask directly with multiple listeners
should support remove event listeners by call zone.cancelTask directly with multiple listeners with same capture=true
should support remove event listeners by call zone.cancelTask directly with multiple listeners with mixed capture
should support remove event listeners via AbortController
should support remove event listeners with AbortController
should not break remove event listeners with AbortController
should support remove multiple event listeners with the same AbortController
should support passing `AbortController` directly to `addEventListener`
should store the remove abort listener on the task itself and not the task data
should not add event listeners with aborted signal
should remove event listeners with timeout signal
should support reschedule eventTask
should be able to remove eventListener during eventListener callback
should be able to remove eventListener during eventListener callback with capture=true
should be able to remove handleEvent eventListener during eventListener callback
should be able to remove handleEvent eventListener during eventListener callback with capture=true
should be able to remove multiple eventListeners during eventListener callback
should be able to remove multiple eventListeners during eventListener callback with capture=true
should be able to remove part of other eventListener during eventListener callback
should be able to remove part of other eventListener during eventListener callback with capture=true
should be able to remove all beforeward and afterward eventListener during eventListener callback
should be able to remove all beforeward and afterward eventListener during eventListener callback with capture=true
should be able to remove part of beforeward and afterward eventListener during eventListener callback
should be able to remove part of beforeward and afterward eventListener during eventListener callback with capture=true
should be able to remove all beforeward eventListener during eventListener callback
should be able to remove all beforeward eventListener during eventListener callback with capture=true
should be able to remove part of beforeward eventListener during eventListener callback
should be able to remove part of beforeward eventListener during eventListener callback with capture=true
should be able to remove all eventListeners during first eventListener callback
should be able to remove all eventListeners during first eventListener callback with capture=true
should be able to remove all eventListeners during middle eventListener callback
should be able to remove all eventListeners during middle eventListener callback with capture=true
should be able to remove all eventListeners during last eventListener callback
should be able to remove all eventListeners during last eventListener callback with capture=true
should be able to get eventListeners of specified event form EventTarget
should be able to get all eventListeners form EventTarget without eventName
should be able to remove all listeners of specified event form EventTarget
should be able to remove all listeners of specified event form EventTarget with capture=true
should be able to remove all listeners of specified event form EventTarget with mixed capture
should be able to remove all listeners of all events form EventTarget
should be able to remove listener which was added outside of zone 
should be able to remove all listeners which were added inside of zone 
should support window.addEventListener(unhandledrejection)
should support window.addEventListener(rejectionhandled)
should support multiple window.addEventListener(unhandledrejection)
HTMLCanvasElement.toBlob should be a ZoneAware MacroTask
ResizeObserver callback should be able to in different zones which when they were observed
navigator.mediaDevices.getUserMedia should in zone
should work with formAssociatedCallback
should not throw when defining length on an array
should not be able to change a frozen desc
should not throw error when try to defineProperty with a frozen obj
should work when addEventListener / removeEventListener are called in the global context
should be able to deregister the same event twice
should work for getCurrentPosition
should work for watchPosition
should bind to same zone when called recursively
should have browser specified property
should always have stack property even without throw
should show zone names in stack frames and remove extra frames
Error with new which occurs in setTimeout callback should not have zone frames visible
Error without new which occurs in setTimeout callback should not have zone frames visible
Error with new which cause by promise rejection should not have zone frames visible
Error without new which cause by promise rejection should not have zone frames visible
Error with new which occurs in eventTask callback should not have zone frames visible
Error without new which occurs in eventTask callback should not have zone frames visible
Error with new which occurs in longStackTraceZone should not have zone frames and longStackTraceZone frames visible
Error without new which occurs in longStackTraceZone should not have zone frames and longStackTraceZone frames visible
should be able to generate zone free stack even NativeError stack is readonly
should pretend to be a native code
should make sure that new Promise is instance of Promise
should allow subclassing without Symbol.species
should allow subclassing without Symbol.species if properties are copied (SystemJS case)
should allow subclassing with Symbol.species
should allow subclassing with own then
Symbol.species should return ZoneAwarePromise
should intercept scheduling of resolution and then
should allow sync resolution of promises
should allow sync resolution of promises returning promises
should work with .then
should work with .finally with resolved promise
should work with .finally with rejected promise
should work with Promise.resolve
should work with Promise.reject
should reject and recover promise
should reject if chained promise does not catch promise
should notify Zone.onHandleError if no one catches promise
should resolve the value
should resolve with the sync then operation
should resolve generators
should reject if the Promise subclass rejects
should resolve if the Promise subclass resolves
undefined parameters
invalid iterable
empty parameters
non promises parameters
mixed parameters, non promise first
mixed parameters, promise first
all ok promises
all promises, first rejected
all promises, second rejected
all rejected promises
no promise values
all fulfilled
all rejected
mixed
mixed should in zone
poisoned .then
invoke the subclass
should ignore second resolve
should ignore second reject
should ignore resolve after reject
should ignore reject after resolve
should resolve
should reject
is untested for node as the fetch implementation is experimental
should work for text response
should work for json response
should work for blob response
should work for arrayBuffer response
should throw error when send crendential
fetch should be considered as macroTask
Response.json() should be considered as macroTask
cancel fetch should invoke onCancelTask
cancel fetchTask should trigger abort
should execute microtasks enqueued in the root zone
should correctly scheduleMacroTask microtasks vs macrotasks
should execute Promise wrapCallback in the zone where they are scheduled
should go through scheduleTask
should notify Zone.onHandleError if promise is uncaught
should print original information when a primitive value is used for rejection
should work with setInterval
should not cancel the task after invoke the setInterval callback
should intercept setTimeout
should allow canceling of fns registered with setTimeout
should allow cancelation of fns registered with setTimeout after invocation
should allow cancelation of fns while the task is being executed
should allow cancelation of fns registered with setTimeout during invocation
should return the original timeout Id
should allow cancelation by numeric timeout Id
should pass invalid values through
task should transit from scheduling to unknown when zoneSpec onScheduleTask callback throw error
task should transit from running to scheduled when task.callback throw error
task should transit from canceling to unknown when zoneSpec.onCancelTask throw error before task running
task should transit from canceling to unknown when zoneSpec.onCancelTask throw error in running state
task should transit from notScheduled to scheduled if zoneSpec.onHasTask throw error when scheduleTask
task should transit to notScheduled state if zoneSpec.onHasTask throw error when task is canceled
task should transit from running to noScheduled when task.callback throw error
task should transit from notScheduled to scheduling then to scheduled if zoneSpec.onHasTask throw error when scheduleTask
task should transit to notScheduled state if zoneSpec.onHasTask throw error after task.callback being invoked
task should transit to notScheduled state if zoneSpec.onHasTask throw error when task is canceled before running
task should transit from running to notScheduled when task.callback throw error
should not throw error if Promise is not a function
MutationObserver toString should be the same with native version
should return handleId.toString if handleId is available
should patch target where the method is defined
should not patch property which is not configurable
should patch target if it overrides a patched method
should not patch target if does not override a patched method
non configurable property desc should be patched
non writable property desc should not be patched
readonly property desc should not be patched
non writable method should not be patched
readonly method should not be patched
should throw if argument is not a function
should prevent double cancellation
should not throw when all is OK
should throw error if ZoneAwarePromise has been overwritten
bluebird promise then method should be in zone and treated as microTask
bluebird promise catch method should be in zone and treated as microTask
bluebird promise spread method should be in zone
bluebird promise finally method should be in zone
bluebird promise join method should be in zone
bluebird promise try method should be in zone
bluebird promise method method should be in zone
bluebird promise resolve method should be in zone
bluebird promise reject method should be in zone
bluebird promise all method should be in zone
bluebird promise props method should be in zone
bluebird promise any method should be in zone
bluebird promise some method should be in zone
bluebird promise map method should be in zone
bluebird promise reduce method should be in zone
bluebird promise filter method should be in zone
bluebird promise each method should be in zone
bluebird promise mapSeries method should be in zone
bluebird promise race method should be in zone
bluebird promise using/disposer method should be in zone
bluebird promise promisify method should be in zone and treated as microTask
bluebird promise promisifyAll method should be in zone
bluebird promise fromCallback method should be in zone
bluebird promise delay method should be in zone
bluebird promise timeout method should be in zone
bluebird promise tap method should be in zone
bluebird promise call method should be in zone
bluebird promise get method should be in zone
bluebird promise return method should be in zone
bluebird promise throw method should be in zone
bluebird promise catchReturn method should be in zone
bluebird promise catchThrow method should be in zone
bluebird promise reflect method should be in zone
bluebird should be able to run into different zone
should be able to chain promise
should catch rejected chained bluebird promise
should catch rejected chained global promise
should catch rejected bluebird promise
should catch rejected global promise
cordova.exec() should be patched as macroTask
should cope with pending tests, which have no test body
should wait for promise to resolve
it
test
it with done
setSystemTime should set FakeDate.currentFakeTime
runAllTicks should run all microTasks
runAllTimers should run all macroTasks
advanceTimersByTime should act as tick
runOnlyPendingTimers should run all macroTasks and ignore new spawn macroTasks
advanceTimersToNextTimer should trigger correctly
clearAllTimers should clear all macroTasks
getTimerCount should get the count of macroTasks correctly
setSystemTime should set FakeDate.currentRealTime
should support prepareStackTrace
should not add additional stacktrace from Zone when use prepareStackTrace
console methods should run in root zone
crypto randomBytes method should be patched as tasks
crypto pbkdf2 method should be patched as tasks
should register listeners in the current zone
should remove listeners properly
should remove listeners by calling off properly
should remove All listeners properly
remove All listeners should return event emitter
should remove All listeners properly even without a type parameter
should remove once listener after emit
should remove once listener properly before listener triggered
should trigger removeListener when remove all listeners with eventname 
should trigger removeListener when remove all listeners without eventname
should not enter endless loop when register uncaughtException to process
should be able to addEventListener with symbol eventName
fs.watchFile has been patched as eventTask
fs.exists should work with util.promisify
fs.realpath should work with util.promisify
fs.realpath.native should work with util.promisify
fs.read should work with util.promisify
fs.write should work with util.promisify
http.request should be patched as eventTask
process.nextTick should be executed before macroTask and promise
process.nextTick should be treated as microTask
should support process.on(rejectionHandled)
should support multiple process.on(unhandledRejection)
util.promisify should work with setTimeout
util.promisify should work with setImmediate
should contain all files
should bind EventTarget.addEventListener
audit func callback should run in the correct zone
buffer func callback should run in the correct zone
bufferCount func callback should run in the correct zone
bufferTime func callback should run in the correct zone
bufferToggle func callback should run in the correct zone
bufferWhen func callback should run in the correct zone
catch func callback should run in the correct zone
retry func callback should run in the correct zone
elementAt func callback should run in the correct zone
every func callback should run in the correct zone
filter func callback should run in the correct zone
find func callback should run in the correct zone
findIndex func callback should run in the correct zone
first func callback should run in the correct zone
groupBy func callback should run in the correct zone
ignoreElements func callback should run in the correct zone
isEmpty func callback should run in the correct zone
last func callback should run in the correct zone
map func callback should run in the correct zone
mapTo func callback should run in the correct zone
max func callback should run in the correct zone
max with comparer func callback should run in the correct zone
min func callback should run in the correct zone
min with comparer func callback should run in the correct zone
reduce func callback should run in the correct zone
scan func callback should run in the correct zone
repeat func callback should run in the correct zone
single func callback should run in the correct zone
skip func callback should run in the correct zone
skipWhile func callback should run in the correct zone
startWith func callback should run in the correct zone
combineLatest func callback should run in the correct zone
combineLatest func callback should run in the correct zone with project function
concat func callback should run in the correct zone
concatAll func callback should run in the correct zone
concatMap func callback should run in the correct zone
concatMapTo func callback should run in the correct zone
count func callback should run in the correct zone
debounce func callback should run in the correct zone
debounceTime func callback should run in the correct zone
delay func callback should run in the correct zone
delayWhen func callback should run in the correct zone
distinct func callback should run in the correct zone
distinctUntilChanged func callback should run in the correct zone
distinctUntilKeyChanged func callback should run in the correct zone
do func callback should run in the correct zone
pairwise func callback should run in the correct zone
partition func callback should run in the correct zone
pluck func callback should run in the correct zone
expand func callback should run in the correct zone
merge func callback should run in the correct zone
mergeAll func callback should run in the correct zone
mergeMap func callback should run in the correct zone
mergeMapTo func callback should run in the correct zone
switch func callback should run in the correct zone
switchMap func callback should run in the correct zone
switchMapTo func callback should run in the correct zone
multicast func callback should run in the correct zone
race func callback should run in the correct zone
retryWhen func callback should run in the correct zone
sample func callback should run in the correct zone
take func callback should run in the correct zone
takeLast func callback should run in the correct zone
takeWhile func callback should run in the correct zone
timeout func callback should run in the correct zone
promise should run in the correct zone
window func callback should run in the correct zone
windowCount func callback should run in the correct zone
windowToggle func callback should run in the correct zone
windowWhen func callback should run in the correct zone
scheduler asap should run in correct zone
scheduler asap error should run in correct zone
combineLatest func should run in the correct zone
combineLatest func with project function should run in the correct zone
should run methods in the zone of declaration
should run in the zone when subscribe is called to the same Subject
concat func callback should run in the correct zone with scheduler
defer func callback should run in the correct zone
forkjoin func callback should run in the correct zone
forkjoin func callback with selector should run in the correct zone
from array should run in the correct zone
from promise object should run in the correct zone
fromPromise func callback should run in the correct zone
interval func callback should run in the correct zone
never func callback should run in the correct zone
of func callback should run in the correct zone
range func callback should run in the correct zone
range func callback should run in the correct zone with scheduler
should retry max 3 times
timer func callback should run in the correct zone
zip func callback should run in the correct zone
should call finish after a setTimeout is done
should call finish after microtasks are done
should call finish after both micro and macrotasks are done
should call finish after both macro and microtasks are done
should not call done multiple times in sync test
should not call done multiple times in async test with nested zone
should call finish after an event task is done asynchronously
should wait for XHRs to complete
should fail if an xhr fails
should not fail if setInterval is used and canceled
should fail if an error is thrown asynchronously
should be able to detect non zone aware async task in promise
should automatically done after async tasks finished
should automatically done after all nested async tasks finished
should automatically done after multiple async tasks finished
should get date diff correctly
should tick correctly
should mock date correctly
should handle new Date correctly
should handle setTimeout correctly
should tick correctly without fakeAsync
should mock date correctly without fakeAsync
should handle new Date correctly without fakeAsync
should handle setTimeout correctly without fakeAsync
should rethrow the exception on flushMicroTasks for error thrown in Promise callback
should default to processNewMacroTasksSynchronously if providing other flags
should not queue new macro task on tick with processNewMacroTasksSynchronously=false
should run doTick callback even if no work ran
should run queued timer created by timer callback
should clear internal timerId cache
should pass arguments to periodic timers
should throw the exception from tick for error thrown in timer callback
should throw the exception from tick for error thrown in periodic timer callback
should be able to resume processing timer callbacks after handling an error
should flush all pending timers
should flush nested timers
should advance intervals
should not wait for intervals
accepts a custom limit
can flush periodic timers if flushPeriodic is true
can flush multiple periodic timers if flushPeriodic is true
can flush till the last periodic task is processed
should schedule a requestAnimationFrame with timeout of 16ms
does not count as a pending timer
should cancel a scheduled requestAnimationFrame
is not flushed when flushPeriodic is false
is flushed when flushPeriodic is true
should pass timestamp as parameter
should throw an exception if an XHR is initiated in the zone
should be able to schedule microTask with additional arguments
should support custom non perodic macroTask
should support custom non perodic macroTask by global flag
should support custom perodic macroTask
should new Date with parameter correctly
should get Date.UTC() correctly
should call Date.parse() correctly
should produce long stack traces for optimized eventTask
should not overwrite long stack traces data for different optimized eventTasks
should produce long stack traces when has uncaught error in promise
should produce long stack traces when handling error in promise
should not produce long stack traces if Error.stackTraceLimit = 0
should assert that it is in or out of ProxyZone
should trigger hasTask when invoke
should fail on Promise.then
should fail on setTimeout
should work with event tasks
should track tasks
should capture task creation stacktrace
should track periodic task until it is canceled
